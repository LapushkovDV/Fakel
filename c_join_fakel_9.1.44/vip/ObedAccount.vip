//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Настройка
// Объединение расчетных счетов
//------------------------------------------------------------------------------
#include ExtAttrClass.vih // подключение для удаления внешних атрибутов и классификации
                          // привязанных к расче6тным счетам
#include marker.vih // описание объекта и объявление интерфейса
                    // marker c реализацией по умолчанию
#include exectime.dic  // таблица  для хранения результатов по времени объединения
#include filial_macro.vpp// макросы для обработки филиальности
#include MacOb.vpp //макросы (для таблиц, не содержащих кау, и общие)

#define UseGetMarkerMy

#doc
Объединение расчетных счетов
#end
Interface KatAccountOb 'Объединение расчетных счетов'
  ('Объединение расчетных счетов', hcNastrAdmWOb, sci1Esc) EscClose, cyan;
  show at (,, 100, 25);

const
  lMsgOdebdifferenceUser = 'Этим объединением занимается другой пользователь.';
  lFilterByUserOb  = 'FilterByUserObKatAccount';
  lNeedZarRunOb    = 'NeedZarRunObKatAccount';
  lCheckTimeObedRepOb = 'CheckTimeObedRepObKatAccount';
  lNotDefine = 'Удаленный расчетный счет';
end;

Create View
#INCLUDE obed.var //объявление переменных
  i            : integer;
  CountRecOrdInProcess :integer; //количество записей для визуализации vtDownVisual
as Select
  if(    ExistFilial
     and (not(isValid(tnKatBank)))
     and (JoiHead.cRec <> comp(0)), JoiHead.rStr,
     if (    (not(isValid(tnKatBank)))
         and (JoiHead.cRec <> comp(0)), lNotDefine, trim(Katbank.Schet1) + ', ' + trim(KatBank.Name))) (fieldname = sObName)
  , if(    ExistFilial
       and (not(isValid(tnKatBank1)))
       and (SpJoi.cRec <> comp(0)), SpJoi.rStr,
            if (    (not(isValid(tnKatBank1)))
                and (SpJoi.cRec <> comp(0)), lNotDefine, trim(KatBank1.Schet1) + ', ' + trim(KatBank1.Name))) (fieldname = sOb1Name)
//----------------------------------------------------------------------------------
  #InternalFields
//----------------------------------------------------------------------------------
  #InternalFieldsForShowFilial
From
    KatBank
  , ExecTime
  , JoiHead
  , SpJoi
  , EvJoiHead
  #TableForFilial
  , KatBank  KatBank1
  , KatBank  KatBankTmp
  , JoiHead   tmpJoiHead
  , SpJoi     tmpSpJoi
  , EvJoiHead EvJoiHead1
  , SBBAN
  , SPPLBAN
  , XARPRED
  , KLUDER
  , PERECH
  , SHTRAF
  , DANPLZ
  , ARXSHTRF
  , PLPOR
  , VEKSL
  , PaySchem
  , SchFact
  , VALUTDOC
  , AKTOFP
  , DOCREQ
  , BANKDOCF
  , CASHBANK
  , KATKOD
  , KatSopr
  , Basedoc
  , Dogovor
  , Dover
  , ListCard
  , ResumeRt
  , CalPlan
  , KatOrg
  , KatOrg KatOrg1
  , KatOrg KatOrgTmp
Where
((
  m_wCgObedValue   == JoiHead.TypeEvent And    // Расчетные счета
  JoiHead.cRec     == KatBank.nRec      And    // Объединение - Расчетные счета
  JoiHead.nRec     == SpJoi.cJoiHead    And    // Объединение - спецификация
  SpJoi.cRec       == KatBank1.nRec     And      // Спецификация - Расчетные счета
  KatBank.cOrg     == KatOrg.Nrec       And
  KatBank1.cOrg    == KatOrg1.Nrec
  #WhereForFilial
))
Bounds OnlyUser =
      m_wCgObedValue == JoiHead.TypeEvent And UserName() == JoiHead.UserName;
File MemoFile;

Const
  iCountTableStep1 = 32;
end;

var piExAttr : iExtAttrClass; // функции внешних классификаторов и атрибутов
var m_cChoiceOrgNrec : comp;
var m_pMarkerUp   : IMarker(marker) new;

form ErrObAll ('ErrObAccount.OUT', 'ErrObAll') with NoVisual;
form frmObedAll('obedAccount.out', 'obedAll') with novisual;
form TimeObAll ('TimeObAccount.OUT','TimeObAll') with NoVisual;
form frmExchngTime('ExchngTime.out', 'ExchngTime') with novisual;
Procedure ObBreak;  // Прерывание объединения
var
  lcount_out : longint;
{
  lcount_out := VisualCount();
  message('Для прекращения объединения придется'
          + chr(13) + 'подождать до окончания замены на'
          + chr(13) + '"' + trim(KatBankTmp.Schet1) + ', ' + trim (KatBankTmp.Name) +  '".', Information + OkButton);

  ReStartVisual('Идет замещение расчетного счета на'#13'' + '"'
                + trim(KatBankTmp.Schet1) + ', ' + trim (KatBankTmp.Name)
                +'"' + ''#13'', m_lcount_vis);
  NNextVisual (lcount_out);
  m_bBreak := true;
}

#include obedtime.vpp //процедуры и фукнции по работе с таблицей информации по времени объединения
#include ErrObAll.vpp    // Пакет ошибок
#include printrelat.vpp // отчет замен
#include filial_func.vpp // проверка филиальности
//процедуры и функции обрабатывающие приход реплики с объединеннями  из другого офиса
#include ObFCorpo.vpp

function GetPrintName(cRec : comp) : string;
var
  sResult : string;
{
  sResult := 'Удален';
  If (GetFirst KatBankTmp where ((cRec == KatBankTmp.nRec)) = tsOk)
  {
    sResult := trim(KatBankTmp.Schet1) + ', ' + trim(KatBankTmp.Name);
    if (getFirst KatOrgTmp where ((KatBankTmp.cOrg == KatOrgTmp.Nrec)) = tsOk)
      sResult := sResult + ', Организация ' + KatOrgTmp.Name;
  }
  result := sResult;
}

Function CheckObj : boolean;
{
  #Check_Obj(KatBankTmp)
}

Function FindExistObj(cNewAccount : comp) : boolean;  // Проверка не участвует ли уже
                                                 // объект строительства  в объединении
var
  sObjUp, sObjDown : string[80];
{
  #FindObj(m_wCgObedValue, KatBankTmp, Name, lNotDefine, 'Расчетный счет ', cNewAccount, 0)
}

Function UpdateObj : boolean;
{
  m_bBreak    := False;
  result := False;
  m_bShowRepTime := true;
  _nMsgFrm  := 0;          // Общее число ошибок
  m_lErrOrJoi  := 0;
  m_lErrOrSp   := 0;
  m_lCount_vis := 0;

  _loop JoiHead where ((m_wCgObedValue == JoiHead.TypeEvent
                    and UserName()     == JoiHead.UserName ))
  {
    case JoiHead.Status of
    word(0) : if (m_wParamOb = word(1)) continue;
    word(1) : {};
    word(3) :  continue;
    word(4) : if (m_wParamOb <> word(0)) continue;
    end;

    if (JoiHead.prCOrpo <> byte(0))
      if (CheckObj)
      {
        message ('Одно из объединений, присланное по COrpo обмену'
                 + chr(13) + 'будет отложено, поскольку не существует расчетного счета,'
                 + chr(13) + 'в которую необходимо производить объединение.');
        continue;
      }

    _loop SpJoi where ((JoiHead.nRec == SpJoi.cJoiHead
                    and (word(3) <> SpJoi.Status) ))
      m_lCount_vis := m_lCount_vis + iCountTableStep1;
  }

  if (m_lcount_vis <> 0)
  {
    if (message('Если Вы не сохранили данные, еще раз рекомендуем это сделать.' + chr(13)
              + 'Запустить объединение расчетных счетов?', YesNo + mfSwapButtons + Confirmation) = cmNo)
    {
      m_bShowRepTime := false;
      exit;
    }
    StartNewVisual(vtIndicatOrVisual, vfTimer + vfbreak + vfConfirm,''#13#13#13'', m_lcount_vis);
  }
  else
  {
    message ('Нет заданий на объединение.');
    m_bShowRepTime := false;
    m_wParamOb := 0;
    exit;
  }
  MyMarker:=InitMarker('', 8, 50, 50, false);
                // Цикл по результирующей
  If (GetFirst JoiHead Where ((m_wCgObedValue == JoiHead.TypeEvent
                               And UserName() == JoiHead.UserName )) = tsOk )
  do
  {
    case JoiHead.Status of
    word(0) : if (m_wParamOb = word(1)) continue;
    word(1) : {};
    word(3) :  continue;
    word(4) : if (m_wParamOb <> word(0)) continue;
    end;

    if (JoiHead.prCOrpo <> byte(0))
      if (CheckObj) continue;
                        // Пересылка если COrpo
    if (    (m_bCOrpo)
        and (JoiHead.prCOrpo = byte(0))
        and (JoiHead.Status = word(0)))
    {
      ClearBuffer (#EvJoiHead);
      EvJoiHead.FilialNo := OfficeNo();
      EvJoiHead.TypeEvent := m_wCgObedValue;
      EvJoiHead.cRec := JoiHead.cRec;
      EvJoiHead.dDate := Cur_date();
      MemoFile.OpenMemo (EvJoiHead.EvSp);
      MemoFile.Write(JoiHead.rComp);
      _loop SpJoi where ((JoiHead.nRec == SpJoi.cJoiHead))
      {
        MemoFile.Write(SpJoi.cRec);
        MemoFile.Write(SpJoi.Num);
        MemoFile.Write(SpJoi.isDel);
/*
        If (GetFirst KatBanktmp where ((SpJoi.cRec == KatBanktmp.nRec)) = tsOk)
          MemoFile.Write(KatBanktmp.Name);
        Else
          MemoFile.Write(lNotDefine);
*/
      }
      MemoFile.Close;
      insert current EvJoiHead;
    }

    JoiHead.Status := wOrd(1);  // Делаем статус "Начата"
    Update Current JoiHead;

    If ( GetFirst KatBankTmp where (( JoiHead.cRec == KatBankTmp.nrec)) = tsOk ) {};

    iNextVisual('Идет замещение расчетного счета на'#13''
                + '"' + trim(KatBankTmp.Name) + '"' + ''#13'');
    m_bWriteInfoSpJoi := True;

                //  Цикл по объединяемым
    If (GetFirst SpJoi where ((JoiHead.nRec == SpJoi.cJoiHead And (wOrd(3) <> SpJoi.Status))) = tsOk)
      do
      {
        SpJoi.Status := wOrd(1);
        Update current SpJoi;
        // CountTable 1,2,3
        #UpdateTableOneFieldNoIndex(Plpor,cBankPlat,'PlPor')
        #UpdateTableOneFieldNoIndex(Plpor,cBankPol,'PlPor')
        #UpdateTableOneFieldNoIndex(Plpor,cBankKorr,'PlPor')
        // CountTable 4,5
        #UpdateTableOneFieldNoIndex(Veksl,cBankPlat,'Veksl')
        #UpdateTableOneFieldNoIndex(Veksl,cBankPl,'Veksl')
        // CountTable 6,7
        #UpdateTableOneFieldNoIndex(ValutDoc,cBank,'ValutDoc')
        #UpdateTableOneFieldNoIndex(ValutDoc,cBankSch,'ValutDoc')
        // CountTable 8,9
        #UpdateTableOneFieldNoIndex(AktOfp,cBank,'AktOfp')
        #UpdateTableOneFieldNoIndex(DocReq,cBank,'DocReq')
        // CountTable 10,11,12
        #UpdateTableOneFieldNoIndex(BankDocf,cBank,'BankDocf')
        #UpdateTableOneFieldNoIndex(CashBank,cPodr,'CashBank')
        #UpdateTableOneFieldNoIndex(KatKod,cOrg2,'KatKod')
        // CountTable 13,14
        #UpdateTableOneFieldNoIndex(SBBAN,cBankPol,'SBBAN')
        #UpdateTableOneFieldNoIndex(SpPlBan,cBankPol,'SpPlBan')
        // CountTable 15,16,17
        #UpdateTableOneFieldNoIndex(XarPred,cBankPol,'XarPred')
        #UpdateTableOneFieldNoIndex(KlUder,cBankPol,'KlUder')
        #UpdateTableOneFieldNoIndex(Perech,cBankPol,'Perech')
        // CountTable 18,19,20
        #UpdateTableOneFieldNoIndex(Shtraf,cBankPol,'Shtraf')
        #UpdateTableOneFieldNoIndex(DanPlz,cBankPol,'DanPlz')
        #UpdateTableOneFieldNoIndex(ArxShtrf,cBankPol,'ArxShtrf')
        // CountTable 21,22,23,24,25,26,27,28
        #UpdateTableOneFieldNoIndex(Basedoc,cBank,'Basedoc')
        #UpdateTableOneFieldNoIndex(Basedoc,cMyBANK,'Basedoc')
        #UpdateTableOneFieldNoIndex(Dogovor,cBankPlat,'Dogovor')
        #UpdateTableOneFieldNoIndex(Dogovor,cBankPol,'Dogovor')
        #UpdateTableOneFieldNoIndex(Dover,cBANK,'Dover')
        #UpdateTableOneFieldNoIndex(ListCard,cBANK,'ListCard')
        #UpdateTableOneFieldNoIndex(ResumeRt,cBANK,'ResumeRt')
        #UpdateTableOneFieldNoIndex(CalPlan,cPolBank,'CalPlan')
        #UpdateTableOneFieldNoIndex(CalPlan,cPlatBank,'CalPlan')
        #UpdateTableOneFieldNoIndex(PaySchem,cPlatBank,'PaySchem')
        #UpdateTableOneFieldNoIndex(PaySchem,cPolBank,'PaySchem')
        #UpdateTableOneFieldNoIndex(SchFact,cMyAcc,'SchFact')
        #UpdateTableOneFieldNoIndex(SchFact,cKontrAcc,'SchFact')

        #UpdateTableOneFieldOnTwoFieldNoIndex(KatSopr,cCellVal,VidSopr,cgDoc_0408,'KatSopr')
        #UpdateTableOneFieldOnTwoFieldNoIndex(KatSopr,cCellVal,VidSopr,cgDoc_0409,'KatSopr')

        if (coGetTune('MYBANK') = SpJoi.cRec)
          coSetTune('MYBANK', JoiHead.cRec, KatBank.Name);
      // Если этап завершен без ошибок для одной рез. расчетного счета
      if (_nMsgFrm = m_lErrOrSp) SpJoi.Status := word(3);
      else                       SpJoi.Status := word(4);
      update current SpJoi;
      if (m_lErrorSp <> _nMsgFrm)
      {
        ErrObAll.PutEventById (febreak, fcCycleOfErrOrAll);
        ErrObAll.write(_nMsgFrm - m_lErrorSp);
      }
      m_lErrorSp := _nMsgFrm;
    } while (GetNext SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                                   and (word(3)<>SpJoi.Status) )) = tsOk);
    m_bWriteInfoSpJoi := false;

    if (m_lErrorJoi <> _nMsgFrm)
    {
      ErrObAll.PutEventById (febreak, fcCycleOfObAll);
      ErrObAll.write(_nMsgFrm - m_lErrorJoi);
    }
    // Если объединение без ошибок
    if (_nMsgFrm = m_lErrorJoi) JoiHead.Status := word(3); // статус "Завершено"
    else                        JoiHead.Status := word(4);// статус "Завершено с ошибками"
    update Current JoiHead;

    m_lErrorJoi := _nMsgFrm;
    m_lErrOrSp := m_lErrorJoi;
  } while (    (GetNext JoiHead where ((m_wCgObedValue == JoiHead.TypeEvent
                                    and UserName()     == JoiHead.UserName )) = tsOk)
           and (m_bBreak = false));

  If (_nMsgFrm > 0)
  {
    ErrObAll.PutEventById (feBreak, fcCycleOfResAll);
    ErrObAll.write(_nMsgFrm);
  }

  m_wParamOb := 0;
  DoneMarker (MyMarker, '');
  if (m_lcount_vis <> 0)
  {
    StopVisual('', 0);
    if (_nMsgFrm > 0)  // Если были ошибки во время объединения
    {
      message('Во время объединения произошли ошибки !'
              + chr(13) + 'Просмотрите протокол ошибок и если необходимо,'
              + chr(13) + 'запустите процедуру объединения расчетных счетов еще раз.' + chr(13));
      ErrObAll.ShowFile;
    }
  }
  Message('Объединение завершено.');
}

browse AccountJoi;
show at (,,,6);
Table JoiHead;
  recMarker = m_pMarkerUp {JoiHead.Nrec};
fields
    sObName          'Наим. расчетных счетов (рез.объединения)'
                     ('', hcNastrAdmWOb, sci1378EscInsPMBrigadeDuty) : [32], Protect;
    KatOrg.Name      'Организация' ('', hcNastrAdmWOb, sci1378Esc) : [20], Protect;
    strFilial        'филиал','───────'('',hcNastrAdmWOb,sci1Esc) : [7], Protect;
    strJoiStatus     'Статус'
                     ('', hcNastrAdmWOb, sci1Esc) : [14], Protect;
    JoiHead.UserName 'Пользователь'('', hcNastrAdmWOb, sci13Esc) : [12], Protect;
    strJoiCOrpo      '№ офиса','───────'('',hcNastrAdmWOb,sci1Esc) : [7], Protect;
end;

TableEvent Table JoiHead;
cmSetDefault :
{
  JoiHead.TypeEvent := m_wCgObedValue;
  JoiHead.Status := word(0);
  JoiHead.UserName := UserName();
  JoiHead.dDate := Cur_Date;
}

cmInsertRecord : insert current JoiHead;
cmUpdateRecord : update current JoiHead;

cmInsert :
{
  case curfield of
  #sObName :
  {
    m_cChoiceOrgNrec := m_cChoiceNrec := 0;
    if (RunInterface('GetKatOr', m_cChoiceOrgNrec, comp(0), false, comp(0), m_cChoiceNrec) <> cmCancel)
    {
      if (not FindExistObj(m_cChoiceNrec)) putCommand(cmValue1);
      else abort;
    }
    else abort;
  }
  end;
}

cmMarkDelete :
{
  if (curtable = #JoiHead)
  {
    m_bDeleteByMarker := false;
    if (m_pMarkerUp.Count <> 0)
    {
      if (message('Удалить помеченные записи?', yesno + mfSwapButtons + confirmation) = cmYes)
      {
        m_bDeleteByMarker := true;
        stop;
      }
      else abort;
    }
  }
}

cmdeleteRecord :
{
  if not(isValid(tnJoiHead)) exit;
  if (not m_bDeleteByMarker) m_bExistDel := false; // инициализация переменной в случае когда пометки нет для случая обычного удаления
  //#5578 >>>>>>>>>>>>>>>>>
  var _boDiffUser : boolean = (JoiHead.UserName <> UserName());
  if _boDiffUser
    if (not m_bDeleteByMarker)
      if pr_CurUserAdmin
      { if message(lMsgOdebdifferenceUser
          +chr(13)+'Продолжить?' , YesNo)=cmYes
        { _boDiffUser:=false

        }
      }
  //#5578 <<<<<<<<<<<<<<<<<<<<<<<<<
  if _boDiffUser
  {
    if (not m_bDeleteByMarker)
      message(lMsgOdebdifferenceUser
        +chr(13)+'обратитесь к администратору БД', Warning);
    if (m_bExistDel and ((not m_bDeleteByMarker) or (m_bDeleteByMarker and m_pMarkerUp.Count = 0)))
      message('Удаление расчетных счетов произведено.', Information + OkButton);
    exit;
  }

  var bRun : boolean; bRun := true;
  if (not m_bDeleteByMarker)
    bRun := message('Удалить запись?', yesno + mfSwapButtons + confirmation) = cmYes;

  if (bRun)
  {
    if (    (JoiHead.Status = word(3))
         Or (JoiHead.Status = word(4)))
    {
      if (getFirst SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                                 and byte(1)      == SpJoi.isDel
                                 and byte(4)      == SpJoi.Status )) = tsOk)
      {
        var bDelFromCatalog : boolean; bDelFromCatalog := false;
        if (not m_bDeleteByMarker)

        bDelFromCatalog := message('Удалять из каталога расчетных счетов, объединение'
                    + chr(13) + 'которых завершено с ошибками?',
                    yesno + mfSwapButtons + Confirmation) = cmYes;
        if (bDelFromCatalog)
          update SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                               and byte(1)      == SpJoi.isDel
                               and byte(4)      == SpJoi.Status)) set Status := 3;
      }
      _loop SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                          and byte(1)      == SpJoi.isDel
                          and byte(3)      == SpJoi.Status))
      {
        piExAttr.DeleteAll(m_wCodeTable, SpJoi.cRec);
        delete KatBankTmp where ((SpJoi.cRec == KatBankTmp.nrec));
        m_bExistDel := true;
      }
    }
    delete SpJoi where ((JoiHead.nRec == SpJoi.cJoiHead));
    delete current JoiHead;
    if (m_bExistDel and ((not m_bDeleteByMarker) or (m_bDeleteByMarker and m_pMarkerUp.Count = 0)))
      message('Операция удаления завершена.', Information + OkButton);
    else Abort;
  }
}
end;

hAndleevent
cmValue1 :
{
  set JoiHead.rComp := comp(1);
  set JoiHead.cRec := m_cChoiceNrec;
  UpdateTable;
  SetFilialInNastrObed(coJoiHead, trim(Katbank.Schet1) + ', ' + trim(KatBank.Name), KatBank.Atl_Branch);
  ReDrawPanel(#JoiHead);
}

cmPick :
{
  #Check_Pick(JoiHead)

  case curfield of
  //-----------
  #sObName :
  {
    if (JoiHead.Status <> 0) exit;
    m_cChoiceNrec := JoiHead.cRec;
    var bResult : boolean;
    if (JoiHead.cRec = 0)
      bResult := (RunInterface('GetKatOr', m_cChoiceOrgNrec, comp(0), false, comp(0), m_cChoiceNrec) <> cmCancel);
    else
      bResult := (RunInterface('GetBank', KatOrg.Nrec, m_cChoiceNrec) <> cmCancel);

    if (bResult)
    {
      #CheckChoiceValueForJoiHeadOnPick
      set JoiHead.rComp := comp(1);
      UpDateTable;
      SetFilialInNastrObed(coJoiHead, trim(Katbank.Schet1) + ', ' + trim(KatBank.Name), KatBank.Atl_Branch);
      ReReadRecOrd(#JoiHead);
      ReDrawPanel(#JoiHead);
    }
  }
  end;
}
end; // hanldeevent


browse AccountSpJoi;
show at (,7,,17);
Table SpJoi;
fields
    sOb1Name        'Наим. расчетных счетов, подлежащих объединению'
                    ('', hcNastrAdmWOb, sci1378Esc): [41], Protect;
    KatOrg1.Name    'Организация' ('', hcNastrAdmWOb, sci1378Esc) : [20], Protect;
    strFilial1      'филиал','───────'('',hcNastrAdmWOb, sci1Esc) : [7], Protect;
    strSpJoiStatus  'Статус'
                    ('', hcNastrAdmWOb, sci1Esc)   : [15], Protect;
    cSpJoiDel       'Удалять'
                    ('Изменяется при нажатии на <F3>', hcNastrAdmWOb, sci13Esc)
                                                            : [7], #protectedcentered;
end;

tableEvent Table SpJoi;
cmInsert:
{
  if (JoiHead.UserName <> UserName())
  {
    message (lMsgOdebdifferenceUser, Warning);
    abort; exit;
  }

  if (JoiHead.Status <> 0) {abort; exit;}

  if (RunInterface('GetBank', KatOrg.Nrec, m_cChoiceNrec) <> cmCancel)
  {
    if (FindExistObj(m_cChoiceNrec))
    {
      abort;
      exit;
    }
    ClearBuffer (#SpJoi);
    SpJoi.cJoiHead := JoiHead.nRec;
    SpJoi.cRec := m_cChoiceNrec;
    SpJoi.Status := word(0);
    SpJoi.IsDel := word(1);
    Insert current SpJoi;
    SetFilialInNastrObed(coSpJoi, trim(Katbank1.Schet1) + ', ' + trim(KatBank1.Name), KatBank1.Atl_Branch);
    ReReadRecord(#SpJoi);
    ReDrawPanel(#SpJoi);
  }
  abort;
}

cmdeleteRecord :
{
  if (JoiHead.UserName <> UserName())
  {
    message (lMsgOdebdifferenceUser, Warning);
    exit;
  }

  if (JoiHead.Status = 0)
    if (message('Удалить запись?', yesno + mfSwapButtons + Confirmation) = cmYes)
      delete current SpJoi;
}
end;

hAndleevent
cmPick :
{
  #Check_Pick(SpJoi)

  case curfield of
  #sOb1Name :
  {
    if (JoiHead.Status <> 0) exit;
    m_cChoiceNrec := SpJoi.cRec;
    if (RunInterface('GetBank', KatOrg.Nrec, m_cChoiceNrec) <> cmCancel)
    {
      #CheckChoiceValueForSpJoiOnPick
      ClearBuffer (#SpJoi);
      SpJoi.cJoiHead := JoiHead.nRec;
      SpJoi.cRec := m_cChoiceNrec;
      SpJoi.Status := word(0);
      SpJoi.IsDel := word(1);
      Insert current SpJoi;
      SetFilialInNastrObed(coSpJoi, trim(Katbank1.Schet1) + ', ' + trim(KatBank1.Name), KatBank1.Atl_Branch);
      ReReadRecord(#SpJoi);
      ReDrawPanel(#SpJoi);
    }
  }
  #cSpJoiDel :
  {
    if (SpJoi.cRec <> comp(0))
    {
      if (SpJoi.IsDel = word(1)) SpJoi.IsDel := word(0);
      else                       SpJoi.IsDel := word(1);
      update current SpJoi;
      RedrawPanel (#SpJoi);
    }
  }
  end;
}
end;

// Экран с кнопками
screen ButtonsList;
  show at (,18,,);
  Fields
    m_wFilterByUser ('Изменяется при нажатии на <Пробел>', hcNastrAdmWOb, sci1Esc) : , noprotect;
    m_wNeedZarRun ('Изменяется при нажатии на <Пробел>',hcNastrAdmWOb,sci1Esc): noprotect;
    m_wCheckTimeObedRep ('Изменяется при нажатии на <Пробел>',hcNastrAdmWOb,sci1Esc): noprotect;
Buttons
  cmObed, Default,,, hcNastrAdmWOb, sci1Esc;
  cmCancel,,,, hcNastrAdmWOb, sci1Esc;

<<
  Показывать объединения         Включить в обработку таблицы модуля Заработная плата:
  (.) всех пользователей`        [.] таблицы с архивной информацией`
  (.) только свои       `        [.] таблицы с текущей информацией`

                                 [.] Протокол по времени объединения`

                      <.~О~бъединить .>         <. О~т~мена .>
>>

end; // screen

handleevent

cmCheckField :
{
  case curfield of
  #m_wFilterByUser :
  {
    case m_wFilterByUser of
    0 :  if (BoundActive(tbOnlyUser))     PopBounds (tbOnlyUser);
    1 :  if (not BoundActive(tbOnlyUser)) PushBounds (tbOnlyUser);
    end;
    if (getFirst JoiHead = tsOk) {};

    ReReadRecord(#JoiHead);
    RescanPanel (#JoiHead);
    RescanPanel (#SpJoi);
    SelectPanel (#JoiHead);
    SaveMyDsk (m_wFilterByUser, lFilterByUserOb);
  }
  #m_wNeedZarRun : SaveMyDsk (m_wNeedZarRun, lNeedZarRunOb);
  #m_wCheckTimeObedRep : SaveMyDsk (m_wCheckTimeObedRep, lCheckTimeObedRepOb);
  end; // case
}


cmInit:
{
  DisableCommand(cmFilterSave);
  m_wCodeTable := coKatBank;
 // функцию можно запускать при выборе режима одного филиала
  if (not CanMayRunObedInFilialDb)
  {
    CloseInterface(cmCancel);
    exit;
  }

  bDBPlatformType := GetDBPlatformType;// читаем тип СУБД
  m_wCgObedValue := cgObedAccount;// присвоение должно быть раньше кода, где используется переменная m_wCgObedValue
  if (not ReadMyDsk (m_wNeedZarRun, lNeedZarRunOb, true)) m_wNeedZarRun := 3;
  if (not ReadMyDsk (m_wFilterByUser, lFilterByUserOb, true)) m_wFilterByUser := 0;
  if (not ReadMyDsk (m_wCheckTimeObedRep, lCheckTimeObedRepOb, true)) m_wCheckTimeObedRep := 0;
  if (m_wFilterByUser = 1) PushBounds (tbOnlyUser);

  m_wParamOb := 0;

  m_bCOrpo := InCorpo(m_wCgObedValue);

  if (m_bCOrpo)
  {
    DelOutCOrpo(m_wCgObedValue);
    CorpoForUser(m_wCgObedValue);
  }

  if (getFirst tmpJoiHead where ((m_wCgObedValue == tmpJoiHead.TypeEvent
                              and UserName()     == tmpJoiHead.UserName
                              and (word(1)=tmpJoiHead.Status) )) = tsOk )
  {
    m_wParamOb := word(1);
    if (message('Обнаружено незавершенное объединение расчетных счетов'
                + chr(13) + 'рекомендуется немедленно продолжить это объединение.'
                + chr(13) + chr(13) + 'Запустить незавершенное объединение?',yesno + Confirmation) = cmYes)
      PutCommand(cmObed);
    else
      CloseInterface (cmCancel);
  }
}

cmDefault:
  AbOrt;

cmHotKeys :
  PutHotCommAnd(RunMenu('ObedKatBank_HotKeys_Print'));

cmPrintDoc :
{
  if (frmObedAll.errOr)
  {
    frmObedAll.abortform;
    message('Ошибка при формировании протокола соответствия.' + chr(13)
           +'Возможно, формы ObedAll нет в ресурсе.', CancelButton);
    exit;
  }
  else
  {
    frmObedAll.Write('расчетных счетов');
    StartNewVisual(vtRotateVisual, vfTimer, 'Идет вывод на печать соответствий Объединение', 0);

    _LOOP JoiHead
    {
      NextVisual;
      var ind: integer;  ind := 0;

      _LOOP SpJoi
        {
          NextVisual;
          frmObedAll.PutEventById (fedoLoop, fcObedAll_cyrcle);
          inc(ind);
          frmObedAll.write(if (ind = 1, sObName + ', Организация ' + KatOrg.Name, ''));
          frmObedAll.write(sOb1Name + ', Организация ' + KatOrg1.Name);
        }

      if (ind <> 0)
        frmObedAll.PutEventById (fedoLoop, fcObedAll_cyrcleLine)
      else
        {
          frmObedAll.PutEventById (fedoLoop, fcObedAll_cyrcle);
          frmObedAll.write(sObName + ', Организация ' + KatOrg.Name);
          frmObedAll.write('');
          frmObedAll.PutEventById (fedoLoop, fcObedAll_cyrcleLine);
        }
    }

    StopVisual('', 0);
    ReReadrecord(#JoiHead);
    ReReadrecord(#SpJoi);

    frmObedAll.write('');
    frmObedAll.ShowFile('Протокол объединения');
  }
}

cmObed :
{
  _try
  {
    SetFilialBdToStandart;// обработка филиальности (перевод с филиальности в стандарт)
    mtClear (#ExecTime,mfNormal);
    if (m_wParamOb <> 1)
    {
      _loop tmpJoiHead where ((    m_wCgObedValue == tmpJoiHead.TypeEvent
                               and UserName()        == tmpJoiHead.UserName))
      {
        if (getFirst tmpSpJoi where ((tmpJoiHead.nRec == tmpSpJoi.cJoiHead)) <> tsOk)
        {
          var sObjName : string; sObjName := lNotDefine;
          If (GetFirst KatBankTmp where (( tmpJoiHead.cRec == KatBankTmp.nrec)) = tsOk )
            sObjName := trim(KatbankTmp.Schet1) + ', ' + trim(KatBankTmp.Name);
          message ('Для результата объединения' + chr(13)
                 + '"' + sObjName + '"' + chr(13)
                 + 'не выбраны расчетные счета, которые необходимо объединять.', CancelButton);
          SetStandartBdToFilial;// обработка филиальности (перевод со стандартной в филиальную)
          exit;
        }
      }
      if (getFirst tmpJoiHead where ((    m_wCgObedValue == tmpJoiHead.TypeEvent
                                      and UserName()        == tmpJoiHead.UserName
                                      and (word(4) = tmpJoiHead.Status) )) = tsOk )
        if (message('Хотите повторять объединение для' + chr(13)
                  + 'завершенных с ошибками расчетных счетов?', YesNo + Confirmation) = cmNo)
          m_wParamOb := 2;
    }
    if (IsNotExistNastroikiFromOtherFilials(m_wCgObedValue, m_wCodeTable)) UpdateObj;
  }
  _finally
  {
    SetStandartBdToFilial;// обработка филиальности (перевод со стандартной в филиальную)
  }
  ReReadRecOrd(#JoiHead);
  ReDrawPanel(#JoiHead);
  ReReadRecOrd(#SpJoi);
  ReDrawPanel(#SpJoi);
  If ((m_wCheckTimeObedRep=1) and m_bShowRepTime)
    #MakeTimeProt('расчетных счетов');
}

cmDelOnProtect :
{
  if (   (curfield = #KatOrg.Name)
      or (curfield = #KatOrg1.Name)) abort;
}
end;

end.  // Interface

ObedKatBank_HotKeys_Print Menu
{
- 'Печать',cmPrintDoc,'Печать соответствия объединения',, 'Ctrl+P', kbCtrlP, scMenuCtx;
}
