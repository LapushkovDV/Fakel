//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 8.10 - Настройка
// Объединение статусов договоров
//********************************************************************************
#include marker.vih // описание объекта и объявление интерфейса
                    // marker c реализацией по умолчанию

#include exectime.dic  // таблица  для хранения результатов по времени объединения
#include filial_macro.vpp// макросы для обработки филиальности
#include MacOb.vpp //макросы (для таблиц, не содержащих кау, и общие)
#define UseGetMarkerMy

#doc
Объединение статусов
#end
Interface ObStatus 'Объединение статусов' ('Объединение статусов ', hcNastrAdmWOb, sci1Esc) EscClose, cyan;
Show At (10,5,120,28);

const
  lMsgOdebdifferenceUser = 'Этим объединением занимается другой пользователь.';
  lFilterByUserOb  = 'FilterByUserObedKatNotes';
  lNeedZarRunOb    = 'NeedZarRunObedKatNotes';
  lCheckTimeObedRepOb = 'CheckTimeObedRepObedKatNotes';
  lNotDefine = 'Удаленный статус';
end;

Create View
#INCLUDE obed.var //объявление переменных

  MarkerVidD : TPtr;

as select
  GetTiDkGalName(KatNotes.VIDDOC) (fieldname = sDocName),
  #Strorka_sObName(KatNotes,lNotDefine,Name)
  #Strorka_sOb1Name(KatNotes1,lNotDefine,Name)
//----------------------------------------------------------------------------------
  #InternalFields
//----------------------------------------------------------------------------------
  #InternalFieldsForShowFilial,
  *
From
    ExecTime
  , KatNotes
  , JoiHead
  , SpJoi
  , EvJoiHead
  #TableForFilial
  , KatNotes KatNotes1
  , KatNotes KatNotes2
  , KatNotes KatNotesTmp
  , JoiHead   tmpJoiHead
  , SpJoi     tmpSpJoi
  , EvJoiHead EvJoiHead1
  , BASEDOC
  , KATSOPR
  , DOGOVOR
  , AKTSVER
  , CALPLAN
  , DOCSCHEM
  , NZAKAZ
  , OTGORDER
  , KATSTROY
  , KATSTRZ
  , SMETASTROY
  , SERTIFIC
  , ISKI
  , KLPRICE
Where
((
       m_wCgObedValue == JoiHead.TypeEvent
   And JoiHead.cRec   == KatNotes.nRec
   And JoiHead.nRec   == SpJoi.cJoiHead
   And SpJoi.cRec     == KatNotes1.nRec

   and m_cChoiceNrec  == KatNotes2.nRec
   #WhereForFilial

))
Bounds  OnlyUser = m_wCgObedValue == JoiHead.TypeEvent
      And UserName()         == JoiHead.UserName
;
File MemoFile;
form ErrObAll ('ErrObedKatNotes.OUT','ErrObAll') with NoVisual;
form frmObedAll('obedKatNotes.out','obedAll') with novisual;
form frmExchngTime('ExchngTime.out', 'ExchngTime') with novisual;

var
  m_pMarkerUp   : IMarker(marker) new;

#include obedtime.vpp //процедуры и фукнции по работе с таблицей информации по времени объединения
#include ErrObAll.vpp    // Пакет ошибок
#include printrelat.vpp // отчет замен
#include filial_func.vpp // проверка филиальности
//процедуры и функции обрабатывающие приход реплики с объединеннями  из другого офиса
#include ObFCorpo.vpp

// макрос для таблицы с одним изменяемым полем у которого нет индекс
#Declare UpdateTableTwoFieldNoIndex1(Tabl,Field,Field1,FieldReplace,TablString)
  m_tTimeBeg := cur_time;
  if ((update visual 'Обработка таблицы #Tabl' #Tabl
       where ((SpJoi.cRec == #Tabl.#Field (noindex)))
       set #Tabl.#Field := JoiHead.cRec, #Tabl.#Field1 := #FieldReplace) <> tsOk) MSGForm(#TablString, 0, 4);
  InsExecTime(SpJoi.cRec, JoiHead.cRec, #TablString, m_tTimeBeg, Cur_Time);
#End


Procedure UpdateBaseDocOrKatSopr(wDoc : word);
{
  if (wDoc = 0)
  {
    if ((update visual 'Обработка таблицы BaseDoc' BaseDoc where ((SpJoi.cRec == BaseDoc.cNote (noindex)))
      set BaseDoc.cNote := JoiHead.cRec, BaseDoc.Status := KatNotes.Status) <> tsOk) MSGForm('BaseDoc', 0, 4);
  }
  else
  {
    if ((update visual 'Обработка таблицы KatSopr' KatSopr where ((SpJoi.cRec == KatSopr.cNote (noindex)))
      set KatSopr.cNote := JoiHead.cRec, KatSopr.Status := KatNotes.Status) <> tsOk) MSGForm('KatSopr', 0, 4);
  }
}
// Получить вид статуса по виду документа
procedure UpdateStatusByVidDoc;
{
    //тип статусов
    case (KatNotes.VidDoc) of
      40:  UpdateBaseDocOrKatSopr(0);
      100: UpdateBaseDocOrKatSopr(1);
  else
  {
    // тип статуса равен типу документа
    case KatNotes.VidDoc of
       510, 520, 550, 560, 919:
        {
          UpdateBaseDocOrKatSopr(0);
        }
      623
    , 722
    , cgDoc_0420  // Распоряжение на внутреннее перемещение МТР
    , cgDoc_0421  // Распоряжение на отпуск МТР
    , cgDoc_0423  // Распоряжение на изменение целевого назначения
    , cgDoc_0442  // Распоряжение на прием-отпуск МТР
    , cgDoc_0446  // Распоряжения на возврат-отпуск МТР
    , cgDoc_0447  // Распоряжения на перемещение МТР в УКСе
    , cgDoc_0448  // Распоряжение на передачу МТР в ОС
    , cgDoc_0449  // Распоряжение на передачу МТР в спецоснастку
    , cgDoc_1562  // Распоряжение на внутреннее перемещение ОС
    , 558         // Акт предписания
    , 561         // Акты переноса срока ремонта
    , 562         // Акты сдачи в ремонт
    , 563         // Акты сдачи в эксплуатацию
    , 600         // накладная на внутреннее перемещение
    , 601         // накладная склад -> OC
    , 602         // накладная склад -> спецоснастка
    , 603         // накладная склад -> розница
    , 605         // накладная склад -> НМА
    , 606         // транзитная накладная
    , 607         // накладная на внутреннее перемещение
    , 611         // излишки
    , 612         // недостача
    , 621         // акт на комплектование
    , 622         // акт на разукомплектование
    , 630         // акт на пересортицу
    , 632         // акт на перемещение между объектами
    , 613         // акт изменения целевого назначения МТР
    , 551         // Накладная на отпуск МЦ для ремонтов
    , 552         // накладная на возврат МЦ из ремонта
    , 553         // Акты выполненных ремонтов подрядный
    , 554         // Акты выполненных ремонтов СС
    , 557         // Акты выполненных ремонтов на заказ
    , 559         // Акты на списание МЦ из ремонтов
      :
      {
        UpdateBaseDocOrKatSopr(0);
      }
      /////////////////////////////////////////////////////
      400, 401:
      {
        #UpdateTableTwoFieldNoIndex1(Dogovor,cNote,Status,KatNotes.Status,'Dogovor with field cNote')
      }
      402:
      {
        #UpdateTableTwoFieldNoIndex1(AktSver,cNote,Status,KatNotes.Status,'AktSver with field cNote')
      }
      403:
      {
        #UpdateTableTwoFieldNoIndex1(CalPlan,cNote,Status,KatNotes.Status,'CalPlan with field cNote')
      }
      445:
      {
        #UpdateTableTwoFieldNoIndex1(DocSchem,cNote,Status,KatNotes.Status,'DocSchem with field cNote')
      }
      440, 443:
      {
        #UpdateTableTwoFieldNoIndex1(NZakaz,cNote,Status,KatNotes.Status,'DocSchem with field cNote')
      }
      441:
      {
        #UpdateTableTwoFieldNoIndex1(OTGORDER,cNote,Status,KatNotes.Status,'OTGORDER with field cNote')
      }
      450, 451:
      {
        #UpdateTableTwoFieldNoIndex1(KATSTROY,cNote,Status,KatNotes.Status,'KATSTROY with field cNote')
      }
      452:
      {
        #UpdateTableTwoFieldNoIndex1(KATSTRZ,cNote,Status,KatNotes.Status,'KATSTRZ with field cNote')
      }
      456:
      {
        #UpdateTableTwoFieldNoIndex1(SMETASTROY,cNote,wStatus,KatNotes.Status,'SMETASTROY with field cNote')
      }
      290:
      {
        #UpdateTableTwoFieldNoIndex1(SERTIFIC,cNote,Status,KatNotes.Status,'SERTIFIC with field cNote')
      }
      701,702,711,712,713,714:
      {
        #UpdateTableTwoFieldNoIndex1(ISKI,CNOTEISK,STATUSISK,KatNotes.Status,'ISKI with field cNote')
      }
      2001:
      {
        #UpdateTableTwoFieldNoIndex1(KLPRICE,CNOTE,STATUS,KatNotes.Status,'KLPRICE with field cNote')
      }
    end; // case
  }
  end; // case
}

function GetPrintName(cRec : comp) : string;
var
  sResult : string;
{
  sResult := 'Удален';
  If (GetFirst KatNotesTmp where ((cRec == KatNotesTmp.Nrec)) = tsOk)
    sResult := KatNotesTmp.Name;
  result := sResult;
}

Function CheckObj : boolean;
{
  #Check_Obj(KatNotesTmp)
}

Procedure ObBreak;  // Прерывание объединения
var
  lcount_out : longint;
{
  lcount_out := VisualCount();
  message('Для прекращения объединения придется'
          + chr(13) + 'подождать до окончания замены на'
          + chr(13) + '"' + trim (KatNotesTmp.Name) + '".', Information + OkButton);

  ReStartVisual('Идет замещение статусов на'#13'' + '"' + trim(KatNotesTmp.Name)
                +'"' + ''#13'', m_lcount_vis);
  NNextVisual (lcount_out);
  m_bBreak := true;
}

Function FindExistObj(cNRecDriver : comp) : boolean;  // Проверка не участвует ли уже
                                                       //
var
  sObjUp, sObjDown : string[80];
{
  #FindObj(m_wCgObedValue, KatNotesTmp, Name, lNotDefine, 'Статус ', cNRecDriver, 0)
}

Function UpdateObj : boolean;
{
  m_bBreak    := False;
  result:= False;
  m_bShowRepTime := true;
  _nMsgFrm  := 0;          // Общее число ошибок
  m_lErrorJoi  := 0;
  m_lErrorSp   := 0;
  m_lCount_vis := 0;
  _loop JoiHead where ((    m_wCgObedValue == JoiHead.TypeEvent
                        and UserName()         == JoiHead.UserName ))
  {
    case JoiHead.Status of
    word(0) : if (m_wParamOb = word(1)) continue;
    word(1) : {};
    word(3) :  continue;
    word(4) : if (m_wParamOb <> word(0)) continue;
    end;

    if (JoiHead.prCOrpo <> byte(0))
      if (CheckObj)
      {
        message ('Одно из объединений, присланное по COrpo обмену'
                 + chr(13) + 'будет отложено, поскольку не существует статуса,'
                 + chr(13) + 'в которую необходимо производить объединение.');
        continue;
      }

    _loop SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                        and (word(3) <> SpJoi.Status) ))
       m_lCount_vis := m_lCount_vis  + 1;//добавить
  }

  if (m_lcount_vis <> 0)
  {
    if (message('Если Вы не сохранили данные, еще раз рекомендуем это сделать.' + chr(13)
              + 'Запустить объединение статусов?', YesNo + mfSwapButtons + Confirmation) = cmNo)
    {
      m_bShowRepTime := false;
      exit;
    }
    StartNewVisual(vtIndicatOrVisual, vfTimer + vfbreak + vfConfirm,''#13#13#13'', m_lcount_vis);
  }
  else
  {
    message ('Нет заданий на объединение.');
    m_bShowRepTime := false;
    m_wParamOb := 0;
    exit;
  }
                  // Цикл по результирующей
  If (GetFirst JoiHead Where ((    m_wCgObedValue == JoiHead.TypeEvent
                               And UserName()         == JoiHead.UserName )) = tsOk )
  do
  {
    case JoiHead.Status of
    word(0) : if (m_wParamOb = word(1)) continue;
    word(1) : {};
    word(3) :  continue;
    word(4) : if (m_wParamOb <> word(0)) continue;
    end;

    if (JoiHead.prCOrpo <> byte(0))
      if (CheckObj) continue;
                        // Пересылка если COrpo
    if (    (m_bCOrpo)
        and (JoiHead.prCOrpo = byte(0))
        and (JoiHead.Status = word(0)))
    {
      ClearBuffer (#EvJoiHead);
      EvJoiHead.FilialNo := OfficeNo();
      EvJoiHead.TypeEvent := m_wCgObedValue;
      EvJoiHead.cRec := JoiHead.cRec;
      EvJoiHead.dDate := Cur_date();
      MemoFile.OpenMemo (EvJoiHead.EvSp);
      MemoFile.Write(JoiHead.rComp);
      _loop SpJoi where ((JoiHead.nRec == SpJoi.cJoiHead))
      {
        MemoFile.Write(SpJoi.cRec);
        MemoFile.Write(SpJoi.Num);
        MemoFile.Write(SpJoi.isDel);
        If (GetFirst KatNotestmp where ((SpJoi.cRec == KatNotestmp.nRec)) = tsOk)
          MemoFile.Write(KatNotestmp.Name);
        Else
          MemoFile.Write(lNotDefine);
      }
      MemoFile.Close;
      insert current EvJoiHead;
    }
    JoiHead.Status := wOrd(1);  // Делаем статус "Начата"
    Update Current JoiHead;
    If ( GetFirst KatNotestmp where (( JoiHead.cRec == KatNotestmp.nrec)) = tsOk ) {};
    iNextVisual('Идет замещение статуса на'#13''+'"'+ trim(KatNotestmp.Name)+'"' +
                ''#13'');
    m_bWriteInfoSpJoi := True;
                //  Цикл по объединяемым

    If (GetFirst SpJoi where (( JoiHead.nRec == SpJoi.cJoiHead And (wOrd(3)<>SpJoi.Status))) = tsOk)
      do
      {
        SpJoi.Status := wOrd(1);
        Update current SpJoi;
        IF Not(NextVisual) ObBreak;
        m_tTimeBeg := Cur_Time;
        UpdateStatusByVidDoc;
        //UpdateTableOneFieldNoIndex(Dogovor, cNote, 'Dogovor with field cNote')
        // Если этап завершен без ошибок для одной рез. МЦ
        If (_nMsgFrm = m_lErrOrSp) SpJoi.Status := wOrd(3);
        else                       SpJoi.Status := wOrd(4);
        Update current SpJoi;

        If (m_lErrOrSp <> _nMsgFrm)
        {
          ErrObAll.PutEventById (feBreak, fcCycleOfErrOrAll);
          ErrObAll.write(_nMsgFrm - m_lErrOrSp);
        }

        m_lErrOrSp := _nMsgFrm;
    } while (GetNext SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                              and (word(3)<>SpJoi.Status) )) = tsOk);

    m_bWriteInfoSpJoi := False;

    If (m_lErrOrJoi <> _nMsgFrm)
    {
      ErrObAll.PutEventById (feBreak, fcCycleOfObAll);
      ErrObAll.write(_nMsgFrm - m_lErrOrJoi);
    }
    // Если объединение без ошибок
    If (_nMsgFrm = m_lErrOrJoi) JoiHead.Status := wOrd(3); // статус "Завершено"
    else                        JoiHead.Status := wOrd(4);
    Update Current JoiHead;      // статус "Завершено с ошибками"

    m_lErrOrJoi := _nMsgFrm;
    m_lErrOrSp := m_lErrOrJoi;
  } while (    (GetNext JoiHead where ((    m_wCgObedValue == JoiHead.TypeEvent
                                        and UserName()     == JoiHead.UserName )) = tsOk)
           and (m_bBreak = false));
  if (_nMsgFrm > 0)
  {
    ErrObAll.PutEventById (feBreak, fcCycleOfResAll);
    ErrObAll.write(_nMsgFrm);
  }
  m_wParamOb := 0;

  if (_nMsgFrm > 0)
  {
    ErrObAll.PutEventById (feBreak, fcCycleOfResAll);
    ErrObAll.write(_nMsgFrm);
  }

  m_wParamOb := 0;
  If (m_lCount_vis <> 0)
  {
    StopVisual('', 0);
    If (_nMsgFrm > 0)  // Если были ошибки во время объединения
    {
      message('Во время объединения произошли ошибки.'
              + chr(13) + 'Просмотрите протокол ошибок и если необходимо,'
              + chr(13) + 'запустите процедуру объединения статусов еще раз.' + chr(13));
      ErrObAll.ShowFile;
    }
  }
  Message('Объединение завершено.');
}

browse JoiStatus;
show at (,,,6);
Table JoiHead;
    recMarker = m_pMarkerUp {JoiHead.Nrec};
  fields
    sObName          'Статус документа (рез. объединения)'
                     ('', hcNastrAdmWOb, sci1378EscInsPMBrigadeDuty) : [12], Protect;
    sDocName         'Документ' ('', hcNastrAdmWOb, sci1Esc) : [12], Protect;
    strFilial        'филиал','───────'('',hcNastrAdmWOb,sci1Esc) : [7], Protect;
    strJoiStatus     'Статус'
                     ('', hcNastrAdmWOb, sci1Esc) : [14], Protect;
    JoiHead.UserName 'Пользователь'('', hcNastrAdmWOb, sci13Esc) : [12], Protect;
    strJoiCOrpo      '№ офиса','───────'('',hcNastrAdmWOb,sci1Esc) : [7], Protect;
end;

TableEvent Table JoiHead;
cmSetDefault :
{
  JoiHead.TypeEvent := m_wCgObedValue;
  JoiHead.Status := word(0);
  JoiHead.UserName := UserName();
  JoiHead.dDate := Cur_Date;
}

cmInsertRecord : insert current JoiHead;
cmUpdateRecord : update current JoiHead;

cmInsert :
{
  case curfield of
  #sObName :
  {
    ClearMarker(MarkerVidD);
    DoneMarker(MarkerVidD,'MKatNotes');
    if (RunInterface('GetSomKatNotes', 0, 0, 0, true, 0) <> cmCancel)
    {
      MarkerVidD := InitMarker('MKatNotes',8,100,10);
      var MarkerCount,i : longint; // счетчики записей в маркере

      MarkerCount := GetMarkerCount(MarkerVidD);

      for (i := 0; i < MarkerCount; i++)
      {
        if GetMarker(MarkerVidD, i, m_cChoiceNrec)
          if (FindExistObj(m_cChoiceNrec))
            continue;
        ClearBuffer (#JoiHead);
        JoiHead.TypeEvent := m_wCgObedValue;
        JoiHead.Status := word(0);
        JoiHead.UserName := UserName();
        JoiHead.dDate := Cur_Date;

        JoiHead.rComp := comp(1);
        JoiHead.cRec := m_cChoiceNrec;
        insert current JoiHead;
        SetFilialInNastrObed(coJoiHead, KatNotes1.Name, KatNotes1.Atl_Branch);

      }
      ReReadRecord(#JoiHead);
      ReDrawPanel(#JoiHead);
      abort;
    }
    else
    {
      MarkerVidD := InitMarker('MKatNotes',8,100,10);
      abort;
    }
  }
  end;
}

cmMarkDelete :
{
  if (curtable = #JoiHead)
  {
    m_bDeleteByMarker := false;
    if (m_pMarkerUp.Count <> 0)
    {
      if (message('Удалить помеченные записи?', yesno + mfSwapButtons + confirmation) = cmYes)
      {
        m_bDeleteByMarker := true;
        stop;
      }
      else abort;
    }
  }
}

cmdeleteRecord :
{
  if not(isValid(tnJoiHead)) exit;
  if (not m_bDeleteByMarker) m_bExistDel := false; // инициализация переменной в случае когда пометки нет для случая обычного удаления

  //#5578 >>>>>>>>>>>>>>>>>
  var _boDiffUser : boolean = (JoiHead.UserName <> UserName());
  if _boDiffUser
    if (not m_bDeleteByMarker)
      if pr_CurUserAdmin
      { if message(lMsgOdebdifferenceUser
          +chr(13)+'Продолжить?' , YesNo)=cmYes
        { _boDiffUser:=false

        }
      }
  //#5578 <<<<<<<<<<<<<<<<<<<<<<<<<
  if _boDiffUser
  {
    if (not m_bDeleteByMarker)
      message(lMsgOdebdifferenceUser
        +chr(13)+'обратитесь к администратору БД', Warning);
    if (m_bExistDel and ((not m_bDeleteByMarker) or (m_bDeleteByMarker and m_pMarkerUp.Count = 0)))
      message('Удаление статусов произведено.', Information + OkButton);
    exit;
  }

  var bRun : boolean; bRun := true;
  if (not m_bDeleteByMarker)
    bRun := message('Удалить запись?', yesno + mfSwapButtons + confirmation) = cmYes;

  if (bRun)
  {
    if (    (JoiHead.Status = word(3))
         Or (JoiHead.Status = word(4)))
    {
      if (getFirst SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                                 and byte(1)      == SpJoi.isDel
                                 and byte(4)      == SpJoi.Status )) = tsOk)
      {
        var bDelFromCatalog : boolean; bDelFromCatalog := false;
        if (not m_bDeleteByMarker)
          bDelFromCatalog := message('Удалять статусы, объединение'
                    + chr(13) + 'которых завершено с ошибками?',
                    yesno + mfSwapButtons + Confirmation) = cmYes;
        if (bDelFromCatalog)
          update SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                               and byte(1)      == SpJoi.isDel
                               and byte(4)      == SpJoi.Status)) set Status := 3;
      }

      _loop SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                          and byte(1)      == SpJoi.isDel
                          and byte(3)      == SpJoi.Status))
      {
        delete KatNotesTmp where ((SpJoi.cRec == KatNotesTmp.nRec));
        m_bExistDel := true;
      }
    }
    delete SpJoi where ((JoiHead.nRec == SpJoi.cJoiHead));
    delete current JoiHead;
    if (m_bExistDel and ((not m_bDeleteByMarker) or (m_bDeleteByMarker and m_pMarkerUp.Count = 0)))
      message('Операция удаления завершена.', Information + OkButton);
  } else Abort;
}  //cmdeleteRecOrd :
end;

handleevent
cmValue1 :
{
  set JoiHead.cRec := m_cChoiceNrec;
  UpdateTable;
  SetFilialInNastrObed(coJoiHead, KatNotes.Name, KatNotes.Atl_Branch);
  ReDrawPanel(#JoiHead);
}

cmPick:
{
  case curfield of
  //-----------
  #sObName :
  {
    if (JoiHead.Status <> 0) exit;
    m_cChoiceNrec := JoiHead.cRec;
    if (RunInterface('GetSomKatNotes', 0, 0, 0, true, m_cChoiceNrec) <> cmCancel)
    {
      #CheckChoiceValueForJoiHeadOnPick
      UpDateTable;
      SetFilialInNastrObed(coJoiHead, KatNotes.Name, KatNotes.Atl_Branch);
      ReReadRecOrd(#JoiHead);
      ReDrawPanel(#JoiHead);
    }
  }
  end; // case*/
}
end; // hanldeevent

browse DriverSpJoi;
show at (,7,,17) ;
Table SpJoi;
fields
    sOb1Name        'Статусы документов, подлежащие объединению'
                    ('', hcNastrAdmWOb, sci1378Esc): [41], Protect;
    strFilial1      'филиал','───────'('',hcNastrAdmWOb, sci1Esc) : [7], Protect;
    strSpJoiStatus  'Статус'
                    ('', hcNastrAdmWOb, sci1Esc)   : [15], Protect;
    cSpJoiDel       'Удалять'
                    ('Изменяется при нажатии на <F3>', hcNastrAdmWOb, sci13Esc)
                                                            : [7], #protectedcentered;
end;// browse

tableEvent Table SpJoi;
cmInsert:
{
  if (JoiHead.UserName <> UserName())
  {
    message (lMsgOdebdifferenceUser, Warning);
    abort; exit;
  }

  if (JoiHead.Status <> 0) {abort; exit;}

  ClearMarker(MarkerVidD);
  DoneMarker(MarkerVidD,'MKatNotes');
  if (RunInterface('GetSomKatNotes', KatNotes.VIDDOC, 0, 0, true, 0) <> cmCancel)
  {
    MarkerVidD := InitMarker('MKatNotes',8,100,10);
    var MarkerCount,i : longint; // счетчики записей в маркере

    MarkerCount := GetMarkerCount(MarkerVidD);

    for (i := 0; i < MarkerCount; i++)
    {
      if GetMarker(MarkerVidD, i, m_cChoiceNrec)
      {
        if (FindExistObj(m_cChoiceNrec))
        {
          continue;
        }
        if (GetFirst KatNotes2 = tsOk)
          if (KatNotes2.Status <> KatNotes.Status)
          {
            message('Объединять можно только те статусы, у которых совпадает поле Status!');
            continue;
          }
      }
      ClearBuffer (#SpJoi);
      SpJoi.cJoiHead := JoiHead.nRec;
      SpJoi.cRec := m_cChoiceNrec;
      SpJoi.Status := word(0);
      SpJoi.IsDel := word(1);
      Insert current SpJoi;
      SetFilialInNastrObed(coSpJoi, KatNotes1.Name, KatNotes1.Atl_Branch);
    }
    ReReadRecord(#SpJoi);
    ReDrawPanel(#SpJoi);
  }
  abort;
}

cmdeleteRecord :
{
  if (JoiHead.UserName <> UserName())
  {
    message (lMsgOdebdifferenceUser, Warning);
    exit;
  }

  if (JoiHead.Status = 0)
    if (message('Удалить запись?', yesno + mfSwapButtons + Confirmation) = cmYes)
      delete current SpJoi;
}
end;

hAndleevent
cmPick :
{

  case curfield of
  #sOb1Name :
  {
    if (JoiHead.Status <> 0) exit;
    m_cChoiceNrec := SpJoi.cRec;
    if (RunInterface('GetSomKatNotes', KatNotes.VIDDOC, 0, 0, true, m_cChoiceNrec) <> cmCancel)
    {
      #CheckChoiceValueForSpJoiOnPick
      ClearBuffer (#SpJoi);
      SpJoi.cJoiHead := JoiHead.nRec;
      SpJoi.cRec := m_cChoiceNrec;
      SpJoi.Status := word(0);
      SpJoi.IsDel := word(1);
      insert current SpJoi;
      SetFilialInNastrObed(coSpJoi, KatNotes1.Name, KatNotes1.Atl_Branch);
      ReReadRecord(#SpJoi);
      ReDrawPanel(#SpJoi);
    }
  }
  #cSpJoiDel :
  {
    if (SpJoi.cRec <> comp(0))
    {
      if (SpJoi.IsDel = word(1)) SpJoi.IsDel := word(0);
      else                       SpJoi.IsDel := word(1);
      update current SpJoi;
      RedrawPanel (#SpJoi);
    }
  }
  end;
}
end; // hAndleevent

// Экран с кнопками
screen ButtonsList;
  show at (,18,,);
  Fields
    m_wFilterByUser ('Изменяется при нажатии на <Пробел>', hcNastrAdmWOb, sci1Esc) : , noprotect;
    m_wCheckTimeObedRep ('Изменяется при нажатии на <Пробел>',hcNastrAdmWOb,sci1Esc): noprotect;
Buttons
  cmObed,Default,,,hcNastrAdmWOb,sci1Esc;
  cmCancel,,,,hcNastrAdmWOb,sci1Esc;
<<
  Показывать объединения
  (.) всех пользователей`      [.] Протокол по времени объединения`
  (.) только свои       `
                             <.~О~бъединить .>         <. О~т~мена .>
>>
end; // screen

hAndleevent

cmCheckField:
{
  case curfield of
  #m_wFilterByUser :
  {
    case m_wFilterByUser of
    0 :  if (BoundActive(tbOnlyUser))     PopBounds (tbOnlyUser);
    1 :  if (not BoundActive(tbOnlyUser)) PushBounds (tbOnlyUser);
    end;
    if (getFirst JoiHead = tsOk) {};

    ReReadRecord(#JoiHead);
    RescanPanel (#JoiHead);
    RescanPanel (#SpJoi);
    SelectPanel (#JoiHead);
    SaveMyDsk (m_wFilterByUser, lFilterByUserOb);
  }
//  #m_wNeedZarRun : SaveMyDsk (m_wNeedZarRun, lNeedZarRunOb);
  #m_wCheckTimeObedRep : SaveMyDsk (m_wCheckTimeObedRep, lCheckTimeObedRepOb);
  end; // case
}

cmInit:
{
  DisableCommand(cmFilterSave);
  MarkerVidD := InitMarker('MKatNotes',8,100,10);
  m_wCodeTable := coKatNotes;
 // функцию можно запускать при выборе режима одного филиала
  if (not CanMayRunObedInFilialDb)
  {
    CloseInterface(cmCancel);
    exit;
  }
  bDBPlatformType := GetDBPlatformType;// читаем тип СУБД

  m_wCgObedValue := cgObedStatus;// присвоение должно быть раньше кода, где используется переменная m_wCgObedValue
  if (not ReadMyDsk (m_wNeedZarRun, lNeedZarRunOb, true)) m_wNeedZarRun := 3;
  if (not ReadMyDsk (m_wFilterByUser, lFilterByUserOb, true)) m_wFilterByUser := 0;
  if (not ReadMyDsk (m_wCheckTimeObedRep, lCheckTimeObedRepOb, true)) m_wCheckTimeObedRep := 0;
  if (m_wFilterByUser = 1) PushBounds (tbOnlyUser);

  m_wParamOb := 0;
  m_bCorpo := InCorpo(m_wCgObedValue);

  if (m_bCorpo)
  {
    DelOutCOrpo(m_wCgObedValue);
    CorpoForUser(m_wCgObedValue);
  }

  if (getFirst tmpJoiHead where ((    m_wCgObedValue == tmpJoiHead.TypeEvent
                                  and UserName()        == tmpJoiHead.UserName
                                  and (word(1)=tmpJoiHead.Status) )) = tsOk )
  {
    m_wParamOb := word(1);
    if (message('Обнаружено незавершенное объединение статусов'
                + chr(13) + 'рекомендуется немедленно продолжить это объединение.'
                + chr(13) + chr(13) + 'Запустить незавершенное объединение?',yesno + Confirmation) = cmYes)
      PutCommand(cmObed);
    else
      CloseInterface (cmCancel);
  }
}

cmDefault:
  AbOrt;

cmHotKeys :
  PutHotCommAnd(RunMenu('ObedDriver_HotKeys_Print'));

cmPrintDoc :
{
  if (frmObedAll.errOr)
  {
    frmObedAll.abortform;
    message('Ошибка при формировании протокола соответствия.' + chr(13)
           +'Возможно, формы ObedAll нет в ресурсе.', CancelButton);
    exit;
  }
  else
    #PrintRelation(KatNotes1,KatNotes,Name,'статусов')
}

cmObed :
{
  _try
  {
    SetFilialBdToStandart;// обработка филиальности (перевод с филиальности в стандарт)
    mtClear (#ExecTime,mfNormal);
    if (m_wParamOb <> 1)
    {
      _loop tmpJoiHead where ((    m_wCgObedValue == tmpJoiHead.TypeEvent
                               and UserName()        == tmpJoiHead.UserName))
      {
        if (getFirst tmpSpJoi where ((tmpJoiHead.nRec == tmpSpJoi.cJoiHead)) <> tsOk)
        {
          var sObjName : string; sObjName := lNotDefine;
          If (GetFirst KatNotesTmp where (( tmpJoiHead.cRec == KatNotesTmp.nrec)) = tsOk )
            sObjName := trim(KatNotesTmp.Name);
          message ('Для результата объединения' + chr(13)
                 + '"' + sObjName + '"' + chr(13)
                 + 'не выбраны статусы, которые необходимо объединять.', CancelButton);
          SetStandartBdToFilial;// обработка филиальности (перевод со стандартной в филиальную)
          exit;
        }
      }
      if (getFirst tmpJoiHead where ((    m_wCgObedValue == tmpJoiHead.TypeEvent
                                      and UserName()        == tmpJoiHead.UserName
                                      and (word(4) = tmpJoiHead.Status) )) = tsOk )
        if (message('Хотите повторять объединение для' + chr(13)
                  + 'завершенных с ошибками статусов?', YesNo + Confirmation) = cmNo)
          m_wParamOb := 2;
    }
    if (IsNotExistNastroikiFromOtherFilials(m_wCgObedValue, m_wCodeTable)) UpdateObj;
  }
  _finally
  {
    SetStandartBdToFilial;// обработка филиальности (перевод со стандартной в филиальную)
  }
  ReReadRecOrd(#JoiHead);
  ReDrawPanel(#JoiHead);
  ReReadRecOrd(#SpJoi);
  ReDrawPanel(#SpJoi);

  If ((m_wCheckTimeObedRep = 1) and m_bShowRepTime)
     #MakeTimeProt('статусов');
}

cmDone:
{
  DoneMarker(MarkerVidD,'MKatNotes');
}
end; //end handleEvent
end. // interface

ObedDriver_HotKeys_Print Menu
{
- 'Печать',cmPrintDoc,'Печать соответствия объединения',, 'Ctrl+P', kbCtrlP, scMenuCtx;
}
