//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 7.12 - Настройка
// Объединение пользовательской аналитики
//********************************************************************************

#INCLUDE Getkau.vih       // объектный интерфейс выбора KAU
#include ExtFpModAn.Vih   // модификация аналитик для "Управления бюджетом"
#include ExtMCURplHAn.Vih // модификация аналитик для L_MCU
#ifndef _ObedKau_
  #define _ObedKau_
#end

// для вызовов ч/з RunInterface
#include GtKauTbl.vih
#include marker.vih // описание объекта и объявление интерфейса
                    // marker c реализацией по умолчанию

#include exectime.dic  // таблица  для хранения результатов по времени объединения
#include filial_macro.vpp// макросы для обработки филиальности
#include MacOb.vpp //макросы (для таблиц, не содержащих кау, и общие)
#define UseGetMarkerMy

#doc
Объединение пользовательской аналитики
#end
Interface UserAnalit 'Пользовательская аналитика' ('Объединение пользовательской аналитики', hcNastrAdmWOb, sci1Esc) EscClose, cyan;
  show at (10,5,120,28);

const
  lMsgOdebdifferenceUser = 'Этим объединением занимается другой пользователь.';
  lFilterByUserOb  = 'FilterByUserObAnalit';
  lNeedZarRunOb    = 'NeedZarRunObAnalit';
  lCheckTimeObedRepOb = 'CheckTimeObedRepObAnalit';
  lChoiceCodeUserAnalit = 'ChoiceCodeUserAnalit';
  lNotDefine = 'Удаленная пользовательская аналитика';
end;

#INCLUDE GetKau.var       // переменная типа "интерфейса выбора KAU"
#include ExtFpModAn.Var   // модификация аналитик для "Управления бюджетом" (pExtFpModAn)
#include ExtMCURplHAn.Var // модификация аналитик для L_MCU (pExtMCURplHAn)
Create View
#INCLUDE obed.var //объявление переменных
  i            : integer;
  CountRecOrdInProcess :integer; //количество записей для визуализации vtDownVisual

  myMarkerSpikokAnalit, myMarkerDel : LongInt;     // Для работы с маркерами
  nMarkers : string[30];
  m_wUserAnalit : word; //код выбранной пользовательской аналитики
  m_tTimeTable  : time;        // начало обработки таблицы
  m_cLastChoiceUserAnalit : comp;// ссылки на аналитику
  m_lMarkerFilials : longInt;// маркер для получения текущих филиалов, если бд филиальна
  m_sTitleRep : string;
  m_sTitleLineOnRep : string;
as Select
  #Strorka_sObName(SpKaU,lNotDefine,Name)
  #Strorka_sOb1Name(SpKaU1,lNotDefine,Name)
//----------------------------------------------------------------------------------
  #InternalFields
//----------------------------------------------------------------------------------
  #InternalFieldsForShowFilial
From
    SpKaU
  , JoiHead
  , SpJoi
  , EvJoiHead
  #TableForFilial
  , SpKaU SpKaU1
  , SpKaU SpKaUTmp
  , JoiHead   tmpJoiHead
  , SpJoi     tmpSpJoi
  , SpJoi     SpJoiTmp
  , EvJoiHead EvJoiHead1
  , KatKau KatKauCheck
  // таблицы перечисленны, чтобы работала функция RecordsInTable
  #include iTable.vpp
  , ExecTime
Where
((
       m_wCgObedValue == JoiHead.TypeEvent // Аналити
   and m_cLastChoiceUserAnalit == JoiHead.rComp (noindex)
   And JoiHead.cRec   == SpKaU.nRec             // Объединение - пользовательские аналитики
   And JoiHead.nRec   == SpJoi.cJoiHead        // Объединение - спецификация
   And SpJoi.cRec     == SpKaU1.nRec           // Спецификация - Пользовательские аналитики
   and m_cLastChoiceUserAnalit == KatKauCheck.Nrec
   #WhereForFilial
))
Bounds  OnlyUser = m_wCgObedValue == JoiHead.TypeEvent
      And UserName()              == JoiHead.UserName
      and m_cLastChoiceUserAnalit == JoiHead.rComp (noindex)
;
File MemoFile;
form CheckinAnalit ('CheckinAnalit.OUT','CheckinAnalit') with NoVisual;
form ErrObAll ('ErrObAnalit.OUT','ErrObAll') with NoVisual;
form TimeObAll ('TimeObAnalit.OUT','TimeObAll') with NoVisual;
form frmObedAll('obedAnalit.out','obedAll') with novisual;
form frmExchngTime('ExchngTime.out', 'ExchngTime') with novisual;
Const
  iCountTableStep3 = 6 * 40 + 70;
end;

var
  m_pMarkerUp   : IMarker(marker) new;

#include obedtime.vpp //процедуры и фукнции по работе с таблицей информации по времени объединения
#include ErrObAll.vpp    // Пакет ошибок
#include printrelat.vpp // отчет замен
#include filial_func.vpp // проверка филиальности
//процедуры и функции обрабатывающие приход реплики с объединеннями  из другого офиса
#include ObFCorpo.vpp
function GetPrintName(cRec : comp) : string;
var
  sResult : string;
{
  sResult := 'Удален';
  If (GetFirst SpKauTmp where ((cRec == SpKauTmp.Nrec)) = tsOk)
    sResult := SpKauTmp.Name;
  result := sResult;
}

procedure DelSpJoi(cRec : comp);
{
  delete all SpJoiTmp where ((cRec == SpJoiTmp.cJoiHead));
}

Function CheckObj : boolean;
{
  #Check_Obj(SpKaUTmp)
}

Procedure ObBreak;  // Прерывание объединения
var
  lcount_out : longint;
{
  lcount_out := VisualCount();
  message('Для прекращения объединения придется'
          + chr(13) + 'подождать до окончания замены на'
          + chr(13) + '"' + trim (SpKauTmp.Name) + '".', Information + OkButton);

  ReStartVisual('Идет замещение пользовательской аналитики на'#13'' + '"' + trim(SpKauTmp.Name)
                +'"' + ''#13'', m_lcount_vis);
  NNextVisual (lcount_out);
  m_bBreak := true;
}

Function FindExistObj(cNRecAnalit : comp) : boolean;  // Проверка не участвует ли уже
                                                 // пользовательская аналитика в объединении
var
  sObjUp, sObjDown : string[80]; // Временная для получения имени
{
  result := False;
  _Loop tmpJoiHead where ((    m_wCgObedValue          == tmpJoiHead.TypeEvent
                           and m_cLastChoiceUserAnalit == tmpJoiHead.rComp (noindex)))
  {
    sObjUp := lNotDefine;
    If (tmpJoiHead.cRec = cNRecAnalit)
    {
      If ( GetFirst SpKauTmp where ((cNRecAnalit == SpKauTmp.nrec)) = tsOk )
        sObjUp := trim (SpKauTmp.Name);
      result := True;
      Message ('Пользовательская аналитика ' + '"' + sObjUp + '"' +chr(13) +
               'уже выбрана как результирующая.');
      exit;
    }
    sObjDown := lNotDefine;
    _loop tmpSpJoi where ((    tmpJoiHead.nRec == tmpSpJoi.cJoiHead
                           and cNRecAnalit     == tmpSpJoi.cRec))
    {
      If (GetFirst SpKautmp where ((cNRecAnalit == SpKauTmp.nrec)) = tsOk )
        sObjDown := trim (SpKauTmp.Name);
      If ( GetFirst SpKauTmp where ((tmpJoiHead.cRec == SpKauTmp.nrec)) = tsOk )
        sObjUp := trim (SpKauTmp.Name);
      result := True;
      Message ('Пользовательская аналитика ' + '"' + sObjDown + '"' + chr(13)
             + 'уже выбрана для объединения в' + chr(13) + '"' + sObjUp + '".');
      Exit;
    }
  }
}
#include Cor_Kau.vpp   // KAU

Function UpdateObj : boolean;
var
  lCount_sin : longint;
{
  m_bBreak    := False;
  result:= False;
  m_bShowRepTime := true;
  _nMsgFrm  := 0;          // Общее число ошибок
  m_lErrOrJoi  := 0;
  m_lErrOrSp   := 0;
  m_lCount_vis := 0;
  lCount_sin := 0;

  _loop JoiHead Where ((m_wCgObedValue          == JoiHead.TypeEvent
                    and UserName()              == JoiHead.UserName
                    and m_cLastChoiceUserAnalit == JoiHead.rComp (noindex)))
  {
    case JoiHead.Status of
    word(0) : if (m_wParamOb = word(1)) continue;
    word(1) : {};
    word(3) :  continue;
    word(4) : if (m_wParamOb <> word(0)) continue;
    end;

    if (JoiHead.prCOrpo <> byte(0))
      if (CheckObj)
      {
        message ('Одно из объединений, присланное по COrpo обмену'
                 + chr(13) + 'будет отложено, поскольку не существует пользовательской аналитики,'
                 + chr(13) + 'в которую необходимо производить объединение.');
        continue;
      }
    _Loop KatKau where ((0             == KatKau.isActive
                     and m_wUserAnalit == KatKau.UpGroup ))
      lCount_sin := lCount_sin + 1;

    _loop SpJoi where ((JoiHead.nRec == SpJoi.cJoiHead
                    and (wOrd(3) <> SpJoi.Status)))
      m_lCount_vis := m_lCount_vis  + ( lCount_sin + 1 ) * iCountTableStep3;//добавить
  }

  If (m_lCount_vis <> 0)
  {
    if (message('Если Вы не сохранили данные, еще раз рекомендуем это сделать.' + chr(13)
              + 'Запустить объединение пользовательских аналитик?', YesNo + mfSwapButtons + Confirmation) = cmNo)
    {
      m_bShowRepTime := false;
      exit;
    }
    StartNewVisual(vtIndicatOrVisual, vfTimer + vfBreak + vfConfirm,''#13#13#13'',m_lCount_vis);
  }
  Else
  {
    message ('Нет заданий на объединение.');
    m_wParamOb := 0;
    m_bShowRepTime := false;
    exit;
  }
  MyMarker:=InitMarker('',8,50,50,False);
                // Цикл по результирующей
  var iCountRecJoiHead : integer;
  iCountRecJoiHead := 0;
  If (GetFirst JoiHead Where ((m_wCgObedValue          == JoiHead.TypeEvent
                           and UserName()              == JoiHead.UserName
                           and m_cLastChoiceUserAnalit == JoiHead.rComp (noindex))) = tsOk )
  do
  {
    case JoiHead.Status of
    word(0) : if (m_wParamOb = word(1)) continue;
    word(1) : {};
    word(3) :  continue;
    word(4) : if (m_wParamOb <> word(0)) continue;
    end;

    if (JoiHead.prCOrpo <> byte(0))
      if (CheckObj) continue;
                        // Пересылка если COrpo
    if (    (m_bCOrpo)
        and (JoiHead.prCOrpo = byte(0))
        and (JoiHead.Status = word(0)))
    {
      ClearBuffer (#EvJoiHead);
      EvJoiHead.FilialNo := OfficeNo();
      EvJoiHead.TypeEvent := m_wCgObedValue;
      EvJoiHead.cRec := JoiHead.cRec;
      EvJoiHead.dDate := Cur_date();
      MemoFile.OpenMemo (EvJoiHead.EvSp);
      MemoFile.Write(JoiHead.rComp);
      _loop SpJoi where ((JoiHead.nRec == SpJoi.cJoiHead))
      {
        MemoFile.Write(SpJoi.cRec);
        MemoFile.Write(SpJoi.Num);
        MemoFile.Write(SpJoi.isDel);
/*
        If (GetFirst SpKautmp where ((SpJoi.cRec == SpKautmp.nRec)) = tsOk)
          MemoFile.Write(SpKautmp.Name);
        Else
          MemoFile.Write(lNotDefine);
*/
      }
      MemoFile.Close;
      insert current EvJoiHead;
    }
    JoiHead.Status := wOrd(1);  // Делаем статус "Начата"
    Update Current JoiHead;
    If ( GetFirst SpKauTmp where (( JoiHead.cRec == SpKauTmp.nrec)) = tsOk ) {};
    iNextVisual('Идет замещение пользовательской аналитики на'#13'' + '"' + trim(SpKauTmp.Name) + '"' +
                ''#13'');
    m_bWriteInfoSpJoi := True;
                //  Цикл по объединяемым
    var iCountRecSpJoi : integer;
    iCountRecSpJoi := 0;
    If (GetFirst SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                               and (wOrd(3)<>SpJoi.Status))) = tsOk)
    do
    {
      SpJoi.Status := wOrd(1);
      Update current SpJoi;
      UpdateKau(SpJoi.cRec, JoiHead.cRec, m_wUserAnalit, true, SpKaU.Name);

      if Not(NextVisual) ObBreak;
      m_tTimeBeg := Cur_Time;

      pExtFpModAn  .ReplaceAnMean(m_wUserAnalit, SpJoi.cRec, JoiHead.cRec);
      InsExecTime(SpJoi.cRec, JoiHead.cRec,'интерфейс ExtFpModAn'  , m_tTimeBeg, Cur_Time);
      pExtMCURplHAn.ReplaceAnMean(m_wUserAnalit, SpJoi.cRec, JoiHead.cRec);
      InsExecTime(SpJoi.cRec, JoiHead.cRec,'интерфейс ExtMCURplHAn', m_tTimeBeg, Cur_Time);

      // Если этап завершен без ошибок для одной рез. МЦ
      if (_nMsgFrm = m_lErrOrSp) SpJoi.Status := wOrd(3);
      else                       SpJoi.Status := wOrd(4);
      update current SpJoi;
      if (m_lErrOrSp <> _nMsgFrm)
      {
        ErrObAll.PutEventById (feBreak, fcCycleOfErrOrAll);
        ErrObAll.write(_nMsgFrm - m_lErrOrSp);
      }
      m_lErrOrSp := _nMsgFrm;
    }  While (GetNext SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                                    and (wOrd(3)<>SpJoi.Status))) = tsOk);

    m_bWriteInfoSpJoi := False;
    if (m_lErrOrJoi <> _nMsgFrm)
    {
      ErrObAll.PutEventById (feBreak, fcCycleOfObAll);
      ErrObAll.write(_nMsgFrm - m_lErrOrJoi);
    }
    // Если объединение без ошибок
    if (_nMsgFrm = m_lErrOrJoi) JoiHead.Status := wOrd(3); // статус "Завершено"
    else                        JoiHead.Status := wOrd(4);
    update Current JoiHead;      // статус "Завершено с ошибками"
    m_lErrOrJoi := _nMsgFrm;
    m_lErrOrSp := m_lErrOrJoi;
  }
  While ((GetNext JoiHead where ((m_wCgObedValue          == JoiHead.TypeEvent
                              and UserName()              == JoiHead.UserName
                              and m_cLastChoiceUserAnalit == JoiHead.rComp (noindex))) = tsOk)
      and(m_bBreak = False));
  If (_nMsgFrm > 0)
  {
    ErrObAll.PutEventById (feBreak, fcCycleOfResAll);
    ErrObAll.write(_nMsgFrm);
  }
  m_wParamOb := 0;
  DoneMarker (MyMarker, '');

  If (m_lCount_vis <> 0)
  {
    StopVisual('',0);
    If( _nMsgFrm > 0)  // Если были ошибки во время объединения
    {
      message('Во время объединения произошли ошибки !'
              + chr(13) + 'Просмотрите протокол ошибок и если необходимо,'
              + chr(13) + 'запустите процедуру объединения пользовательских аналитик еще раз.' + chr(13));
      ErrObAll.ShowFile;
    }
  }
  Message('Объединение завершено.');
}

Screen scrUserAnalit;
show at (,1,,1);
noTableNavigation;
fields
    'Пользовательская аналитика:' : {font = {bold = true}}, skip;
    KatKauCheck.Name ('Пользовательская аналитика',, sci13Esc) : protect;
<<
         .@@@@@@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; //screen scrUserAnalit

browse JoiAnalit;
show at (,2,,6);
Table JoiHead;
  recMarker = m_pMarkerUp {JoiHead.Nrec};
fields
  sObName          'Наим. пользовательской аналитики (рез.объединения)'
                   ('', hcNastrAdmWOb, sci1378EscInsPMBrigadeDuty) : [32], Protect;
  strFilial        'филиал','───────'('',hcNastrAdmWOb,sci1Esc) : [7], Protect;
  strJoiStatus     'Статус'
                   ('', hcNastrAdmWOb, sci1Esc) : [14], Protect;
  JoiHead.UserName 'Пользователь'('', hcNastrAdmWOb, sci13Esc) : [12], Protect;
  strJoiCOrpo      '№ офиса','───────'('',hcNastrAdmWOb,sci1Esc) : [7], Protect;
end;

TableEvent Table JoiHead;
cmSetDefault :
{
  JoiHead.TypeEvent := m_wCgObedValue;
  JoiHead.Status := word(0);
  JoiHead.UserName := UserName();
  JoiHead.dDate := Cur_Date;
}

cmInsertRecord : insert current JoiHead;
cmUpdateRecord : update current JoiHead;

cmInsert :
{
  case curfield of
  #sObName :
  {
    if ( m_cLastChoiceUserAnalit = 0)
      if (RunInterface('GetKauTable', cgiPick,cgKatKau_AllDisabledWithoutUser, m_wUserAnalit, m_cLastChoiceUserAnalit)<> cmCancel)
      { Abort; Stop; Exit; }

    var MultiKau : longint;
    m_cChoiceNrec := JoiHead.cRec;
    MultiKau := iGetKau.GetCodeKau(cgiPick, m_wUserAnalit, m_cChoiceNrec);
    if (MultiKau = 1)
    {
      if (not FindExistObj(m_cChoiceNrec)) putCommand(cmValue1);
      else abort;
    }
    else abort;
  }
  end;
}

cmMarkDelete :
{
  if (curtable = #JoiHead)
  {
    m_bDeleteByMarker := false;
    if (m_pMarkerUp.Count <> 0)
    {
      if (message('Удалить помеченные записи?', yesno + mfSwapButtons + confirmation) = cmYes)
      {
        m_bDeleteByMarker := true;
        stop;
      }
      else abort;
    }
  }
}

cmDeleteRecord :
{
  if not(isValid(tnJoiHead)) exit;
  if (not m_bDeleteByMarker) m_bExistDel := false; // инициализация переменной в случае когда пометки нет для случая обычного удаления
  if (not m_bDeleteByMarker) m_bExistDel := false; // инициализация переменной в случае когда пометки нет для случая обычного удаления
  //#5578 >>>>>>>>>>>>>>>>>
  var _boDiffUser : boolean = (JoiHead.UserName <> UserName());
  if _boDiffUser
    if (not m_bDeleteByMarker)
      if pr_CurUserAdmin
      { if message(lMsgOdebdifferenceUser
          +chr(13)+'Продолжить?' , YesNo)=cmYes
        { _boDiffUser:=false

        }
      }
  //#5578 <<<<<<<<<<<<<<<<<<<<<<<<<
  if _boDiffUser
  {
    if (not m_bDeleteByMarker)
      message(lMsgOdebdifferenceUser
        +chr(13)+'обратитесь к администратору БД', Warning);
    if (m_bExistDel and ((not m_bDeleteByMarker) or (m_bDeleteByMarker and m_pMarkerUp.Count = 0)))
      message('Удаление из каталога МЦ произведено.', Information + OkButton);
    exit;
  }

  var bRun : boolean; bRun := true;
  if (not m_bDeleteByMarker)
    bRun := message('Удалить запись?', yesno + mfSwapButtons + confirmation) = cmYes;

  if (bRun)
  {
    if (    (JoiHead.Status = word(3))
         Or (JoiHead.Status = word(4)))
    {
      if (getFirst SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                                 and byte(1)      == SpJoi.isDel
                                 and byte(4)      == SpJoi.Status )) = tsOk)
      {
        var bDelFromCatalog : boolean; bDelFromCatalog := false;
        if (not m_bDeleteByMarker)

        m_bDeleteByMarker := message('Удалять из каталога пользовательских аналитик, объединение'
                    + chr(13) + 'которых завершено с ошибками?',
                    yesno + mfSwapButtons + Confirmation) = cmYes;
        if (m_bDeleteByMarker)
          update SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                               and byte(1)      == SpJoi.isDel
                               and byte(4)      == SpJoi.Status)) set Status := 3;
      }

      _loop SpJoi where ((    JoiHead.nRec == SpJoi.cJoiHead
                          and byte(1)      == SpJoi.isDel
                          and byte(3)      == SpJoi.Status))
      {
        delete SpKaUTmp where ((SpJoi.cRec == SpKaUTmp.nRec));
        m_bExistDel := true;
      }
    }
    delete SpJoi where ((JoiHead.nRec == SpJoi.cJoiHead));
    delete current JoiHead;
    if (m_bExistDel and ((not m_bDeleteByMarker) or (m_bDeleteByMarker and m_pMarkerUp.Count = 0)))
      Message('Удаление из каталога пользовательских аналитик произведено.', InfOrmation + OkButton);
  } else Abort;
}
end;

handleevent
cmValue1 :
{
  set JoiHead.rComp := m_cLastChoiceUserAnalit;
  set JoiHead.cRec := m_cChoiceNrec;
  UpdateTable;
  SetFilialInNastrObed(coJoiHead, SpKaU.Name, SpKaU.Atl_Branch);
  ReDrawPanel(#JoiHead);
}

cmPick:
{
  case CurField of
  #sObName :
  {
    #Check_Pick(JoiHead)

    if (JoiHead.Status <> 0) exit;
    m_cChoiceNrec := JoiHead.cRec;
    var MultiKau : longint;
    MultiKau := iGetKau.GetCodeKau(cgiPick, m_wUserAnalit, m_cChoiceNrec);
    if (MultiKau = 1)
    {
      #CheckChoiceValueForJoiHeadOnPick
      set JoiHead.rComp := m_cLastChoiceUserAnalit;
      UpDateTable;
      SetFilialInNastrObed(coJoiHead, SpKaU.Name, SpKaU.Atl_Branch);
      ReReadRecOrd(#JoiHead);
      ReDrawPanel(#JoiHead);
    }
  }
  #KatKauCheck.Name :
  {
    if (RunInterface('GetKauTable', cgiPick, cgKatKau_AllDisabledWithoutUser, m_wUserAnalit, m_cLastChoiceUserAnalit) <> cmCancel)
    {
      SaveMyDsk(m_wUserAnalit, lChoiceCodeUserAnalit);
      ReReadRecord(#JoiHead);
      ReReadRecord(#SpJoi);
    }
  }
  end; // case
}
end; // hanldeevent

browse AnalitSpJoi;
show at (,7,,17) ;
Table SpJoi;
fields
  sOb1Name        'Наим. пользовательских аналитик, подлежащих объединению'
                  ('', hcNastrAdmWOb, sci1378Esc): [41], Protect;
  strFilial1      'филиал','───────'('',hcNastrAdmWOb, sci1Esc) : [7], Protect;
  strSpJoiStatus  'Статус'
                  ('', hcNastrAdmWOb, sci1Esc)   : [15], Protect;
  cSpJoiDel       'Удалять'
                  ('Изменяется при нажатии на <F3>', hcNastrAdmWOb, sci13Esc)
                                                          : [7], #protectedcentered;
end;// browse

tableEvent Table SpJoi;
cmInsert:
{
  if (JoiHead.UserName <> UserName())
  {
    message (lMsgOdebdifferenceUser, Warning);
    abort; exit;
  }

  if (JoiHead.Status <> 0) {abort; exit;}
  m_cChoiceNrec := SpJoi.cRec;
  var MultiKau : longint;
  MultiKau := iGetKau.GetCodeKau(cgiMulti, m_wUserAnalit, m_cChoiceNrec);
  if (MultiKau = 1)
  {
    if (FindExistObj(m_cChoiceNrec))
    {
      abort;
      exit;
    }
    ClearBuffer (#SpJoi);
    SpJoi.cJoiHead := JoiHead.nRec;
    SpJoi.cRec := m_cChoiceNrec;
    SpJoi.Status := WOrd(0);
    SpJoi.IsDel := wOrd(1);
    Insert current SpJoi;
    SetFilialInNastrObed(coSpJoi, SpKaU1.Name, SpKaU1.Atl_Branch);
    ReReadRecOrd(#SpJoi);
    ReDrawPanel(#SpJoi);
  }
  else if (MultiKau > 1)
  {
    var UnikMarker : TPtr;
    nMarkers := iGetKau.GetMarkerName(m_wUserAnalit);
    UnikMarker := InitMarker(nMarkers,8,200,100,false);
    FOR (i := 0; i <= GetMarkerCount(UnikMarker)-1; i:=i+1)
    {
      GetMarker(UnikMarker, i, m_cChoiceNrec);
      if (FindExistObj(m_cChoiceNrec)) continue;

      ClearBuffer (#SpJoi);
      SpJoi.cJoiHead := JoiHead.nRec;
      SpJoi.cRec := m_cChoiceNrec;
      SpJoi.Status := WOrd(0);
      SpJoi.IsDel := wOrd(1);
      Insert current SpJoi;
      SetFilialInNastrObed(coSpJoi, SpKaU1.Name, SpKaU1.Atl_Branch);
    }
    if (i > 0)
    {
      ReReadRecOrd(#SpJoi);
      ReDrawPanel(#SpJoi);
    }
    clearmarker(unikMarker);
    donemarker(unikMarker, nMarkers);
  }
  else abort;
}

cmdeleteRecord :
{
  if (JoiHead.UserName <> UserName())
  {
    message (lMsgOdebdifferenceUser, Warning);
    exit;
  }

  if (JoiHead.Status = 0)
    if (message('Удалить запись?', yesno + mfSwapButtons + Confirmation) = cmYes)
      delete current SpJoi;
}
end;

hAndleevent
cmPick :
{
  #Check_Pick(SpJoi)

  case CurField of
  #sOb1Name :
  {
    if (JoiHead.Status <> 0) exit;
    var MultiKau : longint;
    m_cChoiceNrec := SpJoi.cRec;
    MultiKau := iGetKau.GetCodeKau(cgiPick, m_wUserAnalit, m_cChoiceNrec);
    if (MultiKau = 1)
    {
      #CheckChoiceValueForSpJoiOnPick
      ClearBuffer (#SpJoi);
      SpJoi.cJoiHead := JoiHead.nRec;
      SpJoi.cRec := m_cChoiceNrec;
      SpJoi.Status := WOrd(0);
      SpJoi.IsDel := wOrd(1);
      Insert current SpJoi;
      SetFilialInNastrObed(coSpJoi, SpKaU1.Name, SpKaU1.Atl_Branch);
      ReReadRecOrd(#SpJoi);
      ReDrawPanel(#SpJoi);
    }
  }
  #cSpJoiDel :
  {
    if (SpJoi.cRec <> comp(0))
    {
      if (SpJoi.IsDel = word(1)) SpJoi.IsDel := word(0);
      else                       SpJoi.IsDel := word(1);
      update current SpJoi;
      RedrawPanel (#SpJoi);
    }
  }
  end;
}
end; // hAndleevent

// Экран с кнопками
screen ButtonsList;
  show at (,18,,);
  Fields
    m_wFilterByUser ('Изменяется при нажатии на <Пробел>', hcNastrAdmWOb, sci1Esc) : , noprotect;
    m_wCheckTimeObedRep ('Изменяется при нажатии на <Пробел>',hcNastrAdmWOb,sci1Esc): noprotect;
    m_wNeedZarRun ('Изменяется при нажатии на <Пробел>',hcNastrAdmWOb,sci1Esc): noprotect;
Buttons
  cmObed,Default,,,hcNastrAdmWOb,sci1Esc;
  cmCancel,,,,hcNastrAdmWOb,sci1Esc;
<<
  Показывать объединения                                         Включить в обработку таблицы модуля 'Заработная плата':
  (.) всех пользователей`  [.] Протокол по времени объединения`  [.] таблицы с архивной информацией`
  (.) только свои`                                               [.] таблицы с текущей информацией`
                              <.~О~бъединить .>         <. О~т~мена .>
>>
end; // screen

hAndleevent

cmCheckField :
{
  case curfield of
  #m_wFilterByUser :
  {
    case m_wFilterByUser of
    0 :  if (BoundActive(tbOnlyUser))     PopBounds (tbOnlyUser);
    1 :  if (not BoundActive(tbOnlyUser)) PushBounds (tbOnlyUser);
    end;
    if (getFirst JoiHead = tsOk) {};

    ReReadRecord(#JoiHead);
    RescanPanel (#JoiHead);
    RescanPanel (#SpJoi);
    SelectPanel (#JoiHead);
    SaveMyDsk (m_wFilterByUser, lFilterByUserOb);
  }
  #m_wNeedZarRun : SaveMyDsk (m_wNeedZarRun, lNeedZarRunOb);
  #m_wCheckTimeObedRep : SaveMyDsk (m_wCheckTimeObedRep, lCheckTimeObedRepOb);
  end; // case
}

cmInit:
{
  DisableCommand(cmFilterSave);
  m_wCodeTable := coSpKaU;
// функцию можно запускать при выборе режима одного филиала
  if (not CanMayRunObedInFilialDb)
  {
    CloseInterface(cmCancel);
    exit;
  }

  bDBPlatformType := GetDBPlatformType;// читаем тип СУБД
  m_wCgObedValue := cgObedAnalit;// присвоение должно быть раньше кода, где используется переменная m_wCgObedValue
  if (not ReadMyDsk (m_wNeedZarRun, lNeedZarRunOb, true)) m_wNeedZarRun := 3;
  if (not ReadMyDsk (m_wFilterByUser, lFilterByUserOb, true)) m_wFilterByUser := 0;
  if (not ReadMyDsk (m_wCheckTimeObedRep, lCheckTimeObedRepOb, true)) m_wCheckTimeObedRep := 0;
  if (m_wFilterByUser = 1) PushBounds (tbOnlyUser);
  if (not ReadMyDsk (m_wUserAnalit, lChoiceCodeUserAnalit, true))
  {
    m_cLastChoiceUserAnalit := 0;
    m_wUserAnalit := 0;
  }
  else if (GetFirst KatKau where ((m_wUserAnalit == KatKau.KodGroup)) = tsOk)
    m_cLastChoiceUserAnalit := KatKau.Nrec;
  //RescanPanels;
  m_wParamOb := 0;
  m_bCOrpo := InCorpo(m_wCgObedValue);
  If (m_bCOrpo)
  {
    DelOutCOrpo(m_wCgObedValue);
    CorpoForUser(m_wCgObedValue);
  }

  If (GetFirst tmpJoiHead where ((m_wCgObedValue          == tmpJoiHead.TypeEvent
                              and UserName()              == tmpJoiHead.UserName
                              and m_cLastChoiceUserAnalit == tmpJoiHead.rComp (noindex)
                              and (WOrd(1)                = tmpJoiHead.Status))) = tsOk )
  {
    m_wParamOb := word(1);
    if (message('Обнаружено незавершенное объединение пользовательских аналитик'
                + chr(13) + 'рекомендуется немедленно продолжить это объединение.'
                + chr(13) + chr(13) + 'Запустить незавершенное объединение?',yesno + Confirmation) = cmYes)
      PutCommand(cmObed);
    else
      CloseInterface (cmCancel);
  }
}

cmDefault:
  AbOrt;

cmHotKeys :
  PutHotCommAnd(RunMenu('ObedAnalit_HotKeys_Print'));

cmPrintDoc :
{
  if (frmObedAll.errOr)
  {
    frmObedAll.abortform;
    message('Ошибка при формировании протокола соответствия.' + chr(13)
           +'Возможно, формы ObedAll нет в ресурсе.', CancelButton);
    exit;
  }
  else
    #PrintRelation(SpKaU1,SpKaU,Name,'пользовательских аналитик')
}

cmObed :
{
  _try
  {
    SetFilialBdToStandart;// обработка филиальности (перевод с филиальности в стандарт)
    mtClear(#ExecTime, mfNormal);
    If (m_wParamOb <> 1)
    {
      _loop tmpJoiHead where ((m_wCgObedValue          == tmpJoiHead.TypeEvent
                           and UserName()              == tmpJoiHead.UserName
                           and m_cLastChoiceUserAnalit == tmpJoiHead.rComp (noindex)))
      {
        if (GetFirst tmpSpJoi where ((tmpJoiHead.nRec == tmpSpJoi.cJoiHead)) <> tsOk)
        {
          var sObjName : string; sObjName := lNotDefine;
          If (GetFirst SpKaUTmp where (( tmpJoiHead.cRec == SpKaUTmp.nrec)) = tsOk )
            sObjName := trim(SpKaUTmp.Name);
          message ('Для результата объединения' + chr(13)
                 + '"' + sObjName + '"' + chr(13)
                 + 'не выбраны пользовательские аналитики, которые необходимо объединять.', CancelButton);
          SetStandartBdToFilial;// обработка филиальности (перевод со стандартной в филиальную)
          exit;
        }
      }

      If (GetFirst tmpJoiHead where ((m_wCgObedValue          == tmpJoiHead.TypeEvent
                                  and UserName()              == tmpJoiHead.UserName
                                  and m_cLastChoiceUserAnalit == tmpJoiHead.rComp (noindex)
                                  and(WOrd(4)=tmpJoiHead.Status) )) = tsOk )
        if (message('Хотите повторять объединение для' + chr(13)
                  + 'завершенных с ошибками пользовательских аналитик?', YesNo + Confirmation) = cmNo)
          m_wParamOb := 2;
    }
    if (IsNotExistNastroikiFromOtherFilials(m_wCgObedValue, m_wCodeTable)) UpdateObj;
  }
  _finally
  {
    SetStandartBdToFilial;// обработка филиальности (перевод со стандартной в филиальную)
  }
  ReReadRecOrd(#JoiHead);
  ReDrawPanel(#JoiHead);
  ReReadRecOrd(#SpJoi);
  ReDrawPanel(#SpJoi);
  if ((m_wCheckTimeObedRep = 1) and m_bShowRepTime)
    #MakeTimeProt('пользовательской аналитики');
}

cmDone:
{
}
end; //end handleEvent
end. // interface

ObedAnalit_HotKeys_Print Menu
{
- 'Печать',cmPrintDoc,'Печать соответствия объединения',, 'Ctrl+P', kbCtrlP, scMenuCtx;
}
