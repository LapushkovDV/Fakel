//------------------------------------------------------------------------------
//Назначение    : Функции, обрабатыающие информации о приходе объединений
//                по реплике, а также возможность запуска функции объединения
// Ответственный : Михайлов Сергей Константиночив (Michailov)
//------------------------------------------------------------------------------

//процедура удаления информации объединения пришедшее по реплике
Procedure DelOutCOrpo(constObedType : word);
{
  delete EvJoiHead where ((wOrd(constObedType) == EvJoiHead.TypeEvent And
                           OfficeNo() == EvJoiHead.FilialNo And
                           Sub_Months(Cur_date(),1) >> EvJoiHead.dDate ));
}
/*
DelOutCOrpo(cgObedKontr)
DelOutCOrpo(cgObedMc)
DelOutCOrpo(cgObedMol)
DelOutCOrpo(cgObedSklad)
DelOutCOrpo(cgObedUsl)
DelOutCOrpo(cgObedAnalit)

*/
//процедура уведомления пользователя о приходе реплики с информациий об объединениях
Procedure CorpoForUser(constObedType : word);
{
  If(GetFirst JoiHead where (( wOrd(constObedType) == JoiHead.TypeEvent And
                               '' == JoiHead.UserName And
                               (byte(0) <> JoiHead.prCOrpo))) = tsOk)
    If (Message (chr(3)+'Из другого офиса пришли данные на объединение !'+chr(13)+
         chr(13)+chr(3)+'Вы будете производить эти объединения ?',yesno) = cmYes)
      WHILE (GetFirst JoiHead where (( wOrd(constObedType) == JoiHead.TypeEvent And
                                       '' == JoiHead.UserName And
                                       (byte(0) <> JoiHead.prCOrpo))) = tsOk)
      {
        JoiHead.UserName := UserName();
        Update current JoiHead;
      }
}
/*
CorpoForUser(cgObedKontr)
CorpoForUser(cgObedMc)
CorpoForUser(cgObedMol)
CorpoForUser(cgObedSklad)
CorpoForUser(cgObedUsl)
CorpoForUser(cgObedAnalit)
*/
//функция добавления объединений пришедших по корпо из другого офиса
Function InCOrpo(constObedType : word) : boolean;
{
  Var bUpdat : boolean;

  InCOrpo := False;
  bUpdat := False;
  InCOrpo := True;
  If (GetFirst EvJoiHead where ((wOrd(constObedType) == EvJoiHead.TypeEvent And
                                 (EvJoiHead.FilialNo<>OfficeNo()) )) = tsOk)
  do
  {
    If (bUpdat)
    {
      delete current EvJoiHead1;
      bUpdat := False;
    }
    ClearBuffer (#JoiHead);
    JoiHead.TypeEvent := wOrd(constObedType);
    JoiHead.cRec := EvJoiHead.cRec;
    JoiHead.dDate := Cur_date();
    JoiHead.prCOrpo := byte(EvJoiHead.FilialNo);

    MemoFile.OpenMemo (EvJoiHead.EvSp);
    if (   (constObedType = cgObedKontr) //для объединения контрагентов и банков мемо поле сохраняется
        or (constObedType = cgObedBank)    //еще и информация из записи таблицы JoiHead
        or (constObedType = cgObedAnalit))
      MemoFile.Read(JoiHead.rComp);   // для других объединения такого нет.

    insert current JoiHead;
    SetFilialInNastrObed(coJoiHead, 'Запись пришедшая по Корпо', m_cCurrentFilial);
    while (not(MemoFile.Eof))
    {
      ClearBuffer (#SpJoi);
      SpJoi.cJoiHead := JoiHead.nRec;
      MemoFile.Read (SpJoi.cRec);
      MemoFile.Read (SpJoi.Num);
      MemoFile.Read (SpJoi.isDel);
/*
      var strTemp : string[150];
      strTemp := '';
      if (constObedType = cgObedKontr) //для объединнения контрагентов в таблице KatOrg
      {                                //длина поля изменилась с 80 символов на 150
         MemoFile.Read(strTemp);
         SpJoi.Name := strTemp;
      }
      else                            // в других обединениях длина осталась прежней 80 символов
        MemoFile.Read (SpJoi.Name);   // как и длина поля SpJoi.Name поэтому сделано такое разделение
*/
      insert current SpJoi;
      SetFilialInNastrObed(coSpJoi, 'Запись пришедшая по Корпо', m_cCurrentFilial);
    }
    MemoFile.Close;
    GetFirst EvJoiHead1 where ((EvJoiHead.nRec == EvJoiHead1.nRec));
    bUpdat := True;
  } while (GetNext EvJoiHead where ((wOrd(constObedType) == EvJoiHead.TypeEvent And
                                     (EvJoiHead.FilialNo<>OfficeNo()) )) = tsOk);
  If (bUpdat)
  {
    delete current EvJoiHead1;
    bUpdat := False;
  }
  
}
/*
InCorpo(cgObedKontr,coKatOrg)
InCorpo(cgObedMc,coKatMC)
InCorpo(cgObedMol,coKatMol)
InCorpo(cgObedSklad,coKatPodr)
InCorpo(cgObedUsl,coKatUsl)
InCorpo(cgObedAnalit,coKatKau)
*/
