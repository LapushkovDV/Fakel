/*************************************************************************************************\
* Наименование: Ведение телефонного справочника                                                   *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/



//************************************************************
const
end;
Interface ImportOstatki 'Шаблоны объектов штрихкодирования. Просмотр/редактирование';
#include VarsTypes.var
Table Struct tFiles
(
    nrec    : comp
  , cFile   : string
  , FlagErr : byte
  , Descr   : string
)
with index
(
   Index1 = nrec (surrogate, unique)
  ,Index2 = cFile
)
;
Table Struct tInsertDocs6062
(
    nrec       : comp
  , ctFiles      : comp
  , schetBU    : string     // СчетБУ'
  , UIDorg     : string     // UID_Контрагент // НаименованиеКонтрагент'
  , INNorg     : string      // ИННКонтрагент
  , cOrg       : comp
  , UIDdogovor : string     // UID_Договор // ДатаДоговор' // НомерДоговор
  , dogdate    : date
  , dognodoc   : string
  , cDogovor   : comp
  , cCALPLAN   : comp
  , soprdSopr  : date       // ДатаНакладной
  , soprnSopr  : string     // НомерНакладной
  , plpordDoc  : date       // НомерПП
  , plporNoDoc : string     // НомерПП
  , summa      : double     // СуммаБУ
  , Descr      : string
  , FlagErr    : byte
  , filerow    : word
//        ВидВзаиморасчетов'
)
with index
(
   Index1 = nrec (surrogate, unique)
  ,Index2 = ctFiles
)
;
Table Struct tInsertDocs4110
(
    nrec            : comp
  , ctFiles         : comp
  , MC_Uid1C        : string //'UID ТМЦ из 1С'
  , MC_name         : string // 'Наименование'
  , MC_nrec         : comp
  , Sklad_kod       : string //'Код склад'
  , MOL_TN          : string //'Табельный номер МОЛ'
  , MOL_FIO          : string // МОЛ
  , SchetBU         : string // 'Счет/субсчет бухгалтерский учет'
  , edIzm           : string // 'Единица измерения'
  , kol             : double // 'Количество'
  , kol1C           : double // 'Количество'
  , kolfordoc       : double
  , sumTZR          : double
  , PriceWithoutVat : double // 'Цена руб. без НДС'
  , SumWithoutVat   : double // 'Сумма руб. без НДС'
  , SumVat          : double // 'Сумма руб. НДС'
  , SumWithVAT      : double // 'Сумма руб. с НДС'
  , Dog_UID1C       : string // 'UID договора из 1С'
  , soprdSopr       : date // 'Дата накладной'
  , soprnSopr       : string  // 'Номер накладной'
  , SchFact_uid1C   : string // 'UID счета-фактуры из 1С'
  , SchFact_date    : date // 'Дата счет-фактуры'
  , SchFact_dateIn  : date // 'Дата получения счета-фактуры'
  , SchFact_NoDoc   : string // 'Номер счет-фактуры'
  , SchFact_SumWOVat : double
  , SchFact_SumVat        : double
  , SchFact_SumWithVAT    : double
  , Vat             : string // 'Ставка НДС %'
  , edIzm_koeff     : double
  , shifrzakaza : string // код заказа
  , edIzm1C    : string
  , Descr      : string
  , FlagErr    : byte
  , filerow    : word
  , cmc        : comp
  , cSkl       : comp
  , cDog       : comp
  , cOtpEd     : comp
  , cmol       : comp
  , csopr      : comp
  , cschet     : comp
  , cspsopr    : comp
  , kau1podrinitiator : comp
  , kau2shifrzakaza   : comp
  , dognodoc : string
  , isAktIzlishki : string
)
with index
(
   Index1 = nrec (surrogate, unique)
  ,Index2 = ctFiles
)
;

Table Struct tInsertDocs019
(
    nrec       : comp
  , ctFiles    : comp
  , MC_Uid1C   : string //'UID ТМЦ из 1С'
  , MC_name    : string // 'Наименование'
  , MC_nrec    : comp
  , katmbp_nrec : comp
  , sklad_kod  : string
  , sklad_nrec : comp
  , MOL_kod    : string
  , MOL_name   : string
  , MOL_nrec   : comp
  , kol        : double
  , price      : double
  , summa      : double
  , Party_kod  : string
  , Party_name : string
  , Party_nrec : comp
  , date_In    : date
  , srok       : double
  , date_end   : date
  , isSFOstr   : string
  , isSFO      : boolean
  , FlagErr    : byte
  , filerow    : word
  , descr      : string
)
with index
(
   Index1 = nrec (surrogate, unique)
  ,Index2 = ctFiles
)
;
procedure MyLog(_log : string); forward;
create view
var
  pMarker: IMarker(marker) new;
  NameMarkerFiles : string;
  dateformat : string = 'DD.MM.YYYY' ;
  ListName   : string = 'TDSheet';

    Folder_input
  , File_input : string;
  _logFile     : string= '';
  typeTable    : word = 0;
    mid
  , MyMarkerDocs : longint;

    _wTiDk_own
  , _wTiDk_ext : word;

    _dateOpr : date;

    _cCashBank_Own
  , _cCashBank_Ext
  , _cUsl
  , _cGrNal20
  , _cGrNal18
  , _cGrNal10
  , _cGrnal0
  , _cGrNalWithout
  , _cGrNalOther
  , _cSaldTune
  , _cpodr100
  , _cpodrokbfakel
  , _cGrPartyGOZ
  , _cGrPartyCOM : comp = 0h;

from
      dogovor
    , katsopr
    , KatOrg
    , CalPlan
    , usersdoc usersdoc_own
    , usersdoc usersdoc_ext
    , katusl Usl_akt
    , KatOtpEd KatOtpEd_usl
    , soprhoz
    , spsopr
    , plpor
    , basefin
    , katotped
    , katmc
    , katpodr
    , kated
    , katsopr katsopr1

    , GrNal GrNal20
    , GrNal GrNal18
    , GrNal GrNal10
    , Grnal Grnal0
    , GrNal GrNalWithout
    , GrNal GrNalOther
    , katmol
    , spgrnal
    , soprordb
    , spdocnal
    , SaldTune
    , SALDTUNE SALDTUNE1
    , buhschet
    , katpodr podr100
    , katpodr podrokbfakel
    , mnplan
    , specmtr
    , katparty
    , sklorder
    , sporder
    , groupparty
    , SCHFACT

    , KatMbp
    , mbpmove
    , mbpin

    , tFiles
    , tFiles tFiles_br
    , tInsertDocs6062
    , tInsertDocs6062 tInsertDocs6062_br
    , tInsertDocs4110
    , tInsertDocs4110 tInsertDocs4110_br
    , tInsertDocs019
    , tInsertDocs019 tInsertDocs019_br


 where ((
                   tFiles_br.nrec == tInsertDocs6062_br.ctFiles
      and          tFiles_br.nrec == tInsertDocs4110_br.ctFiles
      and          tFiles_br.nrec == tInsertDocs019_br.ctFiles

      and tInsertDocs6062_br.cOrg     == KatOrg.nrec
      and tInsertDocs6062_br.cDogovor == Dogovor.nrec
      and tInsertDocs6062_br.cCALPLAN == CalPlan.nrec
                and (CalPlan.DIRECTMC <> 0)

                  and _cUsl == Usl_akt.nrec
                 and      2 == KatOtpEd_usl.prmc
           and Usl_akt.Nrec == KatOtpEd_usl.cMcUsl
           and Usl_akt.CED  == KatOtpEd_usl.CKATED

        and               2 == usersdoc_own.razdel
         and _cCashBank_own == usersdoc_own.cCashbank
                      and 1 == usersdoc_own.TIPGAL

        and               2 == usersdoc_ext.razdel
         and _cCashBank_Ext == usersdoc_ext.cCashbank
                      and 2 == usersdoc_ext.TIPGAL


         and _cGrNal20      == GrNal20.nrec
         and _cGrNal18      == GrNal18.nrec
         and _cGrNal10      == GrNal10.nrec
         and _cGrnal0       == Grnal0.nrec
         and _cGrNalWithout == GrNalWithout.nrec
         and _cGrNalOther   == GrNalOther.nrec

         and _cSaldTune == SALDTUNE.nrec

       and _cpodr100 == podr100.nrec
  and _cpodrokbfakel == podrokbfakel.nrec


 ))
;

PROCEdURE ClearAll;
{
 delete all tFiles;
 delete all tInsertDocs6062;
 delete all tInsertDocs4110;
 clearmarker(MyMarkerDocs);
 if getfirst tFiles = tsOK {}
 if getfirst tInsertDocs6062 = tsOK {}
 if getfirst tInsertDocs4110 = tsOK {}
 rereadrecord;
} // PROCEdURE ClearAll;

function existkatsopr6062(_nSopr : string; _dSopr: date) : boolean;
{
  var _result : boolean = false;
 if getfirst katsopr1 where ((111 == katsopr1.vidsopr
                       and _dSopr == katsopr1.dSopr
                       and _nSopr == katsopr1.nSopr
                           )) = tsOK
      {
        _result := True;
      }
 result := _result
}
function existplpor(_tipusers : word; _noDok: string; _datob: date) : boolean;
{
  var _result : boolean = false;
 if getfirst plpor where ((_tipusers == plpor.tidk
                          and _noDok == plpor.noDok (noindex)
                          and _datob == plpor.datob(noindex)
                         )) = tsOK
      {
        _result := True;
      }
 result := _result
}

PROCEdURE fillrecArrayByTypeTable(_type: byte);
{
    var _npp: byte;
        _npp := 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);
   case _type of
     0 : {
        _recArray[_npp].def := 'СчетБУ'                 ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'СуммаБУ'                ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  //      _recArray[_npp].def := 'UID_Контрагент'         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  //      _recArray[_npp].def := 'ИННКонтрагент'          ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  //      _recArray[_npp].def := 'НаименованиеКонтрагент' ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'UID_Договор'            ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'ДатаДоговор'            ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'НомерДоговор'           ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'НомерНакладной'         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'ДатаНакладной'          ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'НомерПП'                ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'ДатаПП'                 ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
  //      _recArray[_npp].def := 'ВидВзаиморасчетов'
     }
     1 : {
        _recArray[_npp].def := 'UID ТМЦ из 1С'                   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Наименование'                    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Код склад'                       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Табельный номер МОЛ'             ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'МОЛ'                             ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Счет/субсчет бухгалтерский учет' ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Единица измерения'               ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Количество'                      ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Цена руб. без НДС'               ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Сумма руб. без НДС'              ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Сумма руб. НДС'                  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Сумма руб. с НДС'                ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'UID договора из 1С'              ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Дата накладной'                  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Номер накладной'                 ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'UID счета-фактуры из 1С'         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Дата счет-фактуры'               ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Дата получения счета-фактуры'    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Номер счет-фактуры'              ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Ставка НДС %'                    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Сумма руб. без НДС'              ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Сумма руб. НДС'                  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Сумма руб. с НДС'                ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Отпускная Единица (из выгрузки 1С)';                               SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Коэффициент перевода к учетной единице';                           SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Количество в отпускных единицах для загрузки в Галактику';         SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'NREC_katmc ( служебный номер записи МЦ в каталоге Галактика ERP)'; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Сумма в руб. без НДС включая ТЗР'; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Код заказа';                       SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'СФ Сумма руб. без НДС';            SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'СФ Сумма руб. НДС';                SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'СФ Сумма руб. с НДС';              SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Номер договора';                   SetLimit(_recArray, GetLimit(_recArray) + 1);
        _recArray[_npp].def := 'Акт об излишках';                  SetLimit(_recArray, GetLimit(_recArray) + 1);
     }
     2 : {
        _recArray[_npp].def := 'Наименование'                                ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'UID ТМЦ из 1С'                               ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Код склада или подразделения (из Галактики)' ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Табельный номер МОЛ'                         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'МОЛ'                                         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Количество'                                  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Цена руб.'                                   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Сумма руб.'                                  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Код партии'                                  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Наименование партии'                         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'дата ввода в эксплуатацию'                   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'срок службы в месяцах'                       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'дата окончания эксплуатации'                 ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
        _recArray[_npp].def := 'Спецодежда'                                  ; SetLimit(_recArray, GetLimit(_recArray) + 1);
     }
   end;
}
Function getKatOrg ( _dogovor : comp) : comp;
{
  var _result : comp;
  _result := 0h;
  if getfirst dogovor where ((_dogovor == dogovor.nrec)) = tsOK
   {
    _result := dogovor.corg;
   }

/*
  if getfirst fastfirstrow KatOrg Where (( _INNorg == KatOrg.unn (NOINDEX))) <> tsOK
   then {
         if getfirst fastfirstrow KatOrg Where (( _UIDorg == KatOrg.Unn (NOINDEX))) = tsOK
           then _result := KatOrg.nrec
    }
   else {
         _result := KatOrg.nrec
   }
*/
  result := _result
}

Function getDogovor(_UIDdogovor, _dognodoc: string) : comp;
{
  var _result : comp = 0h;
  if(getfirst dogovor where ((_UIDdogovor == DOGOVOR.SHEMANOTE(noindex)))) <> tsOK
  {
    if(getfirst dogovor where ((_dognodoc == DOGOVOR.NODOC_EXT (noindex)
//                             and _dogdate == DOGOVOR.dDoc (noindex)
      ))) <> tsOK
     {
      if(getfirst dogovor where ((_dognodoc == DOGOVOR.NODOC (noindex)
//                               and _dogdate == DOGOVOR.dDoc (noindex)
        ))) = tsOK       {
         _result := dogovor.nrec;
       }
     }
     else {
       _result := dogovor.nrec;
     }
  }
  else {
    _result := dogovor.nrec;
  }
 result := _result;
}

function getschet(_SchetBU : string) : comp;
{
  result := 0h;
   var _CPLANSSCH : comp = cogettune('FIN.USER.CPLANSSCH') ;
   if getfirst buhschet where (( _CPLANSSCH == buhschet.CPLANSSCH
                               and _SchetBU == BuhSchet.code (noindex) )) = tsOK
   {
      result := buhschet.nrec;
   }
}
Function getcalplan(_cDogovor : comp): comp;
{
  var _result : comp = 0h;
  if(getfirst CalPlan where ((_cDogovor == CalPlan.cDogovor))) = tsOK
  {
    _result := CalPlan.nrec
  }
 result := _result;
}
Function getColor(_FlagErr: byte) : word;
{
  case _FlagErr of
   0 : Result := 0
   1 : Result := ColorNeed
   2 : Result := ColorError
  else
  {
   Result := 0;
  }
  end;
}

#declare seterror4110(_str)
  tInsertDocs4110.FlagErr := 2 ;
  tInsertDocs4110.Descr   := tInsertDocs4110.Descr + #_str;
  mylog(#_str);
#end

#declare seterror019(_str)
  tInsertDocs019.FlagErr := 2 ;
  tInsertDocs019.Descr   := tInsertDocs019.Descr + #_str;
  mylog(#_str);
#end

Procedure CheckErrors4110;
{
    setvisualheader('определение ошибок -_- ');

update tInsertDocs4110 set tInsertDocs4110.FlagErr := 0, tInsertDocs4110.Descr := '';
  _loop tInsertDocs4110
   {

      if tInsertDocs4110.soprdSopr = to_date(0,0,0) {
         #seterror4110('|пустая дата накладной')
      }
      if tInsertDocs4110.soprnSopr = '' {
         #seterror4110('|пустой номер накладной')
      }

    if tInsertDocs4110.cmc = 0h then {
       #seterror4110('|не определили МЦ')
      }

    if instr('10.',tInsertDocs4110.SchetBU) <> 0 {
      if tInsertDocs4110.mc_nrec <> 0h {
        if tInsertDocs4110.cmc <> 0h
          if tInsertDocs4110.cOtpEd = 0h {
            #seterror4110('|единицы измерения нет в каталоге')
            }
          else {
            if getfirst katotped where ((tInsertDocs4110.cOtpEd == katotped.nrec)) = tsOK {
              if tInsertDocs4110.edIzm_koeff <> katotped.koef {
                #seterror4110('|коэффициенты отпускной единицы в файле и в системе не совпадают')
              }
            }
           }
        }
        else {
          if tInsertDocs4110.cOtpEd = 0h {
               #seterror4110('|единица измерения в файле не равна учетной у МЦ')
            }
        }
     }
      if instr('41.',tInsertDocs4110.SchetBU) <> 0 {
        if tInsertDocs4110.cmc <> 0h
        if tInsertDocs4110.cOtpEd = 0h {
          #seterror4110('| учетной единицы нет среди отпускных');
        }
      }
      if tInsertDocs4110.cschet = 0h {
       #seterror4110('| не найден бух.счет');
      }

      if tInsertDocs4110.kolfordoc = 0 {
       #seterror4110('| нулевое количество');
      }
      if tInsertDocs4110.cSkl = 0h{
       #seterror4110('| не найден склад');
      }
      if tInsertDocs4110.cDog = 0h and tInsertDocs4110.isAktIzlishki <> 'TRUE'{
       #seterror4110('| не найден договор');
      }
      if tInsertDocs4110.PriceWithoutVat = 0{
        #seterror4110('| нулевая цена без налогов');
      }

      if tInsertDocs4110.cMOL = 0 {
        #seterror4110('| не найден МОЛ');
      }

      if tInsertDocs4110.shifrzakaza <> '' and  tInsertDocs4110.kau2shifrzakaza = 0h{
        #seterror4110('| не нашли шифр заказа');
      }

         case tInsertDocs4110.flagErr of
           0 : tInsertDocs4110.Descr := 'OK';
           1 :  {
                  if tFiles.FlagErr <> 2 then
                    update current tFiles set
                       tFiles.FlagErr := 1
                     , tFiles.Descr   := 'Предупреждение'
                    ;
               }
          else {
            update current tFiles set
               tFiles.FlagErr := 2
             , tFiles.Descr   := 'Есть ошибки в файле';
            ;
          }
         end;
     update current tInsertDocs4110;
   }
}
Procedure CheckErrors019;
{
    setvisualheader('определение ошибок -_- ');

update tInsertDocs019 set tInsertDocs019.FlagErr := 0, tInsertDocs019.Descr := '';
  _loop tInsertDocs019
   {

      if tInsertDocs019.date_In = to_date(0,0,0) {
         #seterror019('|пустая дата ввода в эксплуатацию')
      }
      if tInsertDocs019.date_end = to_date(0,0,0) {
         #seterror019('|пустая дата окончания эксплуатации')
      }

      if tInsertDocs019.kol = 0 {
         #seterror019('|нулевое количество')
      }

      if tInsertDocs019.srok = 0 {
         #seterror019('|нулевое срок эксплуатации')
      }

      if tInsertDocs019.sklad_nrec = 0h{
       #seterror019('| не найден склад');
      }

      if tInsertDocs019.MOL_nrec= 0 {
        #seterror019('| не найден МОЛ');
      }

      if tInsertDocs019.katmbp_nrec = 0 {
        #seterror019('| не найден карточка СФО/спецоснастки');
      }

      if tInsertDocs019.MC_nrec = 0 {
        #seterror019('| не найдена МЦ');
      }

         case tInsertDocs019.flagErr of
           0 : tInsertDocs019.Descr := 'OK';
           1 :  {
                  if tFiles.FlagErr <> 2 then
                    update current tFiles set
                       tFiles.FlagErr := 1
                     , tFiles.Descr   := 'Предупреждение'
                    ;
               }
          else {
            update current tFiles set
               tFiles.FlagErr := 2
             , tFiles.Descr   := 'Есть ошибки в файле';
            ;
          }
         end;
     update current tInsertDocs019;
   }
}
Procedure CheckErrors6062;
{
    setvisualheader('определение ошибок -_- ');

update tInsertDocs6062 set tInsertDocs6062.FlagErr := 0, tInsertDocs6062.Descr := '';
    _loop tInsertDocs6062
     {
        if tInsertDocs6062.cOrg = 0h
         {
          tInsertDocs6062.FlagErr := 2 ;
          tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|не определили организацию';
         }
         if tInsertDocs6062.schetBU = '' {
          tInsertDocs6062.FlagErr := 2 ;
          tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|не определен счет БУ';
         }
         if tInsertDocs6062.summa = 0 {
          tInsertDocs6062.FlagErr := 2 ;
          tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|нулевая сумма';
         }
         if tInsertDocs6062.cDogovor = 0h {
          tInsertDocs6062.FlagErr := 2 ;
          tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|не найден договор';
         }
         if tInsertDocs6062.cCALPLAN = 0h {
          tInsertDocs6062.FlagErr := 2 ;
          tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|не найден ПКП к договору';
         }
         if tInsertDocs6062.schetBU = '60.01' {
             if tInsertDocs6062.soprnSopr = '' {
                tInsertDocs6062.FlagErr := 2 ;
                tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|пустой номер акта';
             }
             if tInsertDocs6062.soprdSopr = to_date(0,0,0) {
                tInsertDocs6062.FlagErr := 2 ;
                tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|пустая дата акта';
             }
             if tInsertDocs6062.soprnSopr <> '' and tInsertDocs6062.soprdSopr <> to_date(0,0,0) {
                if existkatsopr6062(katsopr.nSopr, katsopr.dSopr)
                if tInsertDocs6062.FlagErr <> 2
                  {
                   tInsertDocs6062.FlagErr := 1 ;
                   tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|в системе уже есть акт с таким номером и датой';
                  }
             }
          }
         if tInsertDocs6062.schetBU = '60.02' or tInsertDocs6062.schetBU = '62.02' {
             if tInsertDocs6062.plporNoDoc= '' {
                tInsertDocs6062.FlagErr := 2 ;
                tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|пустой номер ПП';
             }
             if tInsertDocs6062.plpordDoc= to_date(0,0,0) {
                tInsertDocs6062.FlagErr := 2 ;
                tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|пустая дата ПП';
             }

             if tInsertDocs6062.plporNoDoc <> '' and tInsertDocs6062.plpordDoc <> to_date(0,0,0) {

                if tInsertDocs6062.schetBU = '60.02'
                if existplpor(usersdoc_own.tipusers, tInsertDocs6062.plporNoDoc, tInsertDocs6062.plpordDoc)
                if tInsertDocs6062.FlagErr <> 2
                  {
                   tInsertDocs6062.FlagErr := 1 ;
                   tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|в системе уже есть ПП с таким номером и датой';
                  }

                if tInsertDocs6062.schetBU = '62.02'
                if existplpor(usersdoc_ext.tipusers, tInsertDocs6062.plporNoDoc, tInsertDocs6062.plpordDoc)
                if tInsertDocs6062.FlagErr <> 2
                  {
                   tInsertDocs6062.FlagErr := 1 ;
                   tInsertDocs6062.Descr   := tInsertDocs6062.Descr + '|в системе уже есть ПП с таким номером и датой';
                  }

             }
          }
         case tInsertDocs6062.flagErr of
           0 : tInsertDocs6062.Descr := 'OK';
           1 :  {
                  if tFiles.FlagErr <> 2 then
                    update current tFiles set
                       tFiles.FlagErr := 1
                     , tFiles.Descr   := 'Предупреждение'
                    ;
               }
          else {
            update current tFiles set
               tFiles.FlagErr := 2
             , tFiles.Descr   := 'Есть ошибки в файле';
            ;
          }
          end;
         update current tInsertDocs6062;
     }
}
#include OpenFileExcelSearchCells.vpp
Procedure prtInsertDocs6062(_nrow : longint; _file : string);
{
  var _i: byte;
  if getfirst tFiles where ((_file == tFiles.cFile)) <> tsOK {
    insert tFiles set
      tFiles.cFile   := _file
    , tFiles.FlagErr := 0
    , tFiles.descr   := 'OK'
    ;
  }

  clearBuffer(tntInsertDocs6062);
  tInsertDocs6062.FileRow         := _nrow;
  tInsertDocs6062.ctFiles := tFiles.nrec;
  for(_i := 1; _I <= getLimit(_recArray); _i++)
  {
    case upcase(_recArray[_i].def) of
      Upcase('СчетБУ'                ) : tInsertDocs6062.schetBU    := Trim(_recArray[_i].value);
      Upcase('СуммаБУ'               ) : tInsertDocs6062.summa      := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ',''));
//      Upcase('UID_Контрагент'        ) : tInsertDocs6062.UIDorg     := Trim(_recArray[_i].value);
//      Upcase('ИННКонтрагент'         ) : tInsertDocs6062.INNorg     := Trim(_recArray[_i].value);
      Upcase('UID_Договор'           ) : tInsertDocs6062.UIDdogovor := Trim(_recArray[_i].value);
      Upcase('ДатаДоговор'           ) : tInsertDocs6062.dogdate    := StrToDate(Trim(_recArray[_i].value),dateformat);
      Upcase('НомерДоговор'          ) : tInsertDocs6062.dognodoc   := Trim(_recArray[_i].value);
      Upcase('НомерНакладной'        ) : tInsertDocs6062.soprnSopr  := Trim(_recArray[_i].value);
      Upcase('ДатаНакладной'         ) : tInsertDocs6062.soprdSopr  := StrToDate(Trim(_recArray[_i].value),dateformat);
      Upcase('НомерПП'               ) : tInsertDocs6062.plporNoDoc := Trim(_recArray[_i].value);
      Upcase('ДатаПП'                ) : tInsertDocs6062.plpordDoc  := StrToDate(Trim(_recArray[_i].value),dateformat);
    end;
  }
//   if tInsertBaseDocSP.cMc <> 0h
   if tInsertDocs6062.schetBU <> ''
    then
     {
      tInsertDocs6062.cDogovor := getDogovor(tInsertDocs6062.UIDdogovor, tInsertDocs6062.dognodoc);
      tInsertDocs6062.cOrg     := getKatOrg(tInsertDocs6062.cDogovor);
      tInsertDocs6062.cCALPLAN := getcalplan(tInsertDocs6062.cDogovor);
      Insert Current tInsertDocs6062;
     }
}  // tInsertSaldoMC
function getkatmbp(_MC_nrec : comp; _isSFO : boolean) : comp;
{
  result := 0h;
  if _MC_nrec = 0h then exit;

 var _mbp_kind :word = 0;  // спецоснастка
  if _isSFO then _mbp_kind := 1; // спецодежда

  if(getfirst KatMbp where ((_MC_nrec == KatMbp.cMc)) and KatMbp.mbpkind = _mbp_kind ) = tsOK
   then result := KatMbp.nrec
}

function getmc(_MC_nrec : comp; _MC_Uid1C, _MC_name : string) : comp;
{
  result := 0h;
   if getfirst katmc where ((_MC_nrec == katmc.nrec)) = tsOK then {
    result := katmc.nrec;
    }
    else {
        if getfirst katmc where ((_MC_Uid1C == katmc.barkod2)) = tsOK then {
           result := katmc.nrec;
          }
          else {
            if getfirst katmc where ((_MC_name == katmc.name (noindex) )) = tsOK then result := katmc.nrec;
          }
      }
}
function getsklad(_Sklad_kod : string) : comp;
{
  mylog('getsklad _Sklad_kod  = '+_Sklad_kod );

 result := 0h;
 if(getfirst katpodr where ((_Sklad_kod == katpodr.kod)) and katpodr.isArch = 0 )= tsOK {
   result := katpodr.nrec;
 }
  mylog('getsklad result  = '+result);
}

function getOtpEdEqUchet(_cmc : comp) : comp;
{
  result := 0h;
  if getfirst katmc where ((_cmc == katmc.nrec)) = tsOK
   if getfirst KatOtpEd where ((1 == KatOtpEd.prmc
                 and katmc.nrec == KatOtpEd.cMcUsl
                 and katmc.CED  == KatOtpEd.CKATED)) = tsOk {
                   result := KatOtpEd.nrec
                 }
}
function getKatEd(_edIzm: string): comp;
{
  result := 0h;
 if(getfirst KATED where KATED.NAME = _edIzm) =tsOK{
   result := KATED.nrec
 }
 else {
   if(getfirst KATED where KATED.ABBR = _edIzm) =tsOK{
     result := KATED.nrec
   }
 }
}

function getOtpEdbyName(_cmc : comp; _edIzm : string) : comp;
{
   var _ced : comp = getKatEd(_edIzm);
   if getfirst KatOtpEd where ((1 == KatOtpEd.prmc
                   and katmc.nrec == KatOtpEd.cMcUsl
                        and _cEd  == KatOtpEd.CKATED)) = tsOk {
                   result := KatOtpEd.nrec
                   }
  if result <> getOtpEdEqUchet(_cmc) then result := 0h;
}

function getCreateOtpEd(_cMc :comp; _edIzm1C : string; _edIzm_koeff : double): comp;
{
 var _cEd : comp = getKatEd(_edIzm1C);
  if getfirst katmc where ((_cmc == katmc.nrec)) = tsOK
   if getfirst KatOtpEd where ((1 == KatOtpEd.prmc
                   and katmc.nrec == KatOtpEd.cMcUsl
                        and _cEd  == KatOtpEd.CKATED)) = tsOk {
                   result := KatOtpEd.nrec
                 }
                 else {
                   if getfirst kated where ((_cEd == kated.nrec)) = tsOK {
                       insert KatOtpEd set
                          KatOtpEd.prmc    := 1
                        , KatOtpEd.name    := kated.name
                        , KatOtpEd.cMcUsl  := katmc.nrec
                        , KatOtpEd.CKATED  := _cEd
                        , KatOtpEd.KOEF    := _edIzm_koeff
                        , KatOtpEd.DISKRET := kated.DISKRET
                        , KatOtpEd.ABBR    := kated.ABBR
                       ;
                     result := KatOtpEd.nrec
                   }
                 }
}

function getmol(_CSKL: comp; _name, _kod: string) : comp;
{
result := 0h;
MyLog('getmol _CSKL = ' + _CSKL);
MyLog('getmol _name = ' + _name);
MyLog('getmol _kod = ' + _kod);

  if _CSKL = 0h then exit;
  if _name <> '' {
    if getfirst katmol where ((_CSKL == katmol.CSKL
                           and _name == katmol.Name)) = tsOK
       then result := katmol.nrec ;
   }

  if result <> 0h then exit;

  if _kod <> '' {
    if getfirst katmol where ((_CSKL == katmol.CSKL
                           and _kod == katmol.KOD)) = tsOK
       then result := katmol.nrec ;
   }

  MyLog('getmol result = ' + result);
}

function getshifrzakaza(_shifrzakaza: string) : comp;
{
 result := 0h;
 if getfirst mnplan where ((     17 == mnplan.TYPEPLAN
                   and _shifrzakaza == mnplan.NUMBER (noindex) )) = tsOK {
                     result := mnplan.nrec;
                   }
  }

Procedure prtInsertDocs019(_nrow : longint; _file : string);
{
  var _i: byte;
  if getfirst tFiles where ((_file == tFiles.cFile)) <> tsOK {
    insert tFiles set
      tFiles.cFile   := _file
    , tFiles.FlagErr := 0
    , tFiles.descr   := 'OK'
    ;
  }

  clearBuffer(tntInsertDocs019);
  tInsertDocs019.FileRow         := _nrow;
  tInsertDocs019.ctFiles := tFiles.nrec;
  for(_i := 1; _I <= getLimit(_recArray); _i++)
  {
    case upcase(_recArray[_i].def) of
      Upcase( 'UID ТМЦ из 1С'                               ) : tInsertDocs019.MC_Uid1C   := Trim(_recArray[_i].value); //'UID ТМЦ из 1С'
      Upcase( 'Наименование'                                ) : tInsertDocs019.MC_name    := Trim(_recArray[_i].value);
      Upcase( 'Код склада или подразделения (из Галактики)' ) : tInsertDocs019.sklad_kod  := Trim(_recArray[_i].value);
      Upcase( 'Табельный номер МОЛ'                         ) : tInsertDocs019.MOL_kod    := Trim(_recArray[_i].value);
      Upcase( 'МОЛ'                                         ) : tInsertDocs019.MOL_name   := Trim(_recArray[_i].value);
      Upcase( 'Количество'                                  ) : tInsertDocs019.kol        := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ','')); // 'Количество'
      Upcase( 'Цена руб.'                                   ) : tInsertDocs019.price      := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ','')); // 'Количество'
      Upcase( 'Сумма руб.'                                  ) : tInsertDocs019.summa      := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ','')); // 'Количество'
      Upcase( 'Код партии'                                  ) : tInsertDocs019.Party_kod  := Trim(_recArray[_i].value);
      Upcase( 'Наименование партии'                         ) : tInsertDocs019.Party_name := Trim(_recArray[_i].value);
      Upcase( 'дата ввода в эксплуатацию'                   ) : tInsertDocs019.date_In    := StrToDate(Trim(_recArray[_i].value),dateformat);  // 'Дата получения счета-фактуры'
      Upcase( 'срок службы в месяцах'                       ) : tInsertDocs019.srok       := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ','')); // 'Количество'
      Upcase( 'дата окончания эксплуатации'                 ) : tInsertDocs019.date_end   := StrToDate(Trim(_recArray[_i].value),dateformat);  // 'Дата получения счета-фактуры'
      Upcase( 'Спецодежда'                                  ) : tInsertDocs019.isSFOstr   := Trim(_recArray[_i].value);

    end;
  }
//   if tInsertBaseDocSP.cMc <> 0h
   if tInsertDocs019.MC_name <> ''
    then
     {
      tInsertDocs019.isSFO := false;
      if upcase(tInsertDocs019.isSFOstr) = 'TRUE' then tInsertDocs019.isSFO := true;

      tInsertDocs019.MC_nrec    := getmc(0h, tInsertDocs019.MC_Uid1C,tInsertDocs019.MC_name);
      tInsertDocs019.Sklad_nrec := getsklad(tInsertDocs019.Sklad_kod) ;
      tInsertDocs019.MOL_nrec   := getmol(tInsertDocs019.Sklad_nrec, tInsertDocs019.MOL_name, tInsertDocs019.MOL_kod);
      tInsertDocs019.katmbp_nrec := getkatmbp(tInsertDocs019.MC_nrec, tInsertDocs019.isSFO);
      Insert Current tInsertDocs019;
     }
}  // tInsertSaldoMC

Procedure prtInsertDocs4110(_nrow : longint; _file : string);
{
  var _i: byte;
  if getfirst tFiles where ((_file == tFiles.cFile)) <> tsOK {
    insert tFiles set
      tFiles.cFile   := _file
    , tFiles.FlagErr := 0
    , tFiles.descr   := 'OK'
    ;
  }

  clearBuffer(tntInsertDocs4110);
  tInsertDocs4110.FileRow         := _nrow;
  tInsertDocs4110.ctFiles := tFiles.nrec;
  for(_i := 1; _I <= getLimit(_recArray); _i++)
  {
    case upcase(_recArray[_i].def) of
      Upcase( 'UID ТМЦ из 1С'                    ) : tInsertDocs4110.MC_Uid1C         := Trim(_recArray[_i].value); //'UID ТМЦ из 1С'
      Upcase( 'Наименование'                     ) : tInsertDocs4110.MC_name          := Trim(_recArray[_i].value); // 'Наименование'
      Upcase( 'Код склад'                        ) : tInsertDocs4110.Sklad_kod        := Trim(_recArray[_i].value); //'Код склад'
      Upcase( 'Табельный номер МОЛ'              ) : tInsertDocs4110.MOL_TN           := Trim(_recArray[_i].value); //'Табельный номер МОЛ'
      Upcase( 'Счет/субсчет бухгалтерский учет'  ) : tInsertDocs4110.SchetBU          := Trim(_recArray[_i].value); // 'Счет/субсчет бухгалтерский учет'
      Upcase( 'Единица измерения'                ) : tInsertDocs4110.edIzm            := Trim(_recArray[_i].value); // 'Единица измерения'
      Upcase( 'Количество'                       ) : tInsertDocs4110.kol              := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ','')); // 'Количество'
      Upcase( 'Цена руб. без НДС'                ) : tInsertDocs4110.PriceWithoutVat  := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ','')); // 'Цена руб. без НДС'
      Upcase( 'Сумма руб. без НДС'               ) : tInsertDocs4110.SumWithoutVat    := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ','')); // 'Сумма руб. без НДС'
      Upcase( 'Сумма руб. НДС'                   ) : tInsertDocs4110.SumVat           := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ','')); // 'Сумма руб. НДС'
      Upcase( 'Сумма руб. с НДС'                 ) : tInsertDocs4110.SumWithVAT       := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ','')); // 'Сумма руб. с НДС'
      Upcase( 'UID договора из 1С'               ) : tInsertDocs4110.Dog_UID1C        := Trim(_recArray[_i].value); // 'UID договора из 1С'
      Upcase( 'Дата накладной'                   ) : tInsertDocs4110.soprdSopr        := StrToDate(Trim(_recArray[_i].value),dateformat);  // 'Дата накладной'
      Upcase( 'Номер накладной'                  ) : tInsertDocs4110.soprnSopr        := Trim(_recArray[_i].value); // 'Номер накладной'
      Upcase( 'UID счета-фактуры из 1С'          ) : tInsertDocs4110.SchFact_uid1C    := Trim(_recArray[_i].value); // 'UID счета-фактуры из 1С'
      Upcase( 'Дата счет-фактуры'                ) : tInsertDocs4110.SchFact_date     := StrToDate(Trim(_recArray[_i].value),dateformat);  // 'Дата счет-фактуры'
      Upcase( 'Дата получения счета-фактуры'     ) : tInsertDocs4110.SchFact_dateIn   := StrToDate(Trim(_recArray[_i].value),dateformat);  // 'Дата получения счета-фактуры'
      Upcase( 'Номер счет-фактуры'               ) : tInsertDocs4110.SchFact_NoDoc    := Trim(_recArray[_i].value); // 'Номер счет-фактуры'
      Upcase( 'Ставка НДС %'                     ) : tInsertDocs4110.Vat              := Trim(_recArray[_i].value); // 'Ставка НДС %'
      Upcase( 'Отпускная Единица (из выгрузки 1С)'    ) : tInsertDocs4110.edIzm1C     := Trim(_recArray[_i].value);
      Upcase( 'Коэффициент перевода к учетной единице') : tInsertDocs4110.edIzm_koeff := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ',''));
      Upcase( 'NREC_katmc ( служебный номер записи МЦ в каталоге Галактика ERP)' )    : tInsertDocs4110.MC_nrec := comp(Trim(_recArray[_i].value)); // 'Ставка НДС %'
      Upcase( 'Количество в отпускных единицах для загрузки в Галактику' )            : tInsertDocs4110.kol1C   := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ',''));
      Upcase( 'Сумма в руб. без НДС включая ТЗР' ) : tInsertDocs4110.sumTZR := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ',''));
      Upcase( 'Код заказа'                       ) : tInsertDocs4110.shifrzakaza := Trim(_recArray[_i].value);
      Upcase( 'СФ Сумма руб. без НДС' )            : tInsertDocs4110.SchFact_SumWOVat := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ',''));
      Upcase( 'СФ Сумма руб. НДС'     )            : tInsertDocs4110.SchFact_SumVat        := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ',''));
      Upcase( 'СФ Сумма руб. с НДС'   )            : tInsertDocs4110.SchFact_SumWithVAT    := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ',''));
      Upcase( 'Номер договора'        )            : tInsertDocs4110.dognodoc    := Trim(_recArray[_i].value);
      Upcase( 'Акт об излишках'       )            : tInsertDocs4110.isAktIzlishki := Trim(_recArray[_i].value);
      Upcase( 'МОЛ'                   )            : tInsertDocs4110.MOL_FIO        := Trim(_recArray[_i].value);
    end;
  }
//   if tInsertBaseDocSP.cMc <> 0h
   if tInsertDocs4110.SchetBU <> ''
    then
     {
      tInsertDocs4110.cmc  := getmc(tInsertDocs4110.MC_nrec,tInsertDocs4110.MC_Uid1C,tInsertDocs4110.MC_name);
      tInsertDocs4110.cSkl := getsklad(tInsertDocs4110.Sklad_kod) ;
      tInsertDocs4110.cDog := getDogovor(tInsertDocs4110.Dog_UID1C, tInsertDocs4110.dognodoc);



      if instr('10.',tInsertDocs4110.SchetBU) <> 0
      {
        if tInsertDocs4110.cmc <> 0h {
           if tInsertDocs4110.MC_nrec <> 0h {
             tInsertDocs4110.cOtpEd := getCreateOtpEd(tInsertDocs4110.cmc, tInsertDocs4110.edIzm1C, tInsertDocs4110.edIzm_koeff);
             tInsertDocs4110.kolfordoc := tInsertDocs4110.kol1C;
            }
            else {
              tInsertDocs4110.cOtpEd := getOtpEdbyName(tInsertDocs4110.cmc,tInsertDocs4110.edIzm);
              tInsertDocs4110.kolfordoc := tInsertDocs4110.kol;
            }
        }
      }

      if tInsertDocs4110.shifrzakaza = '' {
       tInsertDocs4110.kau1podrinitiator := podrokbfakel.nrec;
       tInsertDocs4110.kau2shifrzakaza   := getshifrzakaza('Свободный остаток');
      }
      else {
        tInsertDocs4110.kau1podrinitiator := podr100.nrec;
        tInsertDocs4110.kau2shifrzakaza   := getshifrzakaza(tInsertDocs4110.shifrzakaza);
      }

      tInsertDocs4110.cschet := getschet(tInsertDocs4110.SchetBU);
      tInsertDocs4110.cMOL   := getmol(getsklad(tInsertDocs4110.Sklad_kod), tInsertDocs4110.MOL_FIO, '');

      if instr('41.',tInsertDocs4110.SchetBU) <> 0
      {
        if tInsertDocs4110.cmc <> 0 then {
          tInsertDocs4110.cOtpEd := getOtpEdEqUchet(tInsertDocs4110.cmc)
         }
         tInsertDocs4110.kolfordoc := tInsertDocs4110.kol
      }


      Insert Current tInsertDocs4110;
     }
}  // tInsertSaldoMC
procedure MyLog(_log : string);
{
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'ImportOstatki_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
//  logstrtofile(_logFile,ShortStrToWin(_log));
  logstrtofile(_logFile,_log);
}

PROCEdURE FillInsertTables(_nrow : longint; _file : string);
{
  Case typeTable of
   0: prtInsertDocs6062(_nrow, _file)
   1: prtInsertDocs4110(_nrow, _file)
   2: prtInsertDocs019(_nrow, _file)
  end;
} // PROCEdURE FillInsertTableeNaklSFO(_log: string);


Procedure InsertAkts;
{
    mylog('Создание Актов');
 _loop tFiles where tFiles.FlagErr <> 2
   if SearchMarker(MyMarkerDocs, tFiles.nrec, mid)
     _loop tInsertDocs6062 where ((tFiles.nrec == tInsertDocs6062.ctFiles))
       and tInsertDocs6062.FlagErr = 0
          and tInsertDocs6062.schetBU = '60.01'
       {
         if existkatsopr6062(tInsertDocs6062.soprnSopr, tInsertDocs6062.soprdSopr) then {
           mylog('Акт '+tInsertDocs6062.soprnSopr + ' от ' + tInsertDocs6062.soprdSopr+' уже есть в системе. Пропускаем');
           continue;
         }
         insert KATSOPR set
             KatSopr.NAME     := 'Импорт остатков 60.01'
            ,KatSopr.DESCR    := sgettune('user.descr')
            ,KatSopr.CORG     := sgettune('user.desgr')
            ,KatSopr.VHODNAL  := 1
            ,KatSopr.STATUS   := 1
//            ,KatSopr.CNOTE   :=
            ,katsopr.summa    := tInsertDocs6062.summa
            ,KatSopr.TIPSOPR  := 1
            ,KatSopr.DSOPR    := tInsertDocs6062.soprdsopr
            ,KatSopr.DOPR     := tInsertDocs6062.soprdsopr
            ,KatSopr.DPRICE   := tInsertDocs6062.soprdsopr
            ,KatSopr.YEARSOPR := year(tInsertDocs6062.soprdsopr)
            ,KatSopr.NSOPR    := tInsertDocs6062.soprnsopr
            ,KatSopr.VIDSOPR  := 111
            ,KatSopr.CGRUZFROM:= tInsertDocs6062.corg
            ,KatSopr.CORGBASE := tInsertDocs6062.corg
            ,KatSopr.CORG     := tInsertDocs6062.corg
            ,KatSopr.CDOGOVOR := tInsertDocs6062.cdogovor
            ,KatSopr.CCALPLAN := tInsertDocs6062.ccalplan
          ;
         Insert soprhoz set
             soprhoz.CDOGOVOR := katsopr.cDogovor
           , soprhoz.CSOPRDOC := katsopr.nrec
           , soprhoz.DATOB    := katsopr.dsopr
           , soprhoz.TIPDOC   := katsopr.vidsopr
           , soprhoz.TIDKGAL  := katsopr.vidsopr
           , soprhoz.NODOC    := katsopr.nsopr
           , soprhoz.DESCR    := katsopr.descr
           , soprhoz.DESGR    := katsopr.desgr
           , soprhoz.SUMMA    := katsopr.summa
           , soprhoz.DIRECT   := 1
           , soprhoz.VHSUMHOZ := '+'
           , soprhoz.CORG     := katsopr.corg
         ;
         insert spsopr set
            spsopr.NPP     := 1
          , spsopr.PRMC    := 2
          , spsopr.cSopr   := katsopr.nrec
          , spsopr.CMCUSL  := Usl_akt.nrec
          , spsopr.COTPED  := KatOtpEd_usl.nrec
          , spsopr.KOL     := 1
          , spsopr.KOLOPL  := 1
          , spsopr.KOLFACT := 1
          , spsopr.PRICE   := tInsertDocs6062.summa
          , spsopr.RPRICE  := tInsertDocs6062.summa
          , spsopr.DSOPR   := KatSopr.dsopr
          , spsopr.DOPRTTN := KatSopr.dsopr
          , spsopr.VIDSOPR := KatSopr.vidsopr
         ;
         mylog('Сформирован акт на прием услуг ' + KatSopr.nsopr +' от '+ KatSopr.dsopr +' на сумму '+ KatSopr.summa);
       }
}
Procedure InsertPlPor;
{
  mylog('Создание ПП');
 _loop tFiles where tFiles.FlagErr <> 2
   if SearchMarker(MyMarkerDocs, tFiles.nrec, mid)
     _loop tInsertDocs6062 where ((tFiles.nrec == tInsertDocs6062.ctFiles))
        and (tInsertDocs6062.schetBU = '60.02' or tInsertDocs6062.schetBU = '62.02')
        and tInsertDocs6062.FlagErr = 0
      {
        mylog('schetBU = ' + tInsertDocs6062.schetBU);
         if tInsertDocs6062.schetBU = '60.02'
           {
              if existplpor(usersdoc_own.tipusers, tInsertDocs6062.plporNoDoc, tInsertDocs6062.plpordDoc)
                {
                   mylog('ПП '+tInsertDocs6062.plporNoDoc + ' от ' + tInsertDocs6062.plpordDoc+' уже есть в системе. Пропускаем');
                   continue;
                }

             insert plpor set
                 plpor.TIDKGAL   := 1
               , plpor.DIRECT    := 0
               , plpor.TIDK      := usersdoc_own.tipusers
               , plpor.NODOK     := tInsertDocs6062.plporNoDoc
               , plpor.DESCR     := sgettune('user.descr')
               , plpor.DESGR     := sgettune('user.desgr')
               , plpor.YEARDOC   := year(tInsertDocs6062.plpordDoc)
               , plpor.DATVIP    := tInsertDocs6062.plpordDoc
               , plpor.DATOTS    := tInsertDocs6062.plpordDoc
               , plpor.DATOB     := tInsertDocs6062.plpordDoc
               , plpor.CPLAT     := cogettune('MYORG')
               , plpor.CBANKPLAT := cogettune('MYBANK')
               , plpor.NAMEPL1   := 'Импорт остатков 60.02'
               , plpor.CPOL      := tInsertDocs6062.corg
               , plpor.SUMPLAT   := tInsertDocs6062.summa
               , plpor.MODEDOC   := 2048
              ;
             Insert SoprHoz set
                  SoprHoz.CDOGOVOR := tInsertDocs6062.cDogovor
                , SoprHoz.direct   := 0
                , SoprHoz.DATOB    := tInsertDocs6062.plpordDoc
                , SoprHoz.TIPDOC   := plpor.TIDK
                , SoprHoz.TIDKGAL  := 1
                , SoprHoz.NODOC    := tInsertDocs6062.plporNoDoc
                , SoprHoz.DESCR    := plpor.DESCR
                , SoprHoz.DESGR    := plpor.DESGR
                , SoprHoz.SUMMA    := tInsertDocs6062.summa
                , SoprHoz.DIRECT   := 2
                , SoprHoz.VHSUMHOZ := '+'
                , SoprHoz.MODEDOC  := 2048
                , SoprHoz.CORG     := tInsertDocs6062.cOrg
                , soprhoz.CSOPRDOC := plpor.nrec
             ;
             Insert basefin set
                 basefin.CDOGOVOR :=  tInsertDocs6062.cDogovor
               , basefin.TIPDOC   := plpor.TIDK
               , basefin.TIDKGAL  := 1
               , basefin.CSOPRDOC := plpor.nrec
               , basefin.CPLPOR   := plpor.nrec
               , basefin.NODOC    := plpor.nodok
               , basefin.DESCR    := plpor.DESCR
               , basefin.DESGR    := plpor.DESGR
               , basefin.DDOC     := plpor.datob
               , basefin.SUMMA    := plpor.sumplat
               , basefin.DIRECT   := 2
               , basefin.CORG     := tInsertDocs6062.cOrg
               , basefin.CSOPRHOZ := SoprHoz.nrec
               , basefin.CPLDGDIST := 1h
              ;
             mylog('Создано собственное ПП в РС "' + usersdoc_own.name + '" № ' + plpor.NODOK +' от '+ plpor.DATOB +' на сумму '+ plpor.SUMPLAT)
           }
         if tInsertDocs6062.schetBU = '62.02'
           {
              if existplpor(usersdoc_ext.tipusers, tInsertDocs6062.plporNoDoc, tInsertDocs6062.plpordDoc)
                {
                   mylog('ПП '+tInsertDocs6062.plporNoDoc + ' от ' + tInsertDocs6062.plpordDoc+' уже есть в системе. Пропускаем');
                   continue;
                }

             insert plpor set
                 plpor.TIDKGAL   := 2
               , plpor.DIRECT    := 1
               , plpor.TIDK      := usersdoc_ext.tipusers
               , plpor.NODOK     := tInsertDocs6062.plporNoDoc
               , plpor.DESCR     := sgettune('user.descr')
               , plpor.DESGR     := sgettune('user.desgr')
               , plpor.YEARDOC   := year(tInsertDocs6062.plpordDoc)
               , plpor.DATVIP    := tInsertDocs6062.plpordDoc
               , plpor.DATOTS    := tInsertDocs6062.plpordDoc
               , plpor.DATOB     := tInsertDocs6062.plpordDoc
               , plpor.CPLAT     := cogettune('MYORG')
               , plpor.CBANKPLAT := cogettune('MYBANK')
               , plpor.NAMEPL1   := 'Импорт остатков 62.02'
               , plpor.CPOL      := tInsertDocs6062.corg
               , plpor.SUMPLAT   := tInsertDocs6062.summa
               , plpor.MODEDOC   := 1024
              ;
             Insert SoprHoz set
                  SoprHoz.CDOGOVOR := tInsertDocs6062.cDogovor
                , SoprHoz.direct   := 1
                , SoprHoz.DATOB    := tInsertDocs6062.plpordDoc
                , SoprHoz.TIPDOC   := plpor.TIDK
                , SoprHoz.TIDKGAL  := 2
                , SoprHoz.NODOC    := tInsertDocs6062.plporNoDoc
                , SoprHoz.DESCR    := plpor.DESCR
                , SoprHoz.DESGR    := plpor.DESGR
                , SoprHoz.SUMMA    := tInsertDocs6062.summa
                , SoprHoz.DIRECT   := 2
                , SoprHoz.VHSUMHOZ := '+'
                , SoprHoz.MODEDOC  := 1024
                , SoprHoz.CORG     := tInsertDocs6062.cOrg
                , soprhoz.CSOPRDOC := plpor.nrec
             ;
             Insert basefin set
                 basefin.CDOGOVOR :=  tInsertDocs6062.cDogovor
               , basefin.TIPDOC   := plpor.TIDK
               , basefin.TIDKGAL  := 2
               , basefin.CSOPRDOC := plpor.nrec
               , basefin.CPLPOR   := plpor.nrec
               , basefin.NODOC    := plpor.nodok
               , basefin.DESCR    := plpor.DESCR
               , basefin.DESGR    := plpor.DESGR
               , basefin.DDOC     := plpor.datob
               , basefin.SUMMA    := plpor.sumplat
               , basefin.DIRECT   := 1
               , basefin.CORG     := tInsertDocs6062.cOrg
               , basefin.CSOPRHOZ := SoprHoz.nrec
               , basefin.CPLDGDIST := 1h
              ;
             mylog('Создано стороннее ПП в РС "' + usersdoc_own.name + '" № ' + plpor.NODOK +' от '+ plpor.DATOB +' на сумму '+ plpor.SUMPLAT)
           }
      }
}
function getcgrnal(_Vat : string): comp;
{
  case _Vat of
       '20%' : result := GrNal20.nrec
       '18%' : result := GrNal18.nrec
       '10%' : result := GrNal10.nrec
        '0%' : result := Grnal0.nrec
   'без НДС' : result := GrNalWithout.nrec
   else {
      result := GrNalOther.nrec
    }
  end;
}
function getiscustom(_Vat : string) : word;
{
  result := 6;
  var _cgrnal : comp = getcgrnal(_Vat);
  if getfirst spgrnal where ((       _cgrnal == spgrnal.CGRNAL
            and cogettune('NALOG.CNALOGNDS') == spgrnal.CNALOG)) = tsOK
            then result := spgrnal.iscustom;
}
function getnalog(_Vat : string) : double;
{
  case _Vat of
       '20%' : result := 20
       '18%' : result := 18
       '10%' : result := 10
        '0%' : result := 0
   'без НДС' : result := 0
   else {
      result := 0
    }
  end;
}
procedure GetParamSkPr_wOrder(_vidsopr : word; var _skPr : word; var _wOrder : word);
{
  // 1 расход  2  приход 3 оба wOrder
 case _vidsopr of
   600: {
       _skPr := 0;  // склад
       _wOrder := 3; // формируем и приход и расход
     }
   101 : { // 1 расход  2  приход 3 оба wOrder
       _skPr := 0;  // склад
       _wOrder := 2; // формируем приход
   }
   201 : { // 1 расход  2  приход 3 оба wOrder
       _skPr := 0;  // склад
       _wOrder := 1; // формируем  расход
   }
   501 : { // 1 расход  2  приход 3 оба wOrder
       _skPr := 0;  // склад
       _wOrder := 3; // формируем и приход и расход
   }
   end;
}

function getcreateparty(_Party_kod, _Party_name : string): comp;
{
 if getfirst katparty where (( _Party_name == katparty.name
                           and _Party_kod  == katparty.kod (noindex)
                           )) <> tsOK {
                             insert katparty set
                                katparty.name := _Party_name
                              , katparty.kod  := _Party_kod
                             ;
                           }
   result := katparty.nrec
}
procedure Insert_prihodSFO;
{
   _loop tFiles where tFiles.FlagErr <> 2
    if SearchMarker(MyMarkerDocs, tFiles.nrec, mid)
      _loop tInsertDocs019 where ((tFiles.nrec == tInsertDocs019.ctFiles))
//        and (tInsertDocs4110.schetBU = '60.02' or tInsertDocs4110.schetBU = '62.02')
        and tInsertDocs019.FlagErr = 0
       {
        IF getfirst mbpmove where ((          1 == mbpmove.STATUS
                                   and _dateOpr == mbpmove.DMOVE
                          and 'Импорт остатков' == mbpmove.NOM
                  and tInsertDocs019.sklad_nrec == mbpmove.CPODRT (noindex)
                    and tInsertDocs019.MOL_nrec == mbpmove.CMOLT (noindex)
               and if(tInsertDocs019.isSFO,1,0) == mbpmove.MBPKIND (noindex))) <> tsOK
               {
                 insert mbpmove set
                    mbpmove.STATUS  := 1
                  , mbpmove.DMOVE   := _dateOpr
                  , mbpmove.NOM     := 'Импорт остатков'
                  , mbpmove.CPODRT  := tInsertDocs019.sklad_nrec
                  , mbpmove.CMOLT   := tInsertDocs019.MOL_nrec
                  , mbpmove.MBPKIND := if(tInsertDocs019.isSFO,1,0)
                  , mbpmove.DESCR   := sgettune('user.descr')
                  , mbpmove.DESGR   := sgettune('user.desgr')
                 ;
                 mylog(if(mbpmove.MBPKIND = 1,'Спецодежда','Спецоснастка')+'| Создан документ "Приход, поступление" № "' +mbpmove.NOM+ '" от ' + _dateOpr);
                 mylog('           - Склад "' + if(getfirst katpodr where ((mbpmove.CPODRT == katpodr.nrec)) = tsok, katpodr.kod + ' ' + katpodr.name,'')+'"');
                 mylog('           -   МОЛ "' + if(getfirst katmol where ((mbpmove.CMOLT == katmol.nrec)) = tsok, katmol.kod + ' ' + katmol.name,'')+'"');
               }
           insert mbpin set
                mbpin.NOM      := mbpmove.NOM
              , mbpin.DIN      := mbpmove.DMOVE
              , mbpin.CPARTYF  := getcreateparty(tInsertDocs019.Party_kod, tInsertDocs019.Party_name)
              , mbpin.KOLDOC   := tInsertDocs019.kol
              , mbpin.KOLFACT  := tInsertDocs019.kol
              , mbpin.PRICE    := tInsertDocs019.price
              , mbpin.SUMMA    := tInsertDocs019.Summa
              , mbpin.SUMFACT  := tInsertDocs019.Summa
              , mbpin.INSTATE  := 1
              , mbpin.STATUS   := 1
              , mbpin.CMBP     := tInsertDocs019.katmbp_nrec
              , mbpin.CPODR    := mbpmove.CPODRT
              , mbpin.CMOL     := mbpmove.CMOLT
              , mbpin.CSOPR    := mbpmove.nrec
              , mbpin.STATUS   := 1
              , mbpin.DATEZERO := to_date(31,12,2050)
              , mbpin.INEKSPL  := 1
              , mbpin.DATEEKSP := tInsertDocs019.date_In
              , mbpin.DEXPLBEG := tInsertDocs019.date_In
              , mbpin.SROKBEG  := tInsertDocs019.srok
              , mbpin.DATEEND  := tInsertDocs019.date_end
              , mbpin.STATAVTO := 1
              , mbpin.EXTMOD   := 1
            ;
            mylog(if(mbpmove.MBPKIND = 1,'Спецодежда','Спецоснастка')+'| в документ "Приход, поступление" № "' +mbpmove.NOM+ '" от ' + _dateOpr);
            mylog('           - Склад "' + if(getfirst katpodr where ((mbpmove.CPODRT == katpodr.nrec)) = tsok, katpodr.kod + ' ' + katpodr.name,'')+'"');
            mylog('           -   МОЛ "' + if(getfirst katmol where ((mbpmove.CMOLT == katmol.nrec)) = tsok, katmol.kod + ' ' + katmol.name,'')+'"');
            mylog('           -   добавлена позиция "' + if(getfirst katmbp where ((mbpin.CMBP == katmbp.nrec)) = tsok, katmbp.name,'')+'", кол-во '+mbpin.KOLFACT+', цена ' + mbpin.price);
          update current mbpmove set mbpmove.summa := mbpmove.summa + mbpin.summa;
       }
}

procedure InsertPrihNaklOrderDoocenka;
{
   _loop tFiles where tFiles.FlagErr <> 2
    if SearchMarker(MyMarkerDocs, tFiles.nrec, mid)
      _loop tInsertDocs4110 where ((tFiles.nrec == tInsertDocs4110.ctFiles))
//        and (tInsertDocs4110.schetBU = '60.02' or tInsertDocs4110.schetBU = '62.02')
        and tInsertDocs4110.FlagErr = 0
       {
         if(getfirst katsopr where ((if(tInsertDocs4110.isAktIzlishki <> 'TRUE',101,611) == katsopr.vidsopr
                                                           and tInsertDocs4110.soprdSopr == katsopr.dSopr
                                                           and tInsertDocs4110.soprnSopr == katsopr.nSopr
                                    ))
                and KatSopr.CDOGOVOR = if(tInsertDocs4110.isAktIzlishki <> 'TRUE',tInsertDocs4110.cDog,0h)
                and KatSopr.cpodrto  = if(tInsertDocs4110.isAktIzlishki <> 'TRUE',0h, tInsertDocs4110.cskl)
                and KatSopr.cmolto   = if(tInsertDocs4110.isAktIzlishki <> 'TRUE',0h, tInsertDocs4110.cmol)
            ) <> tsOK {
                                 var _cOrg, _cDog : comp = 0h;
                                 if tInsertDocs4110.isAktIzlishki <> 'TRUE'
                                     if getfirst dogovor where ((tInsertDocs4110.cDog == dogovor.nrec)) = tsOK {
                                       _cOrg := dogovor.corg;
                                       _cDog := dogovor.nrec;
                                     }
                                   insert KATSOPR set
                                     KatSopr.NAME     := 'Импорт остатков ' + tInsertDocs4110.SchetBU
                                    ,KatSopr.DESCR    := sgettune('user.descr')
                                    ,KatSopr.CORG     := sgettune('user.desgr')
                                    ,KatSopr.VHODNAL  := if(tInsertDocs4110.isAktIzlishki <> 'TRUE',2,1)
                                    ,KatSopr.STATUS   := 1
//                                    ,KatSopr.CNOTE   :=
//                                    ,katsopr.summa    := tInsertDocs6062.summa
                                    ,KatSopr.TIPSOPR  := if(tInsertDocs4110.isAktIzlishki <> 'TRUE',1,0)
                                    ,KatSopr.DSOPR    := tInsertDocs4110.soprdsopr
                                    ,KatSopr.DPRICE   := tInsertDocs4110.soprdsopr
                                    ,KatSopr.YEARSOPR := year(tInsertDocs4110.soprdsopr)
                                    ,KatSopr.NSOPR    := tInsertDocs4110.soprnsopr
                                    ,KatSopr.VIDSOPR  := if(tInsertDocs4110.isAktIzlishki <> 'TRUE',101,611)
                                    ,KatSopr.CDOGOVOR := _cDog
                                    ,KatSopr.CGRUZFROM:= _cOrg
                                    ,KatSopr.CORGBASE := _cOrg
                                    ,KatSopr.CORG     := _cOrg
                                    ,KatSopr.cpodrto  := if(tInsertDocs4110.isAktIzlishki <> 'TRUE',0h, tInsertDocs4110.cskl)
                                    ,KatSopr.cmolto   := if(tInsertDocs4110.isAktIzlishki <> 'TRUE',0h, tInsertDocs4110.cmol)
//                                    ,KatSopr.CCALPLAN := tInsertDocs4110.ccalplan
                                  ;
                                   Insert soprhoz set
                                     soprhoz.CDOGOVOR := katsopr.cDogovor
                                   , soprhoz.CSOPRDOC := katsopr.nrec
                                   , soprhoz.DATOB    := katsopr.dsopr
                                   , soprhoz.TIPDOC   := katsopr.vidsopr
                                   , soprhoz.TIDKGAL  := katsopr.vidsopr
                                   , soprhoz.NODOC    := katsopr.nsopr
                                   , soprhoz.DESCR    := katsopr.descr
                                   , soprhoz.DESGR    := katsopr.desgr
                                   , soprhoz.SUMMA    := katsopr.summa
                                   , soprhoz.DIRECT   := 1
                                   , soprhoz.VHSUMHOZ := '+'
                                   , soprhoz.CORG     := katsopr.corg
                                 ;
                                 mylog('Сформирована приходная накладная ' + KatSopr.nsopr +' от '+ KatSopr.dsopr);
                              }


              Insert spsopr set
                 spsopr.CSOPR     := katsopr.nrec
               , spsopr.DSOPR     := katsopr.dsopr
               , spsopr.NPP       := 1
               , spsopr.PRMC      := 1
               , spsopr.CMCUSL    := tInsertDocs4110.cmc
               , spsopr.COTPED    := tInsertDocs4110.cotped
               , spsopr.KOL       := tInsertDocs4110.kolfordoc
               , spsopr.KOLOPL    := tInsertDocs4110.kolfordoc
               , spsopr.KOLFACT   := tInsertDocs4110.kolfordoc
               , spsopr.PRICE     := tInsertDocs4110.SumWithoutVat/tInsertDocs4110.kolfordoc
               , spsopr.RPRICE    := tInsertDocs4110.SumWithoutVat/tInsertDocs4110.kolfordoc
               , spsopr.PRICEN    := tInsertDocs4110.SumWithoutVat/tInsertDocs4110.kolfordoc
               , spsopr.CGRNAL    := if(tInsertDocs4110.isAktIzlishki <> 'TRUE',getcgrnal(tInsertDocs4110.Vat),0h)
               , spsopr.VIDSOPR   := katsopr.vidsopr
               , spsopr.MANUALTAX := if(tInsertDocs4110.isAktIzlishki <> 'TRUE', 1,0)
               , spsopr.SUMNDS    := if(tInsertDocs4110.isAktIzlishki <> 'TRUE',tInsertDocs4110.SumVat,0)
              ;

              update current tInsertDocs4110 set
                  tInsertDocs4110.csopr   := katsopr.nrec
                , tInsertDocs4110.cspsopr := spsopr.nrec
               ;

              coSetAttr(cospsopr, spsopr.nrec,'.Счет МЦ', tInsertDocs4110.cSchet, tInsertDocs4110.SchetBU) ;
              insert specmtr set
                 specmtr.cSaldTune := SaldTune.nrec
               , specmtr.cobj      := tInsertDocs4110.kau1podrinitiator
               , specmtr.CKAU[1]   := tInsertDocs4110.kau2shifrzakaza
               , specmtr.COTABLE   := 1110
               , specmtr.CSPEC     := spsopr.nrec
               ;

              //sSetAttr('.Счет МЦ')
              if tInsertDocs4110.isAktIzlishki <> 'TRUE' {
                insert spdocnal set
                    spdocnal.CSPDOC   := spsopr.nrec
                  , spdocnal.CDOC     := katsopr.nrec
                  , spdocnal.corg     := katsopr.corg
                  , spdocnal.TIPDOC   := spsopr.vidsopr
                  , spdocnal.CGRNAL   := spsopr.CGRNAL
                  , spdocnal.CNALOG   := cogettune('NALOG.CNALOGNDS')
                  , spdocnal.NALOG    := getnalog(tInsertDocs4110.Vat)
                  , spdocnal.SUMNAL   := spsopr.SUMNDS
                  , spdocnal.SUMMA    := spsopr.SUMNDS
                  , spdocnal.ISCUSTOM := getiscustom(tInsertDocs4110.Vat)
                 ;
                insert soprordb set
                   soprordb.CSPSOPR  := spsopr.nrec
                 , soprordb.CPODR    := tInsertDocs4110.cskl
                 , soprordb.CMOL     := tInsertDocs4110.cmol
                 , soprordb.CMC      := spsopr.cmcusl
                 , soprordb.CSOPRDOC := katsopr.nrec
                 , soprordb.COTPED   := spsopr.cotped
                  // ? soprordb.CPARTY
                 , soprordb.PRICE    := spsopr.price
                 , soprordb.KOL      := spsopr.kol
                ;
              }
       }


   var _wTune_Party_AvtoForm : word = wGetTune('Party.AvtoForm');
  var _McUsl_AvtoParty: boolean = boGetTune('McUsl.AvtoParty');

  var oMakeParty    : iMakeParty new;
   SetTune('Party.AvtoForm', 1 );
   SetTune('McUsl.AvtoParty', true);



   _loop tInsertDocs4110 where tInsertDocs4110.csopr <> 0h
     if getfirst katsopr where ((tInsertDocs4110.csopr == katsopr.nrec)) = tsOK {

      if(getfirst spsopr where ((katsopr.nrec == spsopr.csopr)) and spsopr.cparty = 0h) = tsOK{
          var _summa, _SNALOGS : double = 0;
            setvisualheader('Формирование партий'+
            ''#13''+'Накладная ' + katsopr.nsopr + ' от ' + katsopr.dsopr);

          var tmpMarkParty: TPtr = InitMarker('SpSoprParty', 8, 100, 10, False);
          clearmarker(tmpMarkParty);
          _loop spsopr where ((katsopr.nrec == spsopr.csopr)) {
            insertmarker(tmpMarkParty,spsopr.nrec);
            _summa   += tInsertDocs4110.SumWithoutVat + tInsertDocs4110.SumVat;
            _SNALOGS += tInsertDocs4110.SumVat;
          }

            update current katsopr set
                  katsopr.summa   := _summa
                , katsopr.SNALOGS := _SNALOGS
               ;
            if getfirst soprhoz where ((katsopr.vidsopr == soprhoz.TIPDOC
                                     and   katsopr.nrec == soprhoz.CSOPRDOC )) = tsOK {
                  update current soprhoz set soprhoz.SUMMA := katsopr.summa
               }

          DoneMarker(tmpMarkParty, 'SpSoprParty');
          oMakeParty.CheckPartys(KatSopr.nRec, 0, 1);
          mylog('Накладная ' + katsopr.nsopr + ' от ' + katsopr.dsopr + ' сформированы партии');
/*
            var iGP_MakeMove : GP_MakeMove;
            var _skPr, _wOrder : word;
            GetParamSkPr_wOrder(katSopr.vidsopr, _skPr, _wOrder);
            setvisualheader('Формирование ордеров'+
            ''#13''+'Накладная ' + katsopr.nsopr + ' от ' + katsopr.dsopr);

            if iGP_MakeMove.MakeMoveForESB(  katSopr.nrec
                           , if(katSopr.vidsopr = 501,168,28) // 28  для НОП - 168
                           , _skPr // склад -производствр
                           , 0 // wDel
                           , 0 // wDate
                           , 0 // wTXO
                           , 0 // wMode
                           , 2 // wParam
                           , _wOrder //  1 расход  2  приход 3 оба wOrder
                           , _dateOpr
                          )
                          {
                 mylog('Накладная ' + katsopr.nsopr + ' от ' + katsopr.dsopr + ' оприходована '  + katsopr.dopr);
             }
             else {
                 mylog('Накладная ' + katsopr.nsopr + ' от ' + katsopr.dsopr + ' НЕ УДАЛОСЬ СФОРМИРОВАТЬ ОРДЕРА ');
             }
*/
            if tInsertDocs4110.SchFact_NoDoc <> '' and  tInsertDocs4110.isAktIzlishki <> 'TRUE'{

                 if not iSf.DoInit(2) {
                   mylog('Накладная ' + katsopr.nsopr + ' от ' + katsopr.dsopr + ' не удалось инициализировать объект по работе с СФ');
                 }
                 else {
                   if iSF.CreateSFbyKatSopr(KatSopr.NRec) {
                       rereadrecord;
                       mylog('Накладная ' + katsopr.nsopr + ' от ' + katsopr.dsopr + ' Сформирована СФ ' + katsopr.CSCHFACT);
                       if getfirst schfact where ((katsopr.CSCHFACT == schfact.nrec)) = tsOK {
                          SCHFACT.DFACT := tInsertDocs4110.SchFact_date;
                          SCHFACT.DPOST := tInsertDocs4110.SchFact_dateIn;
                          SCHFACT.NUM   := tInsertDocs4110.SchFact_NoDoc;

                          case tInsertDocs4110.VAT of
                          '18%','20%':  {//18%20%
                                          SCHFACT.Sum[1] := tInsertDocs4110.SchFact_SumWOVat;
                                          SCHFACT.SUM[2] := tInsertDocs4110.SchFact_SumVat;
                                          SCHFACT.SUM[3] := tInsertDocs4110.SchFact_SumWithVAT;
                                        }
                          '10%':        {//10
                                          SCHFACT.SUM[4] := tInsertDocs4110. SchFact_SumWOVat;
                                          SCHFACT.SUM[5] := tInsertDocs4110. SchFact_SumVat;
                                          SCHFACT.SUM[5] := tInsertDocs4110. SchFact_SumWithVAT;
                                        }
                          '0%' :        {//0
                                          SCHFACT.SUM[23] := tInsertDocs4110.SchFact_SumWOVat;
                                          //---              SchFact_SumVat;
                                          SCHFACT.SUM[9]  := tInsertDocs4110.SchFact_SumWithVAT;
                                        }
                          'Без НДС':    {//without
                                          SCHFACT.SUM[9]  := tInsertDocs4110.SchFact_SumWOVat;
                                          //--               SchFact_SumVat;
                                          //--               SchFact_SumWithVAT;
                                        }
                           else         {
                                          SCHFACT.Sum[1] := tInsertDocs4110.SchFact_SumWOVat;
                                          SCHFACT.SUM[2] := tInsertDocs4110.SchFact_SumVat;
                                          SCHFACT.SUM[3] := tInsertDocs4110.SchFact_SumWithVAT;
                                        }
                           end;
                         update current SCHFACT;
                       }
                   }
                   else{
                       mylog('Накладная ' + katsopr.nsopr + ' от ' + katsopr.dsopr + ' НЕ УДАЛОСЬ сформировать СФ');
                   }
                 }
           }
        }


        if getfirst spsopr where ((tInsertDocs4110.cspsopr == spsopr.nrec)) = tsOK {
            if spsopr.cparty <> 0h
               then {
                   coSetAttr(cokatparty, spsopr.cparty,'.Счет МЦ', tInsertDocs4110.cSchet, tInsertDocs4110.SchetBU) ;
                   coSetAttr(cokatparty, spsopr.cparty,'.Приходный документ партии (ЭМ)', katsopr.nrec, 'Приходная накладная '+katsopr.nsopr + ' от ' + katsopr.dsopr) ;
                   coSetAttr(cokatparty, spsopr.cparty,'.Счет-фактура партии (ЭМ)', SCHFACT.nrec, 'СФ '+SCHFACT.num + ' от ' +SCHFACT.DFACT) ;

                   var _igk : string = oIGK_Dog.GetIGK(katsopr.cdogovor) ;
                   if _igk <> '' {
                      sSetAttr(coKatParty, KatParty.nrec, 'Идентификатор государственного контракта',_igk);
                     update current katparty set katparty.CGROUPPARTY := _cGrPartyGOZ;
                   }
                   else {
                     update current katparty set katparty.CGROUPPARTY := _cGrPartyCOM;
                   }
                 }


               mylog('sumTZR = '+tInsertDocs4110.sumTZR);
               mylog('SumWithoutVat = '+tInsertDocs4110.SumWithoutVat);

              if tInsertDocs4110.sumTZR <> 0 and tInsertDocs4110.sumTZR - tInsertDocs4110.SumWithoutVat > 0 { // дооценочные ордера делать надо
                if getfirst sklorder where ((      0 == sklorder.sp
                            and tInsertDocs4110.cskl == sklorder.CPODR
                            and tInsertDocs4110.cmol == sklorder.CMOL
                                        and _dateOpr == sklorder.DORD
                                               and 0 == sklorder.vidorder (noindex)
                                               and 4 == sklorder.TIPORD (noindex)
                               and 'ИМПОРТ ОСТАТКОВ' == sklorder.NORDER (noindex) )) <> tsOK {
                           insert sklorder set
                              sklorder.sp       :=0
                            , sklorder.CPODR    := tInsertDocs4110.cskl
                            , sklorder.CMOL     := tInsertDocs4110.cmol
                            , sklorder.DORD     := _dateOpr
                            , sklorder.vidorder := 0
                            , sklorder.TIPORD   := 4
                            , sklorder.NORDER   := 'ИМПОРТ ОСТАТКОВ'
                            , sklorder.YEARORD  := year(_dateOpr)
                            , sklorder.DESCR    := sgettune('user.descr')
                            , sklorder.DESGR    := sgettune('user.desgr')
                           ;
                     mylog('Создан дооценочный ордер ' + sklorder.NORDER + ' от ' + sklorder.DORD);
                     mylog('           - Склад "' + if(getfirst katpodr where ((sklorder.cPOdr == katpodr.nrec)) = tsok, katpodr.kod + ' ' + katpodr.name,'')+'"');
                     mylog('           -   МОЛ "' + if(getfirst katmol where ((sklorder.cmol == katmol.nrec)) = tsok, katmol.kod + ' ' + katmol.name,'')+'"');
                }
                mylog('В дооценочный ордер ' + sklorder.NORDER + ' от ' + sklorder.DORD + ' добавлена позиция на сумму ' + (tInsertDocs4110.sumTZR - tInsertDocs4110.SumWithoutVat));
                insert sporder set
                   sporder.descr     := sklorder.descr
                 , sporder.desgr     := sklorder.desgr
                 , sporder.SP        := SKLORDER.sp
                 , sporder.CSKLORDER := SKLORDER.nrec
                 , sporder.DORD      := SKLORDER.dord
                 , sporder.VIDORDER  := SKLORDER.VIDORDER
                 , sporder.TIPORD    := SKLORDER.TIPORD
                 , sporder.CMC       := tInsertDocs4110.CMC
                 , sporder.SRPRICE   := tInsertDocs4110.sumTZR - tInsertDocs4110.SumWithoutVat
                 , sporder.RSRPRICE  := tInsertDocs4110.sumTZR - tInsertDocs4110.SumWithoutVat
                 , sporder.CCMOL     := SKLORDER.cmol
                 , sporder.CCPODR    := SKLORDER.cpodr
                 , sporder.EMPTY     := 4
                 , sporder.CPARTY    := spsopr.cparty
                ;
               insert specmtr set
                  specmtr.cSaldTune := SaldTune.nrec
                , specmtr.cobj      := tInsertDocs4110.kau1podrinitiator
                , specmtr.CKAU[1]   := tInsertDocs4110.kau2shifrzakaza
                , specmtr.COTABLE   := 1112
                , specmtr.CSPEC     := sporder.nrec
                ;
                 oModifOrds.AnySpOrder_UpDate(TypeSpOrder(SpOrder.buffer));
              }
        }

     }
   SetTune('Party.AvtoForm', _wTune_Party_AvtoForm );
   SetTune('McUsl.AvtoParty', _McUsl_AvtoParty);
}

Procedure CreateDocs6062;
{
   StartNewVisual(vtIndicatorVisual,vfTimer,'Формирование документов',getmarkercount(MyMarkerDocs));

   InsertAkts;
   InsertPlPor;

 if visualizationactive  StopVisual('The End',vfTimer);
}

Procedure CreateDocs4110;
{
   StartNewVisual(vtIndicatorVisual,vfTimer,'Формирование документов',getmarkercount(MyMarkerDocs));

   InsertPrihNaklOrderDoocenka;

 if visualizationactive  StopVisual('The End',vfTimer);
} // Procedure InsertAktIzlishki(_log: string);

Procedure CreateDocs019;
{
   StartNewVisual(vtIndicatorVisual,vfTimer,'Формирование документов',getmarkercount(MyMarkerDocs));

   Insert_prihodSFO;

 if visualizationactive  StopVisual('The End',vfTimer);
}

Screen scrImportOstatki ;
  show at (,,, 4);
  Fields
    dateformat   : NoProtect,{Font = {backcolor = if(dateformat = '', colorneed,0);}};
    ListName     : NoProtect,{Font = {backcolor = if(ListName = '', colorneed,0);}};
    Folder_input :  Protect, PickButton,{Font = {backcolor = if(Folder_input = '', colorneed,0);}};
    typeTable : [list 0 'Счет 60 62', 1 'счет 41 10',2 'Счет 019'];
  buttons
    cmOK,,,;
    cmCreateDocs,,,;
    cmCancel,,,;
<<'Импорт заказов от покупателей'
Формат даты в файле .@@@@@@@@@@@@ Наименование листа в книге EXCEL.@@@@@@@@@@@@@@@@@@@@@@
Папка с файлами данных .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Тип загрузки .@@@@@@@@@@@@@@@@@@@@@@@@@@

  <.Получить файлы.>                          <.Сформировать документы.>                              <. Отмена .>
>>
end;
Screen scrImportOstatki6062;
  show at (,5,, 9);
  Fields
    Usl_akt.name       : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnUsl_akt), colorneed,0);}};
    Usersdoc_own.name  : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnUsersdoc_own), colorneed,0);}};
    Usersdoc_ext.name  : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnUsersdoc_ext), colorneed,0);}};
<<'Импорт накладных, актов, СФ 60 62 счет'
    `Услуга для спецификации актов (60.01):`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Расчетный счет для собственных ПП (60.02):`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Расчетный счет для сторонних ПП (62.02):`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;
Screen scrImportOstatki41;
  show at (,5,, 9);
  Fields
   _dateOpr     : NoProtect,{Font = {backcolor = if(_dateOpr = 0, colorneed,0);}};
   GrNal20.name      : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnGrNal20), colorneed,0);}};
   GrNal18.name      : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnGrNal18), colorneed,0);}};
   GrNal10.name      : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnGrNal10), colorneed,0);}};
   Grnal0.name       : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnGrnal0), colorneed,0);}};
   GrNalOther.name   : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnGrNalOther), colorneed,0);}};
   GrNalWithout.name : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnGrNalWithout), colorneed,0);}};
   podr100.name      : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnpodr100), colorneed,0);}};
   podrokbfakel.name : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnpodrokbfakel), colorneed,0);}};

<<'Импорт ТМЦ 41 счет'
Дата формирования ордеров .@@@@@@@@@@@
            Поле ставка НДС - ставим группу налогов:
                         20%.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     18%.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                         10%.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      0%.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
При всех остальных значениях.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ без НДС.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 Подразделение "100 <Основное производство>".@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
              Подразделение "01 ОКБ <Факел>".@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;
Screen scrImportOstatki019;
  show at (,5,, 9);
  Fields
   _dateOpr     : NoProtect,{Font = {backcolor = if(_dateOpr = 0, colorneed,0);}};
<<'Импорт спецодежды и спецоснастки 019 счет'
Формирование документов "Приход, поступление" в модулях спецодежда и спецоснастка

  Дата формирования документов .@@@@@@@@@@@

>>
end;


browse brow1('',,sci1EscIns);
 show at(,10, ,12);
table tFiles_br;
 recMarker=pMarker{tFiles_br.nrec}; // по умолчанию итак nrec юзается...
fields
  tFiles_br.cFile 'Файл' headerAlign = centered:protect,[15];
  tFiles_br.Descr 'Описание' headerAlign = centered:protect,[2] , {Font = {backcolor = getColor(tFiles_br.FlagErr);}};
end;

browse brow6062('',,sci1Esc);
 show at(,13,,);
table tInsertDocs6062_br;
fields
 {Font = {
          backcolor = getColor(tInsertDocs6062_br.FlagErr);
         }
 };
  tInsertDocs6062_br.FileRow   'Строка','в файле' headerAlign = centered:protect,[4];
  tInsertDocs6062_br.schetBU   'Счет ','БУ' headerAlign = centered:protect,[4];
  KatOrg.name           'Организация' headerAlign = centered:protect,[4];
  DOGOVOR.NODOC + ' от ' + DOGOVOR.DDOC 'Договор' headerAlign = centered:protect,[4];
  CALPLAN.NODOC + ' от ' + CALPLAN.dInput 'ПКП' headerAlign = centered:protect,[4];
  tInsertDocs6062_br.soprnSopr  'Акт','номер' headerAlign = centered:protect,[4];// ДатаНакладной
  tInsertDocs6062_br.soprdSopr  'Акт','дата' headerAlign = centered:protect,[4];// НомерНакладной
  tInsertDocs6062_br.plporNoDoc 'ПП','номер' headerAlign = centered:protect,[4];// НомерПП
  tInsertDocs6062_br.plpordDoc  'ПП','дата' headerAlign = centered:protect,[4];// НомерПП
  tInsertDocs6062_br.summa      'Сумма' headerAlign = centered:protect,[4];// СуммаБУ
  tInsertDocs6062_br.Descr      'Описание' headerAlign = centered:protect,[4];
end;

browse brow4110('',,sci1Esc);
 show at(,13,,);
table tInsertDocs4110_br;
fields
 {Font = {
          backcolor = getColor(tInsertDocs4110_br.FlagErr);
         }
 };
  tInsertDocs4110_br.FileRow   'Строка','в файле' headerAlign = centered:protect,[4];
  tInsertDocs4110_br.MC_Uid1C        'UID ТМЦ из 1С'         headerAlign = centered:protect,[4];
  tInsertDocs4110_br.MC_name         'Наименование'          headerAlign = centered:protect,[4];
  tInsertDocs4110_br.Sklad_kod       'Код склад'             headerAlign = centered:protect,[4];
  tInsertDocs4110_br.MOL_TN          'Табельный номер МОЛ'   headerAlign = centered:protect,[4];
  tInsertDocs4110_br.SchetBU         'Счет/субсчет'          headerAlign = centered:protect,[4];
  tInsertDocs4110_br.edIzm           'Единица','измерения'   headerAlign = centered:protect,[4];
  tInsertDocs4110_br.kol             'Количество'            headerAlign = centered:protect,[4];
  tInsertDocs4110_br.PriceWithoutVat 'Цена руб.','без НДС'   headerAlign = centered:protect,[4];
  tInsertDocs4110_br.SumWithoutVat   'Сумма руб.','без НДС'  headerAlign = centered:protect,[4];
  tInsertDocs4110_br.SumVat          'Сумма руб.','НДС'      headerAlign = centered:protect,[4];
  tInsertDocs4110_br.SumWithVAT      'Сумма руб.','с НДС'    headerAlign = centered:protect,[4];
  tInsertDocs4110_br.Dog_UID1C       'UID договора','из 1С'  headerAlign = centered:protect,[4];
  tInsertDocs4110_br.soprdSopr       'Дата','накладной'      headerAlign = centered:protect,[4];
  tInsertDocs4110_br.soprnSopr       'Номер','накладной'     headerAlign = centered:protect,[4];
  tInsertDocs4110_br.SchFact_uid1C   'UID СФ','из 1С'        headerAlign = centered:protect,[4];
  tInsertDocs4110_br.SchFact_date    'Дата','СФ'             headerAlign = centered:protect,[4];
  tInsertDocs4110_br.SchFact_dateIn  'Дата','получения СФ'   headerAlign = centered:protect,[4];
  tInsertDocs4110_br.SchFact_NoDoc   'Номер','СФ'            headerAlign = centered:protect,[4];
  tInsertDocs4110_br.Vat             'Ставка','НДС %'        headerAlign = centered:protect,[4];
  tInsertDocs4110_br.Descr      'Описание' headerAlign = centered:protect,[4];

end;

browse brow019('',,sci1Esc);
 show at(,13,,);
table tInsertDocs019_br;
fields
 {Font = {
          backcolor = getColor(tInsertDocs019_br.FlagErr);
         }
 };
  tInsertDocs019_br.FileRow    'Строка','в файле' headerAlign = centered:protect,[4];
  tInsertDocs019_br.MC_Uid1C   'UID ТМЦ из 1С' headerAlign = centered:protect,[4];
  tInsertDocs019_br.MC_name    'Наименование' headerAlign = centered:protect,[4];
  tInsertDocs019_br.sklad_kod  'Код склада или','подразделения (из Галактики)' headerAlign = centered:protect,[4];
  tInsertDocs019_br.MOL_kod    'Табельный','номер МОЛ' headerAlign = centered:protect,[4];
  tInsertDocs019_br.MOL_name   'МОЛ' headerAlign = centered:protect,[4];
  tInsertDocs019_br.kol        'Количество' headerAlign = centered:protect,[4];
  tInsertDocs019_br.price      'Цена руб.' headerAlign = centered:protect,[4];
  tInsertDocs019_br.summa      'Сумма руб.' headerAlign = centered:protect,[4];
  tInsertDocs019_br.Party_kod  'Код партии' headerAlign = centered:protect,[4];
  tInsertDocs019_br.Party_name 'Наименование','партии' headerAlign = centered:protect,[4];
  tInsertDocs019_br.date_In    'дата ввода','в эксплуатацию' headerAlign = centered:protect,[4];
  tInsertDocs019_br.srok       'срок службы','в месяцах' headerAlign = centered:protect,[4];
  tInsertDocs019_br.date_end   'дата окончания','эксплуатации' headerAlign = centered:protect,[4];
  tInsertDocs019_br.isSFO      'Спецодежда' headerAlign = centered:protect,[4];
  tInsertDocs019_br.descr      'Описание' headerAlign = centered:protect,[4];
end;


handleevent
cminit:{
 typeTable := 0;
 Folder_input := '';
 ReadMyDSK(Folder_input, 'importOstatki_Folder_input', TRUE);
 ReadMyDSK(dateformat , 'importOstatki_dateformat', TRUE);
 ReadMyDSK(ListName , 'importOstatki_ListName', TRUE);

 ReadMyDSK( _cUsl        , 'importOstatki__cUsl', TRUE);
 ReadMyDSK( _cCashBank_Own, 'importOstatki__cCashBankOwn', TRUE);
 ReadMyDSK( _cCashBank_Ext, 'importOstatki__cCashBankExt', TRUE);

 ReadMyDSK( _cGrNal20        , 'importOstatki___cGrNal20', TRUE);
 ReadMyDSK( _cGrNal18        , 'importOstatki___cGrNal18', TRUE);
 ReadMyDSK( _cGrNal10        , 'importOstatki___cGrNal10', TRUE);
 ReadMyDSK( _cGrnal0         , 'importOstatki___cGrnal0', TRUE);
 ReadMyDSK( _cGrNalWithout   , 'importOstatki___cGrNalWithout', TRUE);
 ReadMyDSK( _cGrNalOther     , 'importOstatki___cGrNalOther', TRUE);

 ReadMyDSK( _cpodr100     , 'importOstatki___cpodr100', True);
 ReadMyDSK( _cpodrokbfakel, 'importOstatki___cpodrokbfakel', True);

 ReadMyDSK( _dateOpr, 'importOstatki___dateOpr', True);


 if(getfirst SALDTUNE1 where SALDTUNE1.NAME = 'МТО') = tsOK {
   set _cSaldTune := SALDTUNE1.nrec;
 }
 else {
   message('Не найден целевой учет "МТО". Работа прекращена',error);
   stop;abort;exit
 }

 if getfirst GROUPPARTY where ((                   'ГОЗ' == GROUPPARTY.kod
                            and 'Исполнение гос.заказов' == GROUPPARTY.name (noindex))) = tsOK {
    set _cGrPartyGOZ := GROUPPARTY.nrec
   }
 else {
   message('Не найдена группа партий с кодом "ГОЗ" и наименованием "Исполнение гос.заказов"'+
 +    ''#13'' + 'Работа прекращена',error);
   stop;abort;exit
 }

 if getfirst GROUPPARTY where ((                   'Ком' == GROUPPARTY.kod
                            and 'Коммерческие заказы' == GROUPPARTY.name (noindex))) = tsOK {
    set _cGrPartyCOM := GROUPPARTY.nrec
   }
 else {
   message('Не найдена группа партий с кодом "Ком" и наименованием "Коммерческие заказы"'+
    + ''#13'' + 'Работа прекращена',error);
   stop;abort;exit
 }






 set _cUsl         := _cUsl  ;
 set _cCashBank_Own := _cCashBank_Own ;
 set _cCashBank_Ext := _cCashBank_Ext;

 set _cGrNal20      := _cGrNal20 ;
 set _cGrNal18      := _cGrNal18 ;
 set _cGrNal10      := _cGrNal10 ;
 set _cGrnal0       := _cGrnal0  ;
 set _cGrNalWithout := _cGrNalWithout;
 set _cGrNalOther   := _cGrNalOther   ;

 if getfirst usersdoc_own = tsOK {}
 if getfirst usersdoc_ext = tsOK {}

 if getfirst GrNal20 = tsOK {}
 if getfirst GrNal18 = tsOK {}
 if getfirst GrNal10 = tsOK {}
 if getfirst Grnal0 = tsOK {}
 if getfirst GrNalWithout = tsOK {}
 if getfirst GrNalOther = tsOK {}

 if NameMarkerFiles = '' then NameMarkerFiles := 'ImarkerNameMarkerFiles_SelectDoc_importostatki'; // если по какой то причине передали пустое наименование.. зададим по умолчанию
 MyMarkerDocs := InitMarker(NameMarkerFiles, 8, 10, 100, true);
 pMarker.Caption   := ('Отмечено [%d] записей.'); // для заголовка
 pMarker.ImportFrom(MyMarkerDocs);

 if _cUsl = 0h
 if(getfirst Usl_akt where instr('альдо по 60 счету',Usl_akt.name) <> 0) = tsOK then
      set _cUsl := Usl_akt.nrec;
 rereadrecord;
}
cmCheckField: {
  case typeTable of
    0 : {
      ClearAll;
      setformat(scrImportOstatki6062);
      setformat(brow6062);
      }
    1 : {
      ClearAll;
      setformat(scrImportOstatki41);
      setformat(brow4110);
    }
    2 : {
      ClearAll;
      setformat(scrImportOstatki019);
      setformat(brow019);
    }

  end;
  if getfirst tFiles = tsOK{}
  if getfirst tInsertDocs6062_br = tsOK{}
  if getfirst tInsertDocs4110_br = tsOK{}
  if getfirst tInsertDocs019_br = tsOK{}
  rereadrecord;
}
cmpick:{
  case curfield of
   #Folder_input: {
        Folder_input := GetDirName('Выберите каталог');
        If ( Folder_input <> '' ) Set Folder_input := Folder_input +'\';
    }
    #Usl_akt.name: {
       if (RunInterface(L_MCU::GetSomeUsl,0) = cmDefault) {
          ReadMyDsk(_cUsl, 'KatUsl_NRec', True);
         set _cUsl := _cUsl;
        }
    }
   #usersdoc_own.name: {
     if RunInterface(F_CashBank::SelUsDoc, cgiPickAlone, 1, _wTiDk_own, _cCashBank_own, 0) = cmDefault
      {
        set _wTiDk_own := _wTiDk_own;
        set _cCashBank_own := _cCashBank_own;
      }
   }
   #usersdoc_ext.name:{
     if RunInterface(F_CashBank::SelUsDoc, cgiPickAlone, 2, _wTiDk_ext, _cCashBank_ext, 0) = cmDefault
      {
        set _wTiDk_ext := _wTiDk_ext;
        set _cCashBank_ext := _cCashBank_ext;
      }
   }
#declare getgrnal(var)
  {
    var _c : comp = #var;
    if RunInterface('L_NALOG::GETGRNAL', _c, word(0)) <> cmCancel {set #var := _c;}
  }
#end

  #GrNal20.name : #getgrnal(_cGrNal20)
  #GrNal18.name : #getgrnal(_cGrNal18)
  #GrNal10.name : #getgrnal(_cGrNal10)
  #Grnal0.name  : #getgrnal(_cGrNal0)
  #GrNalWithout.name: #getgrnal(_cGrNalWithout)
  #GrNalOther.name: #getgrnal(_cGrNalOther)

  #podr100.name : {
     If(RunInterface('Z_KATPODR::GetAnyPodr', _cpodr100, 0) = CmDefault) {
       Set _cpodr100 := _cpodr100;
     }
  }
  #podrokbfakel.name : {
     If(RunInterface('Z_KATPODR::GetAnyPodr', _cpodrokbfakel, 0) = CmDefault) {
       Set _cpodrokbfakel := _cpodrokbfakel;
     }
  }


  end;
rereadrecord;
}
cmOK: {
    /*if _cChanel = 0h
     {
      message('Выберите канал сбыта',error) ;
      Stop; abort; exit
     }
    */
    SaveMyDsk(Folder_input, 'importOstatki_Folder_input');
    SaveMyDsk(dateformat , 'importOstatki_dateformat');
    SaveMyDsk(ListName , 'importOstatki_ListName');
    SaveMyDsk( _cUsl        , 'importOstatki__cUsl');
    SaveMyDsk( _cCashBank_Own, 'importOstatki__cCashBankOwn');
    SaveMyDsk( _cCashBank_Ext, 'importOstatki__cCashBankExt');

    SaveMyDsk( _cGrNal20        , 'importOstatki___cGrNal20');
    SaveMyDsk( _cGrNal18        , 'importOstatki___cGrNal18');
    SaveMyDsk( _cGrNal10        , 'importOstatki___cGrNal10');
    SaveMyDsk( _cGrnal0         , 'importOstatki___cGrnal0');
    SaveMyDsk( _cGrNalWithout   , 'importOstatki___cGrNalWithout');
    SaveMyDsk( _cGrNalOther     , 'importOstatki___cGrNalOther');

    SaveMyDsk( _cpodr100     , 'importOstatki___cpodr100');
    SaveMyDsk( _cpodrokbfakel, 'importOstatki___cpodrokbfakel');

    SaveMyDsk( _dateOpr, 'importOstatki___dateOpr');

    if Folder_input = '' {
     message('не выбрана директория с файлами',error) ;
     stop;abort;exit;
    }
    if dateformat = '' {
     message('не указан формат даты',error);
     stop;abort;exit;
    }
    if ListName = '' {
     message('не указан EXCEL лист',error);
     stop;abort;exit;
    }

    ClearAll;
    fillrecArrayByTypeTable(typeTable);
    Folder_input := AddSlashToPath(Folder_input);
    startnewvisual(vtRotateVisual,vftimer+vfbreak+vfconfirm,'Поиск файлов...',0);
    var _isError : boolean = false;
    if FindFirstFile(Folder_input+'*.*', File_input)
     do{
       File_input:=upcase(File_input);
        if(MatchesMask(File_input,'*|.;..;~*') )
        if(MatchesMask(File_input,'*.xls*') )
         if not IsDirectory(Folder_input+File_input)
         {
            MyLog( '***********************************************************************');
          _isError := _isError and (not CheckFileFillValues(Folder_input+File_input));
         }
       } while FindNextFile(File_input);

    if _isError then {
      ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол обработки файлов и загрузки данных');
    }
  CheckErrors6062;
  CheckErrors4110;
  CheckErrors019;
 if visualizationactive  StopVisual('The End',vfTimer);

  rereadrecord(tntFiles_br);
  rereadrecord(tntInsertDocs6062_br);
  rereadrecord(tntInsertDocs4110_br);
} // cmOK
cmCreateDocs: {
    case typeTable of
      0 : {
            if not isvalidall(tnUsl_akt) {
               message('не указан услуга',error);
               stop;abort;exit;
              }
            if not isvalidall(tnUsersdoc_own){
               message('не указан РС для собственных ПП',error);
               stop;abort;exit;
              }
            if not isvalidall(tnUsersdoc_ext){
               message('не указан РС для сторонних ПП',error);
               stop;abort;exit;
              }
            if getfirst KatOtpEd_usl <> tsOK {
              Message('Учетная единица не найдена среди отпускных для выбранной услуги',error);
              stop; abort; exit;
            }
        }
      1 : {
           if not isvalidall(tnGrNal20){
               message('не указана группа налогов для 20%',error);
               stop;abort;exit;
              }
           if not isvalidall(tnGrNal18)  {
               message('не указана группа налогов для 18%',error);
               stop;abort;exit;
              }
           if not isvalidall(tnGrNal10)  {
               message('не указана группа налогов для 10%',error);
               stop;abort;exit;
              }
           if not isvalidall(tnGrnal0)   {
               message('не указана группа налогов для 0%',error);
               stop;abort;exit;
              }
           if not isvalidall(tnGrNalWithout){
               message('не указана группа налогов для пустого значения ставки НДС',error);
               stop;abort;exit;
              }
           if not isvalidall(tnGrNalOther){
               message('не указана группа налогов для остальных значений ставки НДС',error);
               stop;abort;exit;
              }
           if not isvalidall(tnpodr100){
               message('не указано подразделение "100 <Основное производство>"',error);
               stop;abort;exit;
              }
           if not isvalidall(tnpodrokbfakel){
               message('не указано подразделение "01 ОКБ <Факел>"',error);
               stop;abort;exit;
              }
           if _dateOpr = to_date(0,0,0){
               message('не указана дата формирования ордеров"',error);
               stop;abort;exit;
              }
       }
      2 : {
            if _dateOpr = to_date(0,0,0){
               message('не указана дата формирования документов"',error);
               stop;abort;exit;
              }
      }
    end;


  ClearMarker(MyMarkerDocs);
  pMarker.ExportTo(MyMarkerDocs);
  if getMarkercount(MyMarkerDocs) = 0
  {
    Message('Не выбран ни один файл',error);
    stop; abort; exit;
  }

  var _isError : boolean = false;

 _loop tFiles
   if SearchMarker(MyMarkerDocs, tFiles.nrec, mid)
   {
      if tFiles.FlagErr = 2
       {
         Mylog('Файл ' +tFiles.cFile + ' содержит ошибки. Работа прекращена');
        _isError := true;
       }
   }

  if _isError
   then
    {
     message('Создание документов прервано:'
     +''#13''+'выбранные файлы содержат ошибки',error);
    }
    else
    {
      CASE typeTable of
       0 : CreateDocs6062
       1 : CreateDocs4110
       2 : CreateDocs019
       //  CopyMoveFile(_fileFrom,_fileto, true,ecmfClientFrom  + ecmfClientTo )
      end;
    } ;
    ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол работы');
    rereadrecord(tntFiles_br);
    rereadrecord(tntInsertDocs6062_br);
}
end;
end.
