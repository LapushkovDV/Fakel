/*************************************************************************************************\
* Наименование: Ведение телефонного справочника                                                   *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/



//************************************************************
const
end;
Interface ImportOstatki 'Шаблоны объектов штрихкодирования. Просмотр/редактирование';
#include VarsTypes.var
Table Struct tFiles
(
    nrec    : comp
  , cFile   : string
  , FlagErr : byte
  , Descr   : string
)
with index
(
   Index1 = nrec (surrogate, unique)
  ,Index2 = cFile
)
;
Table Struct tInsertDocs
(
    nrec       : comp
  , ctFiles      : comp
  , schetBU    : string     // СчетБУ'
  , UIDorg     : string     // UID_Контрагент // НаименованиеКонтрагент'
  , INNorg     : string      // ИННКонтрагент
  , cOrg       : comp
  , UIDdogovor : string     // UID_Договор // ДатаДоговор' // НомерДоговор
  , dogdate    : date
  , dognodoc   : string
  , cDogovor   : comp
  , cCALPLAN   : comp
  , soprdSopr  : date       // ДатаНакладной
  , soprnSopr  : string     // НомерНакладной
  , plpordDoc  : date       // НомерПП
  , plporNoDoc : string     // НомерПП
  , summa      : double     // СуммаБУ
  , Descr      : string
  , FlagErr    : byte
  , filerow    : word
//        ВидВзаиморасчетов'
)
with index
(
   Index1 = nrec (surrogate, unique)
  ,Index2 = ctFiles
)
;


procedure MyLog(_log : string); forward;
create view
var
  pMarker: IMarker(marker) new;
  NameMarkerFiles : string;
  dateformat : string = 'DD.MM.YYYY' ;
  ListName : string = 'TDSheet';
    Folder_input
  , File_input : string;
  _logFile : string= '';
  typeTable : word = 0;
  mid, MyMarkerDocs : longint;

    _wTiDk_own
  , _wTiDk_ext : word;

   _cCashBank_Own
  ,_cCashBank_Ext
  ,_cUsl          : comp = 0h;

from
      dogovor
    , katsopr
    , KatOrg
    , CalPlan
    , usersdoc usersdoc_own
    , usersdoc usersdoc_ext
    , katusl Usl_akt
    , KatOtpEd KatOtpEd_usl
    , soprhoz
    , spsopr
    , plpor
    , basefin

    , tFiles
    , tInsertDocs
    , tFiles tFiles_br
    , tInsertDocs tInsertDocs_br


 where ((
                   tFiles_br.nrec == tInsertDocs_br.ctFiles
      and tInsertDocs_br.cOrg     == KatOrg.nrec
      and tInsertDocs_br.cDogovor == Dogovor.nrec
      and tInsertDocs_br.cCALPLAN == CalPlan.nrec

                  and _cUsl == Usl_akt.nrec
                 and      2 == KatOtpEd_usl.prmc
           and Usl_akt.Nrec == KatOtpEd_usl.cMcUsl
           and Usl_akt.CED  == KatOtpEd_usl.CKATED

        and               2 == usersdoc_own.razdel
         and _cCashBank_own == usersdoc_own.cCashbank
                      and 1 == usersdoc_own.TIPGAL

        and               2 == usersdoc_ext.razdel
         and _cCashBank_Ext == usersdoc_ext.cCashbank
                      and 2 == usersdoc_ext.TIPGAL

 ))
;

PROCEdURE ClearAll;
{
 delete all tFiles;
 delete all tInsertDocs;

 clearmarker(MyMarkerDocs);
} // PROCEdURE ClearAll;

function existkatsopr(_nSopr : string; _dSopr: date) : boolean;
{
  var _result : boolean = false;
 if getfirst katsopr where ((111 == katsopr.vidsopr
       and tInsertDocs.soprdSopr == katsopr.dSopr
       and tInsertDocs.soprnSopr == katsopr.nSopr
                           )) = tsOK
      {
        _result := True;
      }
 result := _result
}
function existplpor(_tipusers : word; _noDok: string; _datob: date) : boolean;
{
  var _result : boolean = false;
 if getfirst plpor where ((_tipusers == plpor.tidk
                          and _noDok == plpor.noDok (noindex)
                          and _datob == plpor.datob(noindex)
                         )) = tsOK
      {
        _result := True;
      }
 result := _result
}

PROCEdURE fillrecArrayByTypeTable(_type: byte);
{
    var _npp: byte;
        _npp := 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);
   if _type = 0
     {
      _recArray[_npp].def := 'СчетБУ'                 ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
      _recArray[_npp].def := 'СуммаБУ'                ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
//      _recArray[_npp].def := 'UID_Контрагент'         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
//      _recArray[_npp].def := 'ИННКонтрагент'          ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
//      _recArray[_npp].def := 'НаименованиеКонтрагент' ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
      _recArray[_npp].def := 'UID_Договор'            ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
      _recArray[_npp].def := 'ДатаДоговор'            ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
      _recArray[_npp].def := 'НомерДоговор'           ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
      _recArray[_npp].def := 'НомерНакладной'         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
      _recArray[_npp].def := 'ДатаНакладной'          ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
      _recArray[_npp].def := 'НомерПП'                ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
      _recArray[_npp].def := 'ДатаПП'                 ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
//      _recArray[_npp].def := 'ВидВзаиморасчетов'
     }
}
Function getKatOrg ( _dogovor : comp) : comp;
{
  var _result : comp;
  _result := 0h;
  if getfirst dogovor where ((_dogovor == dogovor.nrec)) = tsOK
   {
    _result := dogovor.corg;
   }

/*
  if getfirst fastfirstrow KatOrg Where (( _INNorg == KatOrg.unn (NOINDEX))) <> tsOK
   then {
         if getfirst fastfirstrow KatOrg Where (( _UIDorg == KatOrg.Unn (NOINDEX))) = tsOK
           then _result := KatOrg.nrec
    }
   else {
         _result := KatOrg.nrec
   }
*/
  result := _result
}

Function getDogovor(_UIDdogovor: string; _dogdate : date; _dognodoc : string) : comp;
{
  var _result : comp = 0h;
  if(getfirst dogovor where ((_UIDdogovor == DOGOVOR.SHEMANOTE(noindex)))) <> tsOK
  {
/*    if(getfirst dogovor where ((_dognodoc == DOGOVOR.NODOC_EXT (noindex)
                             and _dogdate == DOGOVOR.dDoc (noindex)))) <> tsOK
     {
      if(getfirst dogovor where ((_dognodoc == DOGOVOR.NODOC (noindex)
                               and _dogdate == DOGOVOR.dDoc (noindex)))) = tsOK
       {
         _result := dogovor.nrec;
       }
     }
     else {
       _result := dogovor.nrec;
     }
*/
  }
  else {
    _result := dogovor.nrec;
  }
 result := _result;
}

Function getcalplan(_cDogovor : comp): comp;
{
  var _result : comp = 0h;
  if(getfirst CalPlan where ((_cDogovor == CalPlan.cDogovor))) = tsOK
  {
    _result := CalPlan.nrec
  }
 result := _result;
}
Function getColor(_FlagErr: byte) : word;
{
  case _FlagErr of
   0 : Result := 0
   1 : Result := ColorNeed
   2 : Result := ColorError
  else
  {
   Result := 0;
  }
  end;
}
Procedure CheckErrors;
{
    setvisualheader('определение ошибок -_- ');

update tInsertDocs set tInsertDocs.FlagErr := 0, tInsertDocs.Descr := '';
    _loop tInsertDocs
     {
        if tInsertDocs.cOrg = 0h
         {
          tInsertDocs.FlagErr := 2 ;
          tInsertDocs.Descr   := tInsertDocs.Descr + '|не определили организацию';
         }
         if tInsertDocs.schetBU = '' {
          tInsertDocs.FlagErr := 2 ;
          tInsertDocs.Descr   := tInsertDocs.Descr + '|не определен счет БУ';
         }
         if tInsertDocs.summa = 0 {
          tInsertDocs.FlagErr := 2 ;
          tInsertDocs.Descr   := tInsertDocs.Descr + '|нулевая сумма';
         }
         if tInsertDocs.cDogovor = 0h {
          tInsertDocs.FlagErr := 2 ;
          tInsertDocs.Descr   := tInsertDocs.Descr + '|не найден договор';
         }
         if tInsertDocs.cCALPLAN = 0h {
          tInsertDocs.FlagErr := 2 ;
          tInsertDocs.Descr   := tInsertDocs.Descr + '|не найден ПКП к договору';
         }
         if tInsertDocs.schetBU = '60.01' {
             if tInsertDocs.soprnSopr = '' {
                tInsertDocs.FlagErr := 2 ;
                tInsertDocs.Descr   := tInsertDocs.Descr + '|пустой номер акта';
             }
             if tInsertDocs.soprdSopr = to_date(0,0,0) {
                tInsertDocs.FlagErr := 2 ;
                tInsertDocs.Descr   := tInsertDocs.Descr + '|пустая дата акта';
             }
             if tInsertDocs.soprnSopr <> '' and tInsertDocs.soprdSopr <> to_date(0,0,0) {
                if existkatsopr(katsopr.nSopr, katsopr.dSopr)
                if tInsertDocs.FlagErr <> 2
                  {
                   tInsertDocs.FlagErr := 1 ;
                   tInsertDocs.Descr   := tInsertDocs.Descr + '|в системе уже есть акт с таким номером и датой';
                  }
             }
          }
         if tInsertDocs.schetBU = '60.02' or tInsertDocs.schetBU = '62.02' {
             if tInsertDocs.plporNoDoc= '' {
                tInsertDocs.FlagErr := 2 ;
                tInsertDocs.Descr   := tInsertDocs.Descr + '|пустой номер ПП';
             }
             if tInsertDocs.plpordDoc= to_date(0,0,0) {
                tInsertDocs.FlagErr := 2 ;
                tInsertDocs.Descr   := tInsertDocs.Descr + '|пустая дата ПП';
             }

             if tInsertDocs.plporNoDoc <> '' and tInsertDocs.plpordDoc <> to_date(0,0,0) {

                if tInsertDocs.schetBU = '60.02'
                if existplpor(usersdoc_own.tipusers, tInsertDocs.plporNoDoc, tInsertDocs.plpordDoc)
                if tInsertDocs.FlagErr <> 2
                  {
                   tInsertDocs.FlagErr := 1 ;
                   tInsertDocs.Descr   := tInsertDocs.Descr + '|в системе уже есть ПП с таким номером и датой';
                  }

                if tInsertDocs.schetBU = '62.02'
                if existplpor(usersdoc_ext.tipusers, tInsertDocs.plporNoDoc, tInsertDocs.plpordDoc)
                if tInsertDocs.FlagErr <> 2
                  {
                   tInsertDocs.FlagErr := 1 ;
                   tInsertDocs.Descr   := tInsertDocs.Descr + '|в системе уже есть ПП с таким номером и датой';
                  }

             }
          }
         case tInsertDocs.flagErr of
           0 : tInsertDocs.Descr := 'OK';
           1 :  {
                  if tFiles.FlagErr <> 2 then
                    update current tFiles set
                       tFiles.FlagErr := 1
                     , tFiles.Descr   := 'Предупреждение'
                    ;
               }
          else {
            update current tFiles set
               tFiles.FlagErr := 2
             , tFiles.Descr   := 'Есть ошибки в файле';
            ;
          }
          end;
         update current tInsertDocs;
     }
}
#include OpenFileExcelSearchCells.vpp
Procedure prtInsertDocs(_nrow : longint; _file : string);
{
  var _i: byte;
  if getfirst tFiles where ((_file == tFiles.cFile)) <> tsOK {
    insert tFiles set
      tFiles.cFile   := _file
    , tFiles.FlagErr := 0
    , tFiles.descr   := 'OK'
    ;
  }

  clearBuffer(tntInsertDocs);
  tInsertDocs.FileRow         := _nrow;
  tInsertDocs.ctFiles := tFiles.nrec;
  for(_i := 1; _I <= getLimit(_recArray); _i++)
  {
    case upcase(_recArray[_i].def) of
      Upcase('СчетБУ'                ) : tInsertDocs.schetBU    := Trim(_recArray[_i].value);
      Upcase('СуммаБУ'               ) : tInsertDocs.summa      := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ',''));
//      Upcase('UID_Контрагент'        ) : tInsertDocs.UIDorg     := Trim(_recArray[_i].value);
//      Upcase('ИННКонтрагент'         ) : tInsertDocs.INNorg     := Trim(_recArray[_i].value);
      Upcase('UID_Договор'           ) : tInsertDocs.UIDdogovor := Trim(_recArray[_i].value);
      Upcase('ДатаДоговор'           ) : tInsertDocs.dogdate    := StrToDate(Trim(_recArray[_i].value),dateformat);
      Upcase('НомерДоговор'          ) : tInsertDocs.dognodoc   := Trim(_recArray[_i].value);
      Upcase('НомерНакладной'        ) : tInsertDocs.soprnSopr  := Trim(_recArray[_i].value);
      Upcase('ДатаНакладной'         ) : tInsertDocs.soprdSopr  := StrToDate(Trim(_recArray[_i].value),dateformat);
      Upcase('НомерПП'               ) : tInsertDocs.plporNoDoc := Trim(_recArray[_i].value);
      Upcase('ДатаПП'                ) : tInsertDocs.plpordDoc  := StrToDate(Trim(_recArray[_i].value),dateformat);
    end;
  }
//   if tInsertBaseDocSP.cMc <> 0h
   if tInsertDocs.schetBU <> ''
    then
     {
      tInsertDocs.cDogovor := getDogovor(tInsertDocs.UIDdogovor, tInsertDocs.dogdate, tInsertDocs.dognodoc);
      tInsertDocs.cOrg     := getKatOrg(tInsertDocs.cDogovor);
      tInsertDocs.cCALPLAN := getcalplan(tInsertDocs.cDogovor);
      Insert Current tInsertDocs;
     }
}  // tInsertSaldoMC
procedure MyLog(_log : string);
{
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'ImportOstatki_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
  logstrtofile(_logFile,_log);
}

PROCEdURE FillInsertTables(_nrow : longint; _file : string);
{
  Case typeTable of
   0: prtInsertDocs(_nrow, _file)
  end;
} // PROCEdURE FillInsertTableeNaklSFO(_log: string);


Procedure InsertAkts;
{
    mylog('Создание Актов');
 _loop tFiles where tFiles.FlagErr <> 2
   if SearchMarker(MyMarkerDocs, tFiles.nrec, mid)
     _loop tInsertDocs where ((tFiles.nrec == tInsertDocs.ctFiles))
       and tInsertDocs.FlagErr = 0
          and tInsertDocs.schetBU = '60.01'
       {
         if existkatsopr(tInsertDocs.soprnSopr, tInsertDocs.soprdSopr) then {
           mylog('Акт '+tInsertDocs.soprnSopr + ' от ' + tInsertDocs.soprdSopr+' уже есть в системе. Пропускаем');
           continue;
         }
         insert KATSOPR set
             KatSopr.NAME     := 'Импорт остатков 60.01'
            ,KatSopr.DESCR    := sgettune('user.descr')
            ,KatSopr.CORG     := sgettune('user.desgr')
            ,KatSopr.VHODNAL  := 1
            ,KatSopr.STATUS   := 1
//            ,KatSopr.CNOTE   :=
            ,katsopr.summa    := tInsertDocs.summa
            ,KatSopr.TIPSOPR  := 1
            ,KatSopr.DSOPR    := tInsertDocs.soprdsopr
            ,KatSopr.DOPR     := tInsertDocs.soprdsopr
            ,KatSopr.DPRICE   := tInsertDocs.soprdsopr
            ,KatSopr.YEARSOPR := year(tInsertDocs.soprdsopr)
            ,KatSopr.NSOPR    := tInsertDocs.soprnsopr
            ,KatSopr.VIDSOPR  := 111
            ,KatSopr.CGRUZFROM:= tInsertDocs.corg
            ,KatSopr.CORGBASE := tInsertDocs.corg
            ,KatSopr.CORG     := tInsertDocs.corg
            ,KatSopr.CDOGOVOR := tInsertDocs.cdogovor
            ,KatSopr.CCALPLAN := tInsertDocs.ccalplan
          ;
         Insert soprhoz set
             soprhoz.CDOGOVOR := katsopr.cDogovor
           , soprhoz.CSOPRDOC := katsopr.nrec
           , soprhoz.DATOB    := katsopr.dsopr
           , soprhoz.TIPDOC   := 111
           , soprhoz.TIDKGAL  := 111
           , soprhoz.NODOC    := katsopr.nsopr
           , soprhoz.DESCR    := katsopr.descr
           , soprhoz.DESGR    := katsopr.desgr
           , soprhoz.SUMMA    := katsopr.summa
           , soprhoz.DIRECT   := 1
           , soprhoz.VHSUMHOZ := '+'
           , soprhoz.CORG     := katsopr.corg
         ;
         insert spsopr set
            spsopr.NPP     := 1
          , spsopr.PRMC    := 2
          , spsopr.CMCUSL  := Usl_akt.nrec
          , spsopr.COTPED  := KatOtpEd_usl.nrec
          , spsopr.KOL     := 1
          , spsopr.KOLOPL  := 1
          , spsopr.KOLFACT := 1
          , spsopr.PRICE   := tInsertDocs.summa
          , spsopr.RPRICE  := tInsertDocs.summa
          , spsopr.DSOPR   := KatSopr.dsopr
          , spsopr.DOPRTTN := KatSopr.dsopr
          , spsopr.VIDSOPR := KatSopr.vidsopr
         ;
         mylog('Сформирован акт на прием услуг ' + KatSopr.nsopr +' от '+ KatSopr.dsopr +' на сумму '+ KatSopr.summa);
       }
}
Procedure InsertPlPor;
{
  mylog('Создание ПП');
 _loop tFiles where tFiles.FlagErr <> 2
   if SearchMarker(MyMarkerDocs, tFiles.nrec, mid)
     _loop tInsertDocs where ((tFiles.nrec == tInsertDocs.ctFiles))
        and (tInsertDocs.schetBU = '60.02' or tInsertDocs.schetBU = '62.02')
        and tInsertDocs.FlagErr = 0
      {
        mylog('schetBU = ' + tInsertDocs.schetBU);
         if tInsertDocs.schetBU = '60.02'
           {
              if existplpor(usersdoc_own.tipusers, tInsertDocs.plporNoDoc, tInsertDocs.plpordDoc)
                {
                   mylog('ПП '+tInsertDocs.plporNoDoc + ' от ' + tInsertDocs.plpordDoc+' уже есть в системе. Пропускаем');
                   continue;
                }

             insert plpor set
                 plpor.TIDKGAL   := 1
               , plpor.DIRECT    := 0
               , plpor.TIDK      := usersdoc_own.tipusers
               , plpor.NODOK     := tInsertDocs.plporNoDoc
               , plpor.DESCR     := sgettune('user.descr')
               , plpor.DESGR     := sgettune('user.desgr')
               , plpor.YEARDOC   := year(tInsertDocs.plpordDoc)
               , plpor.DATVIP    := tInsertDocs.plpordDoc
               , plpor.DATOTS    := tInsertDocs.plpordDoc
               , plpor.DATOB     := tInsertDocs.plpordDoc
               , plpor.CPLAT     := cogettune('MYORG')
               , plpor.CBANKPLAT := cogettune('MYBANK')
               , plpor.NAMEPL1   := 'Импорт остатков 60.02'
               , plpor.CPOL      := tInsertDocs.corg
               , plpor.SUMPLAT   := tInsertDocs.summa
               , plpor.MODEDOC   := 2048
              ;
             Insert SoprHoz set
                  SoprHoz.CDOGOVOR := tInsertDocs.cDogovor
                , SoprHoz.direct   := 0
                , SoprHoz.DATOB    := tInsertDocs.plpordDoc
                , SoprHoz.TIPDOC   := plpor.TIDK
                , SoprHoz.TIDKGAL  := 1
                , SoprHoz.NODOC    := tInsertDocs.plporNoDoc
                , SoprHoz.DESCR    := plpor.DESCR
                , SoprHoz.DESGR    := plpor.DESGR
                , SoprHoz.SUMMA    := tInsertDocs.summa
                , SoprHoz.DIRECT   := 2
                , SoprHoz.VHSUMHOZ := '+'
                , SoprHoz.MODEDOC  := 2048
                , SoprHoz.CORG     := tInsertDocs.cOrg
                , soprhoz.CSOPRDOC := plpor.nrec
             ;
             Insert basefin set
                 basefin.CDOGOVOR :=  tInsertDocs.cDogovor
               , basefin.TIPDOC   := plpor.TIDK
               , basefin.TIDKGAL  := 1
               , basefin.CSOPRDOC := plpor.nrec
               , basefin.CPLPOR   := plpor.nrec
               , basefin.NODOC    := plpor.nodok
               , basefin.DESCR    := plpor.DESCR
               , basefin.DESGR    := plpor.DESGR
               , basefin.DDOC     := plpor.datob
               , basefin.SUMMA    := plpor.sumplat
               , basefin.DIRECT   := 2
               , basefin.CORG     := tInsertDocs.cOrg
               , basefin.CSOPRHOZ := SoprHoz.nrec
               , basefin.CPLDGDIST := 1h
              ;
             mylog('Создано собственное ПП в РС "' + usersdoc_own.name + '" № ' + plpor.NODOK +' от '+ plpor.DATOB +' на сумму '+ plpor.SUMPLAT)
           }
         if tInsertDocs.schetBU = '62.02'
           {
              if existplpor(usersdoc_ext.tipusers, tInsertDocs.plporNoDoc, tInsertDocs.plpordDoc)
                {
                   mylog('ПП '+tInsertDocs.plporNoDoc + ' от ' + tInsertDocs.plpordDoc+' уже есть в системе. Пропускаем');
                   continue;
                }

             insert plpor set
                 plpor.TIDKGAL   := 2
               , plpor.DIRECT    := 1
               , plpor.TIDK      := usersdoc_ext.tipusers
               , plpor.NODOK     := tInsertDocs.plporNoDoc
               , plpor.DESCR     := sgettune('user.descr')
               , plpor.DESGR     := sgettune('user.desgr')
               , plpor.YEARDOC   := year(tInsertDocs.plpordDoc)
               , plpor.DATVIP    := tInsertDocs.plpordDoc
               , plpor.DATOTS    := tInsertDocs.plpordDoc
               , plpor.DATOB     := tInsertDocs.plpordDoc
               , plpor.CPLAT     := cogettune('MYORG')
               , plpor.CBANKPLAT := cogettune('MYBANK')
               , plpor.NAMEPL1   := 'Импорт остатков 62.02'
               , plpor.CPOL      := tInsertDocs.corg
               , plpor.SUMPLAT   := tInsertDocs.summa
               , plpor.MODEDOC   := 1024
              ;
             Insert SoprHoz set
                  SoprHoz.CDOGOVOR := tInsertDocs.cDogovor
                , SoprHoz.direct   := 1
                , SoprHoz.DATOB    := tInsertDocs.plpordDoc
                , SoprHoz.TIPDOC   := plpor.TIDK
                , SoprHoz.TIDKGAL  := 2
                , SoprHoz.NODOC    := tInsertDocs.plporNoDoc
                , SoprHoz.DESCR    := plpor.DESCR
                , SoprHoz.DESGR    := plpor.DESGR
                , SoprHoz.SUMMA    := tInsertDocs.summa
                , SoprHoz.DIRECT   := 2
                , SoprHoz.VHSUMHOZ := '+'
                , SoprHoz.MODEDOC  := 1024
                , SoprHoz.CORG     := tInsertDocs.cOrg
                , soprhoz.CSOPRDOC := plpor.nrec
             ;
             Insert basefin set
                 basefin.CDOGOVOR :=  tInsertDocs.cDogovor
               , basefin.TIPDOC   := plpor.TIDK
               , basefin.TIDKGAL  := 2
               , basefin.CSOPRDOC := plpor.nrec
               , basefin.CPLPOR   := plpor.nrec
               , basefin.NODOC    := plpor.nodok
               , basefin.DESCR    := plpor.DESCR
               , basefin.DESGR    := plpor.DESGR
               , basefin.DDOC     := plpor.datob
               , basefin.SUMMA    := plpor.sumplat
               , basefin.DIRECT   := 1
               , basefin.CORG     := tInsertDocs.cOrg
               , basefin.CSOPRHOZ := SoprHoz.nrec
               , basefin.CPLDGDIST := 1h
              ;
             mylog('Создано стороннее ПП в РС "' + usersdoc_own.name + '" № ' + plpor.NODOK +' от '+ plpor.DATOB +' на сумму '+ plpor.SUMPLAT)
           }
      }
}

Procedure CreateDocs(_log: string);
{
   StartNewVisual(vtIndicatorVisual,vfTimer,'Формирование документов',getmarkercount(MyMarkerDocs));

   InsertAkts;
   InsertPlPor;

 if visualizationactive  StopVisual('The End',vfTimer);
} // Procedure InsertAktIzlishki(_log: string);

Screen scrImportOstatki ;
  show at (,,, 4);
  Fields
    dateformat   : NoProtect,{Font = {backcolor = if(dateformat = '', colorneed,0);}};
    ListName     : NoProtect,{Font = {backcolor = if(ListName = '', colorneed,0);}};
    Folder_input :  Protect, PickButton,{Font = {backcolor = if(Folder_input = '', colorneed,0);}};
    Usl_akt.name : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnUsl_akt), colorneed,0);}};
    Usersdoc_own.name  : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnUsersdoc_own), colorneed,0);}};
    Usersdoc_ext.name  : Protect, pickbutton, {Font = {backcolor = if(not isvalidall(tnUsersdoc_ext), colorneed,0);}};
  buttons
    cmOK,,,;
    cmCreateDocs,,,;
    cmCancel,,,;
<<'Импорт заказов от покупателей'
Формат даты в файле .@@@@@@@@@@@@      Наименование листа в книге EXCEL.@@@@@@@@@@@@@@@@@@@@@@
Папка с файлами данных .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    `Услуга для спецификации актов (60.01):`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Расчетный счет для собственных ПП (60.02):`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Расчетный счет для сторонних ПП (62.02):`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  <.Получить файлы.>                          <.Сформировать документы.>                              <. Отмена .>
>>
end;

browse brow1('',,sci1EscIns);
 show at(,5, ,9);
table tFiles_br;
 recMarker=pMarker{tFiles_br.nrec}; // по умолчанию итак nrec юзается...
fields
  tFiles_br.cFile 'Файл' headerAlign = centered:protect,[15];
  tFiles_br.Descr 'Описание' headerAlign = centered:protect,[2] , {Font = {backcolor = getColor(tFiles_br.FlagErr);}};
end;

browse brow2('',,sci1Esc);
 show at(,10,,);
table tInsertDocs_br;
fields
 {Font = {
          backcolor = getColor(tInsertDocs_br.FlagErr);
         }
 };
  tInsertDocs_br.FileRow   'Строка','в файле' headerAlign = centered:protect,[4];
  tInsertDocs_br.schetBU   'Счет ','БУ' headerAlign = centered:protect,[4];
  KatOrg.name           'Организация' headerAlign = centered:protect,[4];
  DOGOVOR.NODOC + ' от ' + DOGOVOR.DDOC 'Договор' headerAlign = centered:protect,[4];
  CALPLAN.NODOC + ' от ' + CALPLAN.dInput 'ПКП' headerAlign = centered:protect,[4];
  tInsertDocs_br.soprnSopr  'Акт','номер' headerAlign = centered:protect,[4];// ДатаНакладной
  tInsertDocs_br.soprdSopr  'Акт','дата' headerAlign = centered:protect,[4];// НомерНакладной
  tInsertDocs_br.plporNoDoc 'ПП','номер' headerAlign = centered:protect,[4];// НомерПП
  tInsertDocs_br.plpordDoc  'ПП','дата' headerAlign = centered:protect,[4];// НомерПП
  tInsertDocs_br.summa      'Сумма' headerAlign = centered:protect,[4];// СуммаБУ
  tInsertDocs_br.Descr      'Описание' headerAlign = centered:protect,[4];
end;

handleevent
cminit:{
 typeTable := 0;
 Folder_input := '';
 ReadMyDSK(Folder_input, 'importOstatki_Folder_input', TRUE);
 ReadMyDSK(dateformat , 'importOstatki_dateformat', TRUE);
 ReadMyDSK(ListName , 'importOstatki_ListName', TRUE);

 ReadMyDSK( _cUsl        , 'importOstatki__cUsl', TRUE);
 ReadMyDSK( _cCashBank_Own, 'importOstatki__cCashBankOwn', TRUE);
 ReadMyDSK( _cCashBank_Ext, 'importOstatki__cCashBankExt', TRUE);
 set _cUsl         := _cUsl  ;
 set _cCashBank_Own := _cCashBank_Own ;
 set _cCashBank_Ext := _cCashBank_Ext;

 if getfirst usersdoc_own = tsOK {}

 if getfirst usersdoc_ext = tsOK {}


 if NameMarkerFiles = '' then NameMarkerFiles := 'ImarkerNameMarkerFiles_SelectDoc_importostatki'; // если по какой то причине передали пустое наименование.. зададим по умолчанию
 MyMarkerDocs := InitMarker(NameMarkerFiles, 8, 10, 100, true);
 pMarker.Caption   := ('Отмечено [%d] записей.'); // для заголовка
 pMarker.ImportFrom(MyMarkerDocs);

 if _cUsl = 0h
 if(getfirst Usl_akt where instr('альдо по 60 счету',Usl_akt.name) <> 0) = tsOK then
      set _cUsl := Usl_akt.nrec;
 rereadrecord;
}
cmpick:{
  case curfield of
   #Folder_input: {
        Folder_input := GetDirName('Выберите каталог');
        If ( Folder_input <> '' ) Set Folder_input := Folder_input +'\';
    }
    #Usl_akt.name: {
       if (RunInterface(L_MCU::GetSomeUsl,0) = cmDefault) {
          ReadMyDsk(_cUsl, 'KatUsl_NRec', True);
         set _cUsl := _cUsl;
        }
    }
   #usersdoc_own.name: {
     if RunInterface(F_CashBank::SelUsDoc, cgiPickAlone, 1, _wTiDk_own, _cCashBank_own, 0) = cmDefault
      {
        set _wTiDk_own := _wTiDk_own;
        set _cCashBank_own := _cCashBank_own;
      }
   }
   #usersdoc_ext.name:{
     if RunInterface(F_CashBank::SelUsDoc, cgiPickAlone, 2, _wTiDk_ext, _cCashBank_ext, 0) = cmDefault
      {
        set _wTiDk_ext := _wTiDk_ext;
        set _cCashBank_ext := _cCashBank_ext;
      }
   }
  end;
rereadrecord;
}
cmOK: {
    /*if _cChanel = 0h
     {
      message('Выберите канал сбыта',error) ;
      Stop; abort; exit
     }
    */
    SaveMyDsk(Folder_input, 'importOstatki_Folder_input');
    SaveMyDsk(dateformat , 'importOstatki_dateformat');
    SaveMyDsk(ListName , 'importOstatki_ListName');
    SaveMyDsk( _cUsl        , 'importOstatki__cUsl');
    SaveMyDsk( _cCashBank_Own, 'importOstatki__cCashBankOwn');
    SaveMyDsk( _cCashBank_Ext, 'importOstatki__cCashBankExt');

    if Folder_input = '' {
     message('не выбрана директория с файлами',error) ;
     stop;abort;exit;
    }
    if dateformat = '' {
     message('не указан формат даты',error);
     stop;abort;exit;
    }
    if ListName = '' {
     message('не указан EXCEL лист',error);
     stop;abort;exit;
    }

    ClearAll;
    fillrecArrayByTypeTable(typeTable);
    Folder_input := AddSlashToPath(Folder_input);
    startnewvisual(vtRotateVisual,vftimer+vfbreak+vfconfirm,'Поиск файлов...',0);
    var _isError : boolean = false;
    if FindFirstFile(Folder_input+'*.*', File_input)
     do{
       File_input:=upcase(File_input);
        if(MatchesMask(File_input,'*|.;..;~*') )
        if(MatchesMask(File_input,'*.xls*') )
         if not IsDirectory(Folder_input+File_input)
         {
          _isError := _isError and (not CheckFileFillValues(Folder_input+File_input));
         }
       } while FindNextFile(File_input);

    if _isError then {
      ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол обработки файлов и загрузки данных');
    }
    CheckErrors;
 if visualizationactive  StopVisual('The End',vfTimer);
  rereadrecord(tntFiles_br);
  rereadrecord(tntInsertDocs_br);
} // cmOK
cmCreateDocs: {

  if getfirst KatOtpEd_usl <> tsOK {
    Message('Учетная единица не найдена среди отпускных для выбранной услуги',error);
    stop; abort; exit;
  }

  ClearMarker(MyMarkerDocs);
  pMarker.ExportTo(MyMarkerDocs);
  if getMarkercount(MyMarkerDocs) = 0
  {
    Message('Не выбран ни один файл',error);
    stop; abort; exit;
  }

  var _isError : boolean = false;

 _loop tFiles
   if SearchMarker(MyMarkerDocs, tFiles.nrec, mid)
   {
      if tFiles.FlagErr = 2
       {
         Mylog('Файл ' +tFiles.cFile + ' содержит ошибки. Работа прекращена');
        _isError := true;
       }
   }

  if _isError
   then
    {
     message('Создание документов прервано:'
     +''#13''+'выбранные файлы содержат ошибки',error);
    }
    else
    {
      CASE typeTable of
       0 : CreateDocs(_logFile)
       //  CopyMoveFile(_fileFrom,_fileto, true,ecmfClientFrom  + ecmfClientTo )
      end;
    } ;
    ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол работы');
    rereadrecord(tntFiles_br);
    rereadrecord(tntInsertdocs_br);
}
end;
end.
